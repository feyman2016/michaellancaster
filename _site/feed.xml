<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
	<channel>
		<title>Michael Lancaster</title>
		<description>Front End Developer/HTML5 Soldier</description>
		<link>http://bymichaellancaster.com/</link>
		
			<item>
				<title>Basic overview of client - side templating</title>
				<description>&lt;p&gt;Template rendering is very common on the web applications when we talk about back end development where technologies like Java, Ruby, PHP.. are used to render templates and show content, but lately about two or three years ago we could noticed that developers and companies are changing this using client side templating.&lt;/p&gt;

&lt;h2 id='server__side_templating_the_common_way'&gt;Server - Side templating (the common way)&lt;/h2&gt;

&lt;p&gt;So as I mentioned before back end technologies like Java, Ruby, PHP.. has being used to render the template from the back to the the client side and this approach consists in literally render on the server using one of those technologies and through it into the client - side.&lt;/p&gt;

&lt;p&gt;Two things are very clear to me. First we have to consume the server (imagine if you have to render lots of time), Second is the bandwidth request so the template and the data has to be downloaded into the client side (slow and request bandwidth).&lt;/p&gt;

&lt;h2 id='client__side_templating_the_new_kid_in_the_block'&gt;Client - Side templating (the new kid in the block?!)&lt;/h2&gt;

&lt;p&gt;The client side consists in remove the hard work from the server (even making the servers cost less expansive) and the back end side adding into a very, very known technology called Javascript that runs on each user&amp;#8217;s browser So no hard work to the server rendering templates and more control for you at your end.&lt;/p&gt;

&lt;p&gt;At start the client side template will use placeholders as content using it&amp;#8217;s own tags and after your JS download the JSON data another very known technology (fast and simple to read) the template will be rendered/compiled and the data will be added into the HTML element.&lt;/p&gt;

&lt;h2 id='simple_json_data_example'&gt;Simple JSON data example&lt;/h2&gt;
&lt;pre&gt;&lt;code data-language='json'&gt;
{
  &quot;client&quot;: {
    &quot;name&quot;: &quot;Michael lancaster&quot;,
    &quot;name&quot;: &quot;John Due&quot;
  },
  &quot;occupation&quot;: {
    &quot;description&quot;: &quot;Front End Engineer&quot;,
    &quot;description&quot;: &quot;Jornalist&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;
&lt;p&gt;This is very human readable right?!&lt;/p&gt;

&lt;h2 id='simple_web_app_example'&gt;Simple Web app example&lt;/h2&gt;

&lt;p&gt;Here I&amp;#8217;m using the Yahoo YQL API requesting the JSON data and rendering on the page using Handlebars.js with a little of logic. You can check out and download the Web app here &lt;a target='_blank' title='Handlebars.js app' href='http://git.io/tUfHyA'&gt;http://git.io/tUfHyA&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='handlebarsjs_template_markup_example'&gt;Handlebars.js template markup example&lt;/h2&gt;
&lt;script src='https://gist.github.com/weblancaster/5329561.js'&gt; &lt;/script&gt;&lt;br /&gt;
&lt;h2 id='app_js_file'&gt;App JS file&lt;/h2&gt;

&lt;p&gt;On my app.js file I request the JSON data, replace the template placeholders, render/compile the template and append to the HTML element.&lt;/p&gt;
&lt;pre&gt;&lt;code data-language='javascript'&gt;
//app js file
function showNewsFromYahooAPI() {
  $.ajax({
        url: 'http://query.yahooapis.com/v1/public/yql?q=select%20title%20from%20rss%20where%20url%3D%22http%3A%2F%2Frss.news.yahoo.com%2Frss%2Ftopstories%22&amp;format=json&amp;callback=',
        dataType: 'json'
    }).done(function(data){
      var
        query = data.query.results,
        source = $('#myTemplate').html(),
        compiledTemplate = Handlebars.compile(source),
        result = compiledTemplate(query);

      $('#content').html(result);
    });
}

$(function() {
    showNewsFromYahooAPI();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id='who_uses_client_side_templating'&gt;Who uses client side templating?!&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Linkedin (Dust.js)&lt;/li&gt;

&lt;li&gt;USAToday (Underscore.js)&lt;/li&gt;

&lt;li&gt;Walmart Mobile (Underscore.js)&lt;/li&gt;

&lt;li&gt;Hulu (Handlebars.js)&lt;/li&gt;

&lt;li&gt;Groupon (Mustache.js)&lt;/li&gt;

&lt;li&gt;And many, many others.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='be_aware_of'&gt;Be aware of..&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Heavy rendering on the users side (devices are not that good as you think they are).&lt;/li&gt;

&lt;li&gt;Organization is king.&lt;/li&gt;

&lt;li&gt;There&amp;#8217;s logic-less and logic templates (ask yourself how complex is my template?).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='some_links_to_client_side_template'&gt;Some links to client side template&lt;/h2&gt;
&lt;a target='_blank' title='Handlebarsjs' href='http://handlebarsjs.com/'&gt;http://handlebarsjs.com/&lt;/a&gt;&lt;br /&gt;&lt;a target='_blank' title='Mustachejs' href='http://mustache.github.io/'&gt;http://mustache.github.io/&lt;/a&gt;&lt;br /&gt;&lt;a target='_blank' title='Dustjs' href='http://akdubya.github.io/dustjs/'&gt;http://akdubya.github.io/dustjs/&lt;/a&gt;&lt;br /&gt;&lt;a target='_blank' title='Underscorejs' href='http://documentcloud.github.io/underscore/#template'&gt;http://documentcloud.github.io/underscore/#template&lt;/a&gt;&lt;br /&gt;&lt;a target='_blank' title='jQuery tmpl' href='https://github.com/jquery/jquery-tmpl'&gt;https://github.com/jquery/jquery-tmpl&lt;/a&gt;&lt;br /&gt;
&lt;p&gt;and many others like Jade, Haml-js, Eco, etc.&lt;/p&gt;

&lt;h2 id='i_suggest_you_read'&gt;I suggest you read..&lt;/h2&gt;
&lt;p&gt;
Smashing Magazine - Client-Side Templating &lt;a target='_blank' title='Smashing magazine: client side templating' href='http://coding.smashingmagazine.com/2012/12/05/client-side-templating/'&gt;click here.&lt;/a&gt;
    &lt;br /&gt;
Leaving JSPs in the dust: moving LinkedIn to dust.js client-side templates &lt;a target='_blank' title='Leaving JSPs in the dust: moving LinkedIn to dust.js client-side templates' href='http://engineering.linkedin.com/frontend/leaving-jsps-dust-moving-linkedin-dustjs-client-side-templates'&gt;click here.&lt;/a&gt;
    &lt;br /&gt;
The client-side templating throwdown: mustache, handlebars, dust.js, and more &lt;a target='_blank' title='The client-side templating throwdown: mustache, handlebars, dust.js, and more' href='http://engineering.linkedin.com/frontend/client-side-templating-throwdown-mustache-handlebars-dustjs-and-more'&gt;click here.&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;</description>
				<published>Sun Apr 07 00:00:00 -0500 2013</published>
				<link>http://bymichaellancaster.com//blog/basic-overview-of-client-side-templating</link>
			</item>
		
			<item>
				<title>From San Francisco to the Brazilian developers community.</title>
				<description>&lt;p&gt;I went to the HTML5 Developers Conference in San Francisco (01 Apr 13 to 03 Apr 13) and there I met some awesome developers from Brazil and as they are very active to help the developers community in Brazil with speaks, presentations and events they decided record a chat with me talking about how it is work in US, how I got a job here and some good tips for those that want to try this adventure.&lt;/p&gt;

&lt;p&gt;The awesome developers from Brazil including myself and the Principal Mozilla&amp;#8217;s Evangelist Christian Heilmann, we had a great dinner. ;)&lt;/p&gt;
&lt;div class='fluidImg'&gt;
&lt;img alt='Brazilian developers and Christian Heilmann' src='/assets/images/post-images/sf-dinner.jpg' /&gt;
&lt;/div&gt;&lt;br /&gt;
&lt;h2 id='the_chat'&gt;The chat&lt;/h2&gt;

&lt;p&gt;The video isn&amp;#8217;t in a good quality but the content is the important.&lt;/p&gt;
&lt;div class='fluidMedia'&gt;
	&lt;iframe src='https://www.youtube.com/embed/73RVbGcZQXk' allowfullscreen='allowfullscreen' frameborder='0'&gt; &lt;/iframe&gt;
&lt;/div&gt;&lt;br /&gt;
&lt;p&gt;Thanks to all my friends from Brazil shared this to help the developers that thinks to come work in US.&lt;/p&gt;</description>
				<published>Sat Apr 06 00:00:00 -0500 2013</published>
				<link>http://bymichaellancaster.com//blog/from-san-francisco-to-the-brazilian-developers-community</link>
			</item>
		
			<item>
				<title>Fluid iframe without use of javascript.</title>
				<description>&lt;p&gt;Simple technique to make fluid iframes without use of javascript or plugins. Using this technique we have more gains in performance and simplicity.&lt;/p&gt;

&lt;p&gt;This is a technique of positioning a element inside of another using &amp;#8220;position: absolute;&amp;#8221; for the &amp;#8220;child&amp;#8221; and &amp;#8220;position: relative;&amp;#8221; for the &amp;#8220;wrap&amp;#8221;.&lt;/p&gt;

&lt;p&gt;(ps: Depending on your case I suggest you set height for images).&lt;/p&gt;

&lt;h2 id='html'&gt;HTML&lt;/h2&gt;
&lt;pre&gt;&lt;code data-language='html'&gt;
&lt;div class='fluidMedia'&gt;
	&lt;iframe src='' frameborder='0'&gt; &lt;/iframe&gt;
&lt;/div&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id='css'&gt;CSS&lt;/h2&gt;
&lt;pre&gt;&lt;code data-language='css'&gt;
.fluidMedia {
	position: relative;
	padding-bottom: 56.25%; /* proportion value to aspect ratio 16:9 */
	padding-top: 30px;
	height: 0;
	overflow: hidden;
}

.fluidMedia iframe {
	position: absolute;
	top: 0; 
	left: 0;
	width: 100%;
	height: 100%;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example &lt;a title='fluid iframe example' href='/blog/secrets-of-lea-verou-css/'&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id='browser_support'&gt;Browser support&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;IE 7+&lt;/li&gt;

&lt;li&gt;Firefox 3.6+&lt;/li&gt;

&lt;li&gt;Chrome 6+&lt;/li&gt;

&lt;li&gt;Safari 5+&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cheers!&lt;/p&gt;</description>
				<published>Tue Mar 12 00:00:00 -0500 2013</published>
				<link>http://bymichaellancaster.com//blog/fluid-iframe-and-images-without-javascript-plugins</link>
			</item>
		
			<item>
				<title>CSS Architecture for Web Applications.</title>
				<description>&lt;p&gt;Write CSS is more complex than some developers, software engineers and designers think and If you are a &amp;#8220;Dogma&amp;#8221; &amp;#8220;best practice&amp;#8221; person this post might hurt your feelings.&lt;/p&gt;

&lt;p&gt;Bad CSS architecture can make Web applications slower (500ms slower = 20% drop in traffic for Google) &lt;br /&gt; (100ms slower = 1% drop in sales for amazon), messy and unmaintainable for the team, waste of time trying to find something to fix another thing and the list goes on.&lt;/p&gt;

&lt;p&gt;All the bad examples showed here for good or for bad I had the pleasure to work with in some project.&lt;/p&gt;

&lt;h2 id='the_bad_examples_first'&gt;The bad examples first&lt;/h2&gt;
&lt;pre&gt;&lt;code data-language='css'&gt;
#header {
	property: value;
	property: value;
}

#logo {
	property: value;
	property: value;
}

#menu {
	property: value;
	property: value;
}

#search {
	property: value;
	property: value;
}

#bt-yellow {
	property: value;
	property: value;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yeah! people still doing this approach specifying &amp;#8220;ID&amp;#8217;s&amp;#8221; for every element on the page and that kind of architecture &amp;#8220;id&amp;#8217;s&amp;#8221; has no problem for browser rendering or for Javascript developers concerned about performance or make his life easier.&lt;/p&gt;

&lt;p&gt;But as a point of view of good CSS architecture that&amp;#8217;s not DRY, reusable, modular, scalable and depending on the project this can get pretty messy and heavy. So, never do that way ok?!&lt;/p&gt;

&lt;h2 id='more_bad_examples'&gt;More bad examples&lt;/h2&gt;

&lt;p&gt;My second experience with a different way to write CSS architecture was when I worked as a consultant on a ongoing big Web Application. &lt;br /&gt; At this point the initial developers started kind of in a &amp;#8220;good&amp;#8221; way making like a mixed code between SMACSS and their own judgments. &lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code data-language='css'&gt;
ul.button-group-yellow {
	property: value;
	property: value;
}

ul.button-group-yellow li {
	property: value;
	property: value;
}

ul.button-group-yellow li div {
	property: value;
	property: value;
}

ul.button-group-yellow li div p {
	property: value;
	property: value;
}

ul.button-group-yellow li div p a {
	property: value;
	property: value;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I confess we had a bunch of modular groups forcing DRY methodology but look at those terrible long descendants selectors (nesting), tag-qualify and this approach is very bad for browser rendering/performance, not scalable and gets/got pretty messy after all.&lt;/p&gt;

&lt;h2 id='some_good_tips'&gt;Some good tips&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;All members has to work together but this is not a job for Designers, Software engineers. This is a job Front End Engineers.&lt;/li&gt;

&lt;li&gt;CSS is code therefore size and rendering matters.&lt;/li&gt;

&lt;li&gt;Avoid specificity &amp;#8220;ID&amp;#8217;s&amp;#8221;.&lt;/li&gt;

&lt;li&gt;Avoid long descendants selectors (nesting).&lt;/li&gt;

&lt;li&gt;Avoid tag-qualify.&lt;/li&gt;

&lt;li&gt;Browsers render your CSS going right to left.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code data-language='css'&gt;
#header div ul li p a {
	/* the browser render/algorithm go through all your elements starting at &quot;a&quot; element to find the matches */
	property: value;
	property: value;
}

#header a {
	/* better than the first example */
	/* but still not good enough */
	property: value;
	property: value;
}

header#header {
	/* yet not good. tag-qualify is very very hard to happen to actually use them */
	property: value;
	property: value;
}

#header {
	/* good for performance but not good for modular, DRY, scalable */
	property: value;
	property: value;
}

/* if you need to qualify your selector use quasi tag-qualify methodology */
/* header */ .header {
	/* always prefer/use classes they are fast, reusable, scalable, modular, easy to maintain */
	property: value;
	property: value;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Use DRY (don&amp;#8217;t repeat yourself methodology), modular groups, scalable, readable and maintainable.&lt;/li&gt;

&lt;li&gt;Make it well documented (readable for humans not machines).&lt;/li&gt;

&lt;li&gt;Use CSS preprocessors (It doesn&amp;#8217;t mean you are going to have a good CSS architecture).&lt;/li&gt;

&lt;li&gt;More developers = more problems so write a Doc &amp;amp; Stylesheets guide for your team.&lt;/li&gt;

&lt;li&gt;Comments are KING. They wont be there afterwards because you will minify so use wisely.&lt;/li&gt;

&lt;li&gt;Find the patterns in your design and apply OOCSS method (works great for me).&lt;/li&gt;

&lt;li&gt;Rule sets in specific order (example how I do it below).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code data-language='css'&gt;
/* ==========================================================================
#   SCSS/COMPASS Modular Project Based.
# 	@settings ( COMPASS, Variables, Functions, Mixins, etc... )
# 	@base ( regular elements )
# 	@helpers ( layout helpers )
# 	@layout ( layout template, grid structure )
# 	@skin ( modules, background, colors, typography.. )
# 	@media-queries ( content-driven breakpoints )
# 	@ie ( IE fixes )
========================================================================== */


/* ==========================================================================
@settings
========================================================================== */
@import &quot;_settings&quot;;

/* ==========================================================================
@base
========================================================================== */
@import &quot;_base&quot;;

/* ==========================================================================
@helpers
========================================================================== */
@import &quot;_helpers&quot;;

/* ==========================================================================
@layout
========================================================================== */
@import &quot;_layout&quot;;

/* ==========================================================================
@skin
========================================================================== */
@import &quot;_skin&quot;;

/* ==========================================================================
@media-queries
========================================================================== */
@import &quot;_media-queries&quot;;

/* ==========================================================================
@ie
========================================================================== */
@import &quot;_ie&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id='another_great_tips_from_bem_methodology'&gt;Another great tips. From BEM methodology&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Fast-to-develop, long-lived projects. It should be possible to develop and launch the first version of a website quickly with an architecture that helps to maintain it in the long run.&lt;/li&gt;

&lt;li&gt;Team scalability. Adding new people to a product team should improve speed, not decrease it. We need to be able to assign new members to a team without a steep learning curve.&lt;/li&gt;

&lt;li&gt;Code should be well-structured for a project to remain maintainable over time and team changes.&lt;/li&gt;

&lt;li&gt;Code reuse. To maintain UI consistency and minimize development effort on typical interface components, those components have to be easily reusable. The source code should not have contextual dependency on the other code, it should be easy to move that code to another place.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='our_fashionable_way'&gt;Our fashionable way&lt;/h2&gt;

&lt;p&gt;I always had concern about my classes notation name, how should I name semantically meaningful? how should I show this on the HTML? How I will better transfer/show by notation name my HTML structure?.. &lt;br /&gt; &lt;strong&gt;One of the most important ideas of classes notation name is try to transfer/show the HTML structure reading the classes names on the CSS file&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Example, Let&amp;#8217;s say we have one module.&lt;/p&gt;
&lt;pre&gt;&lt;code data-language='css'&gt;
.promo-box {
	property: value;
}
.promo-box-inner {
	property: value;
}
.promo-box-img {
	property: value;
}
.promo-box-tit {
	property: value;
}
.promo-box-txt {
	property: value;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I even don&amp;#8217;t need to show you the HTML markup to make you understand the HTML structure, can you see the possibilities here?!&lt;/p&gt;

&lt;h2 id='im_changing_to'&gt;I&amp;#8217;m changing to..&lt;/h2&gt;

&lt;p&gt;One week before I write this post I saw the speak of &lt;a target='_blank' title='' href='http://nicolasgallagher.com/'&gt;Nicolas Gallagher&lt;/a&gt; about &amp;#8220;Questioning good practices&amp;#8221; (I highly recommend) in his speak he also showed a &lt;a target='_blank' title='Russian Search engine' href='http://www.yandex.com/'&gt;Russian Search engine&lt;/a&gt; classes notation name and It&amp;#8217;s true my notation is fashionable at the moment.&lt;/p&gt;

&lt;p&gt;All made sense. So now on I will use this non-fashionable YET classes notation name but answering the same questions I told you before.&lt;br /&gt; what are you talking about Michael? Here&amp;#8217;s a new example of that module above.&lt;/p&gt;
&lt;pre&gt;&lt;code data-language='css'&gt;
.promoBox {
	property: value;
}
.promoBox-inner {
	property: value;
}
.promoBox-inner-img {
	property: value;
}
.promoBox-inner-tit {
	property: value;
}
.promoBox-inner-txt {
	property: value;
}

.promoBox--round {
	property: value;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we have our module &amp;#8220;promoBox&amp;#8221;, the &amp;#8220;promoBox-inner&amp;#8221; with one dash means it is a child of &amp;#8220;promoBox&amp;#8221;, the &amp;#8220;promoBox-inner-img&amp;#8221; means it is child of &amp;#8220;promoBox-inner&amp;#8221; that it is child of &amp;#8220;promoBox&amp;#8221; and so on. &lt;br /&gt; Lastly we have &amp;#8220;promoBox&amp;#8211;round&amp;#8221; with two dashes that means extended/modifier. Beautiful right?!&lt;/p&gt;

&lt;h2 id='final_thoughts'&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;There&amp;#8217;s no absolute way to write, give classes name notation or build &amp;#8220;The god master CSS architecture&amp;#8221; but there&amp;#8217;s definitely great practices to make a great Web application and it all depends on your team and the focus on your Web application goals.&lt;/p&gt;</description>
				<published>Fri Mar 08 00:00:00 -0600 2013</published>
				<link>http://bymichaellancaster.com//blog/css-architecture-for-web-applications</link>
			</item>
		
			<item>
				<title>Secrets of Lea Verou about CSS.</title>
				<description>&lt;p&gt;I&amp;#8217;m not sure when it was but in the end of 2011 or beginning of 2012 I saw &lt;a target='_blank' title='Lea Verou' href='http://lea.verou.me/'&gt;Lea Verou&lt;/a&gt; talking about &amp;#8220;CSS3 Secrets: 10 things you might not know about CSS3&amp;#8221; and it was great see how many great techniques we can use to achieve our &lt;br /&gt; client - side goals.&lt;/p&gt;

&lt;h2 id='10_things_you_might_not_know_about_css3'&gt;10 things you might not know about CSS3&lt;/h2&gt;
&lt;div class='fluidMedia'&gt;
	&lt;iframe src='https://www.youtube.com/embed/54wJkqG8jXE' allowfullscreen='allowfullscreen' frameborder='0'&gt; &lt;/iframe&gt;
&lt;/div&gt;&lt;br /&gt;
&lt;p&gt;And this year (2013) she had another great speak at W3Conf in San Francisco about &amp;#8220;More CSS Secrets: Another 10 things you may not know about CSS&amp;#8221;&lt;/p&gt;

&lt;h2 id='more_css_secrets_another_10_things_you_may_not_know_about_css'&gt;More CSS Secrets: Another 10 things you may not know about CSS&lt;/h2&gt;
&lt;div class='fluidMedia'&gt;
	&lt;iframe src='https://www.youtube.com/embed/3ikye7Qc7Ak' allowfullscreen='allowfullscreen' frameborder='0'&gt; &lt;/iframe&gt;
&lt;/div&gt;&lt;br /&gt;
&lt;p&gt;As you can see she is a Client - Side hacker specifically in CSS and always bringing new ideas and techniques to solve common problems we used to solve with complex javascript code and hacks.&lt;/p&gt;</description>
				<published>Sun Mar 03 00:00:00 -0600 2013</published>
				<link>http://bymichaellancaster.com//blog/secrets-of-lea-verou-css</link>
			</item>
		
			<item>
				<title>Inspirational Art and Code by Joshua Davis.</title>
				<description>&lt;p&gt;A friend of mine shared this great talk by Joshua Davis at W3Conf in San Francisco. &lt;br /&gt; Joshua&amp;#8217;s work is very inspirational and he can do very cool things using processing.js to generate forms.&lt;/p&gt;

&lt;p&gt;Don&amp;#8217;t forget to check out his website &lt;a target='_blank' title='Joshua Davis' href='http://www.joshuadavis.com/'&gt;Joshua Davis&lt;/a&gt;&lt;/p&gt;
&lt;div class='fluidMedia'&gt;
	&lt;iframe src='https://www.youtube.com/embed/LJS4fBjdPM4' allowfullscreen='allowfullscreen' frameborder='0'&gt; &lt;/iframe&gt;
&lt;/div&gt;</description>
				<published>Thu Feb 28 00:00:00 -0600 2013</published>
				<link>http://bymichaellancaster.com//blog/inspirational-art-and-code-by-joshua-davis</link>
			</item>
		
			<item>
				<title>The filter bubble and your social life online.</title>
				<description>&lt;p&gt;At the same time Internet give us liberty to think and see different points about our world in culture, politics, nature, life in general the internet is made by &amp;#8220;man&amp;#8221; and we have our own perspective of the world. Therefore we are doing the same exactly mistakes we are doing offline it&amp;#8217;s just another digital space 1 and 0&amp;#8217;s.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s sort of funny sometimes how we push things turning every person the &amp;#8220;product of the environment&amp;#8221; even on digital.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ll never deny that technology in particular internet changed the world for better but I still think we could do much better when we start to change our mindset as a &amp;#8220;person&amp;#8221; for the community.&lt;/p&gt;

&lt;p&gt;Watching this great video we can see that people don&amp;#8217;t loose their old habits to live in their &amp;#8220;boxes&amp;#8221; and continue to create their &amp;#8220;Extended Mind&amp;#8221;&lt;/p&gt;

&lt;h2 id='are_we_going_backwards'&gt;Are we going backwards?!&lt;/h2&gt;
&lt;div class='fluidMedia'&gt;
	&lt;iframe src='https://www.youtube.com/embed/B8ofWFx525s' allowfullscreen='allowfullscreen' frameborder='0'&gt; &lt;/iframe&gt;
&lt;/div&gt;
&lt;h2 id='i_also_suggest'&gt;I also suggest..&lt;/h2&gt;

&lt;p&gt;you to watch this incredible documentary called &lt;a target='_blanc' title='internet rising' href='http://internetrising.net/'&gt;&quot;Internet Rising&quot;&lt;/a&gt; investigating the evolving relationships between the Internet and collective consciousness of humanity. It provokes many questions about ancient and modern paradoxes of life. You definitely should check it out.&lt;/p&gt;
&lt;div class='fluidMedia'&gt;
	&lt;iframe src='https://www.youtube.com/embed/pMh8oBdKkK4' allowfullscreen='allowfullscreen' frameborder='0'&gt; &lt;/iframe&gt;
&lt;/div&gt;&lt;br /&gt;
&lt;p&gt;Both videos are great to inspired us to think about almost everything surround us in the digital life.&lt;/p&gt;</description>
				<published>Wed Feb 27 00:00:00 -0600 2013</published>
				<link>http://bymichaellancaster.com//blog/the-filter-bubble-and-your-social-life-online</link>
			</item>
		
			<item>
				<title>Let's talk about rem units.</title>
				<description>&lt;h2 id='the_pastpresent'&gt;The past/present&lt;/h2&gt;

&lt;p&gt;I could talk a lot about all the principal units we have been using but let&amp;#8217;s get this straight we have been using &amp;#8220;px&amp;#8221; since ever and this approach just doesn&amp;#8217;t work anymore or scale.&lt;/p&gt;
&lt;pre&gt;&lt;code data-language='css'&gt;
.parent {
	font-size: 16px;
}

.child {
	font-size: 12px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now with the popularity and acceptance of the Responsive Design (web applications accessible in any devices) developers and designers are thinking more about scale things and make it fit to their user&amp;#8217;s device. Style sheets that use relative units can more easily scale from one device environment to another. Therefore we started to scale the font-size transforming pixel in em&amp;#8217;s using this math child / parent = em&amp;#8217;s voila!!&lt;/p&gt;
&lt;pre&gt;&lt;code data-language='css'&gt;
.parent {
	font-size: 16px;
}

.child {
	font-size: 0.75em; /* 12 / 16 = 0.75 */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oh! wait. Do we have to repeat this math going through element parent by element parent to give their child the right em&amp;#8217;s values? It&amp;#8217;s hard to believe but yes we do.&lt;/p&gt;

&lt;p&gt;Now when your wife, girlfriend, dog (whatever) asked you why you are loosing hair and getting bald that&amp;#8217;s your answer &amp;#8220;I use px to calculate em&amp;#8217;s Baby!&amp;#8221;&lt;/p&gt;

&lt;h2 id='the_presentfuture'&gt;The present/future&lt;/h2&gt;

&lt;p&gt;But now (a while ago) the &lt;a target='_blank' title='W3C spec' href='http://www.w3.org/TR/css3-values/#font-relative-lengths'&gt;W3C spec&lt;/a&gt; added to CSS3 the rem unit that is relative to the document parent (root em).&lt;/p&gt;
&lt;pre&gt;&lt;code data-language='css'&gt;
html {
	font-size: 62.5%;
}

parent {
	font-size: 1.6rem; /* 16px */
}

child {
	font-size: 1.2rem; /* 12px */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No need to go through all your parent doing that math to change their child and the browser support makes us even happier developers &lt;a target='_blank' title='Can I use rem units?' href='http://caniuse.com/rem'&gt;caniuse.com/rem&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='browser_support'&gt;Browser support&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;IE 9+&lt;/li&gt;

&lt;li&gt;Firefox 3.6+&lt;/li&gt;

&lt;li&gt;Chrome 6+&lt;/li&gt;

&lt;li&gt;Safari 5+&lt;/li&gt;

&lt;li&gt;Opera 11.6+&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='old_browser_support'&gt;Old browser support&lt;/h2&gt;
&lt;pre&gt;&lt;code data-language='css'&gt;
html {
	font-size: 62.5%;
}

parent {
	font-size: 16px;
	font-size: 1.6rem; /* 16px */
}

child {
	font-size: 12px;
	font-size: 1.2rem; /* 12px */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;#8217;s go now change all our style sheets and make it good for all users and developers!!&lt;/p&gt;</description>
				<published>Tue Feb 26 00:00:00 -0600 2013</published>
				<link>http://bymichaellancaster.com//blog/lets-talk-about-rem-units</link>
			</item>
		
			<item>
				<title>Two years ago everything started.</title>
				<description>&lt;p&gt;While I cook my pasta I write this post so I&amp;#8217;ll be short.&lt;/p&gt;

&lt;p&gt;For my first job I did a test and got my first paid job as a Front End Developer Jr It was hard because we had so many projects and things to do that I wasn&amp;#8217;t used to (Mostly developers used to get there around 9:30 am and leave around 9:30 pm) I used to get home at 1:00 am so I had time to eat fast, shower and get some rest to another day. I had my senior developer supporting and protecting me like a father and I could learn a lot from him not just technical stuff but how to act in certain situations.&lt;/p&gt;

&lt;p&gt;After 5 months of my hard core work and a lot of growth this same senior developer indicated me to another company DBR.ag to work as a consultant for some months in a big ongoing project at Chamber of Electric Energy Commercialization in Brazil. Was I and another two developers working hard to delivery the system on time but at that time was more independent and I could be outstanding helping and making improvements to the client side of the system. After 4 months working in-site at CCEE we delivered the system and DBR.ag hired me. At the Agency I started to think in process to help our work flow so I suggested and showed why we we should use Control Version(in that case SVN). I also developed a simple HTML5 markup framework as a good practice to all developers follow and it was very fun. After some months HP called us to come back to CCEE and help the JSP developers with client side mostly with JS/jQuery.&lt;/p&gt;

&lt;p&gt;The rest you can guess reading the about me page so let&amp;#8217;s talk about some other topics now.&lt;/p&gt;

&lt;h2 id='outdated_developers'&gt;Outdated Developers&lt;/h2&gt;

&lt;p&gt;I had great senior developers, but all of them had something in common they were kind of outdated about the new stuff and things we could use maybe because of the hard work flow, family, laziness whatever I just know one of the things that makes difference in a great professional to a good one is his ability to make things better not just getting it done but making it better so I put in my head always look for make it better and stay update to new things that could help improve my job.&lt;/p&gt;

&lt;h2 id='how_im_doing_it'&gt;How I&amp;#8217;m doing it&lt;/h2&gt;

&lt;p&gt;I&amp;#8217;m always evaluating myself and looking new ways to improve myself in being a better professional. Lately (around 6 months) I discovered the best way &amp;#8220;for me&amp;#8221; to learn better is read as much as I can about something new that I want to learn before actually try it so I will have like an 360 point of view, a better understanding of it.&lt;/p&gt;

&lt;h2 id='something_that_i_try_follow_to_keep_me_productive'&gt;Something that I try follow to keep me productive.&lt;/h2&gt;
&lt;p class='ui-txt-01'&gt;
	&lt;ul&gt;
		&lt;li&gt;Know the shortcuts of your tools and use them wisely.&lt;/li&gt;
		&lt;li&gt;Choose some sort of &quot;Robot mode playlist&quot; where the songs works just as a background.&lt;/li&gt;
		&lt;li&gt;Keep focus wake up and think about your tasks for the day that you have to get done.&lt;/li&gt;
		&lt;li&gt;First do it, then do it right, then do it better&lt;/li&gt;
		&lt;li&gt;Follow the most active and productive guys in your field, stay updated, read, talk, discuss about it when is possible.&lt;/li&gt;
		&lt;li&gt;Make experiments. Don't have time? make time experiments are very important to expand your view outside of the &quot;work box&quot;&lt;/li&gt;
	&lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;and this work is what keep me awake at night learning new things when everybody else is sleeping.&lt;/p&gt;</description>
				<published>Mon Feb 25 00:00:00 -0600 2013</published>
				<link>http://bymichaellancaster.com//blog/two-years-ago-everything-started</link>
			</item>
		
			<item>
				<title>What technologies I'm using to blog?!</title>
				<description>&lt;p&gt;I needed a new look and as I said in my last (first) post I love to learn and experiment new things and at the same time I&amp;#8217;m not very fan of Wordpress as a developer point of view either. &lt;br /&gt; I agree it is a good CMS/Blog Tool that helps us delivery great products in short time for clients therefore it&amp;#8217;s good for business but Wordpress &amp;#8220;themes&amp;#8221; has a bunch of ugly, messy code and sometimes happens to be infected by other plugins/scripts causing headaches or even worst.&lt;/p&gt;

&lt;h2 id='long_story_short'&gt;Long story short&lt;/h2&gt;
&lt;p&gt;
I started looking for something more elegant that I could use git to deploy
So I tried Github Pages and Jekyll a &quot;blog-aware, static site generator in Ruby&quot; that uses Liquid template to process the templates.
But I would do experiments with Node.js and Ruby someday so I choose &lt;a target='_blank' title='Heroku' href='http://www.heroku.com'&gt;Heroku&lt;/a&gt; (cloud application platform for build, deploy, and run cloud apps using Ruby, Node.js, Clojure, Java, Python and Scala).
&lt;/p&gt;
&lt;p&gt;I Can run and test locally, pretty simple. &lt;pre&gt;&lt;code data-language='ruby'&gt;
foreman start
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;And After see my changes I want to deploy directly to my cloud.&lt;/p&gt;
&lt;pre&gt;&lt;code data-language='ruby'&gt;
git add .
git commit -m &quot;my message&quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Done! Beautiful! Everything up and running.&lt;/p&gt;

&lt;h3 id='in_the_backend'&gt;In the Back-End&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Heroku Server (AWESOME cloud application platform).&lt;/li&gt;

&lt;li&gt;Ruby (Jekyll, liquid template).&lt;/li&gt;

&lt;li&gt;Git to deploy to my Heroku Cloud.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='in_the_frontend'&gt;In the Front-End&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;HTML5 (Markup).&lt;/li&gt;

&lt;li&gt;CSS3 (SASS/COMPASS) Modular Development Based.&lt;/li&gt;

&lt;li&gt;Responsive Design.&lt;/li&gt;

&lt;li&gt;JS (jQuery).&lt;/li&gt;

&lt;li&gt;Markdown (Blogging).&lt;/li&gt;

&lt;li&gt;Disqus (comments).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I may do a better explanation how it works further on but for now I need some posts.&lt;/p&gt;</description>
				<published>Wed Jan 30 00:00:00 -0600 2013</published>
				<link>http://bymichaellancaster.com//blog/what-technologies-im-using-to-blog</link>
			</item>
		
	</channel>
</rss>
