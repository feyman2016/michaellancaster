<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
	<channel>
		<title>Michael Lancaster</title>
		<description>Front End Developer/Web Engineer</description>
		<link>http://bymichaellancaster.com/</link>
		
			<item>
				<title>Web and Automotive. WTF?!</title>
				<description>&lt;h2&gt;it&#39;s all about mobility&lt;/h2&gt;

&lt;p&gt;I have been very curious about developing any kind of software for cars.. but of course I would be much more interested in develop using Open Web Technologies perhaps HTML5/CSS3 and Javascript how AWESOME that would be?&lt;/p&gt;

&lt;p&gt;Anyway. while trying to find any sort of material on something I can feed my mind about it I found some very interesting stuff and gathered all in one post.&lt;/p&gt;

&lt;p&gt;So for those that don&#39;t know there&#39;s actually a W3C group to bring and to accelerate the adoption of Web technologies in the automotive industry.
The group will focus on defining a Vehicle Data API that will create new opportunities for automotive services via the Web.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some of the advantages of Web Applications&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Web technologies are well known and &amp;quot;well supported&amp;quot; by devices therefore would make the adoption &amp;quot;easier&amp;quot;.
and since Web technologies are based on open standards, developers are not held hostage by particular vendors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Challenges to adopt Web Technology in the Car&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Driver distraction the biggest one.. but can be solved by HMI (Human-Machine Interface) not displaying/allowing the driver interact with the UI while certain activities e.g car in movement.&lt;/p&gt;

&lt;p&gt;Cost. Web Technologies has a very good Connectivity stack (Bluetooth, Wi-Fi or Cellular), TCP/IP Stack, Embedded Browser and to bring all this will increase software and hardware cost.&lt;/p&gt;

&lt;h2&gt;Tesla and Vehicle Management System&lt;/h2&gt;

&lt;p&gt;Tesla and the Vehicle Management System..you ask me why?! First of all I am a Elon Musk &amp;quot;superfan&amp;quot; not just because of his incredible desire to change the world but also because I&#39;m curious to know how they do to have such a incredible product/car.&lt;/p&gt;

&lt;div class=&quot;fluidImg&quot;&gt;
    &lt;img src=&quot;/assets/images/post-images/teslaVMS.png&quot; alt=&quot;Tesla Roadsters Vehicle Management System&quot;&gt;
&lt;/div&gt;

&lt;p&gt;To know more about it please read &lt;a href=&quot;http://www.teslamotors.com/roadster/technology/firmware&quot; target=&quot;_blank&quot; title=&quot;Tesla Roadsters Vehicle Management System&quot;&gt;A Silicon Valley approach to vehicle software&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Model S 17-Inch Touchscreen Display&lt;/h2&gt;

&lt;p&gt;As they say &amp;quot;the world&#39;s most advanced vehicle user interface&amp;quot; and I wont say no.&lt;/p&gt;

&lt;div class=&quot;fluidMedia&quot;&gt;
    &lt;iframe src=&quot;//player.vimeo.com/video/61821553?title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt; &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Imagine the possibilities through the UX/UI using Open Web technologies.. It wont just take us to point A to point B anymore.&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;
        &lt;small&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/small&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;small&gt;&lt;a href=&quot;http://www.prnewswire.com/news-releases/genivi-alliance-teams-with-w3c-to-accelerate-adoption-of-web-technologies-in-the-automotive-industry-209315251.html&quot; target=&quot;_blank&quot; title=&quot;w3c and automotive&quot;&gt;http://www.prnewswire.com/news-releases/genivi-alliance-teams-with-w3c-to-accelerate-adoption-of-web-technologies-in-the-automotive-industry-209315251.html&lt;/a&gt;&lt;/small&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;small&gt;&lt;a href=&quot;http://www.w3.org/wiki/Web_and_Automotive&quot; target=&quot;_blank&quot; title=&quot;w3c and automotive&quot;&gt;http://www.w3.org/wiki/Web_and_Automotive&lt;/a&gt;&lt;/small&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;small&gt;&lt;a href=&quot;http://www.w3.org/2013/02/autobg.html.en&quot; target=&quot;_blank&quot; title=&quot;w3c and automotive&quot;&gt;http://www.w3.org/2013/02/autobg.html.en&lt;/a&gt;&lt;/small&gt;
    &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
				<published>2014-02-26 00:00:00 -0600</published>
				<link>http://bymichaellancaster.com//blog/web-and-automotive-w3c-group</link>
			</item>
		
			<item>
				<title>DOM insert HTML method you might not know</title>
				<description>&lt;p&gt;Everybody knows/use &amp;quot;innerHTML&amp;quot; to insert HTML but I was looking at the MDN website jumping between Web
API&#39;s when I saw this DOM method called insertAdjacentHTML..it&#39;s &amp;quot;innerHTML&amp;quot; brothers but cooler and
&lt;strong&gt;faster&lt;/strong&gt;.
&lt;br&gt;
Besides the performance another difference is that &amp;quot;innerHTML&amp;quot; will overwrite the content inside the element when
&amp;quot;insertAdjacentHTML&amp;quot; will add to the specified position.&lt;/p&gt;

&lt;p&gt;Here you can compare the performance between &amp;quot;innerHTML&amp;quot; and &amp;quot;insertAdjacentHTML&amp;quot; &lt;a href=&quot;http://jsperf
.com/insertadjacenthtml-perf/3&quot; target=&quot;_blank&quot; title=&quot;innerHTML vs insertAdjacentHTMl&quot;&gt;here&lt;/a&gt; and gets better
its &lt;strong&gt;supported in all browsers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It&#39;s been out there for a while now even John Resig has an &lt;a href=&quot;http://ejohn.org/blog/dom-insertadjacenthtml/&quot;
target=&quot;_blank&quot; title=&quot;insertAdjacentHTML post John Resig&quot;&gt;post&lt;/a&gt; about it back in 2008.&lt;/p&gt;

&lt;p&gt;It&#39;s very simple to use you are going to need to pass one of the positions (below) and then pass the content.&lt;/p&gt;

&lt;h4&gt;Position&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&amp;quot;beforebegin&amp;quot; (insert before the element)&lt;/li&gt;
&lt;li&gt;&amp;quot;afterend&amp;quot; (insert after the element)&lt;/li&gt;
&lt;li&gt;&amp;quot;afterbegin&amp;quot; (insert inside element after begin)&lt;/li&gt;
&lt;li&gt;&amp;quot;beforeend&amp;quot; (insert inside element before end)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
element.insertAdjacentHTML(&quot;position&quot;, &quot;content&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&#39;s say we have a method that do the job for us when we pass the &amp;quot;position&amp;quot; and &amp;quot;content&amp;quot;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
(function(window) {
    window.App = window.App || {};

    window.App = {
        insertElement: function(position, content) {
            var elDiv = document.getElementById(&#39;wrapper&#39;);
                elDiv.insertAdjacentHTML(position, content)
        }
    }
})(window);

var content1 = &#39;&lt;p id=&quot;ct1&quot;&gt;this is a paragrag a &quot;beforebegin&quot; element&lt;/p&gt;&#39;;
var content2 = &#39;&lt;p id=&quot;ct2&quot;&gt;this is a paragrag a &quot;afterbegin&quot; element&lt;/p&gt;&#39;;
var content3 = &#39;&lt;p id=&quot;ct3&quot;&gt;this is a paragrag a &quot;beforeend&quot; element&lt;/p&gt;&#39;;
var content4 = &#39;&lt;p id=&quot;ct4&quot;&gt;this is a paragrag a &quot;afterend&quot; element&lt;/p&gt;&#39;;

App.insertElement(&#39;beforebegin&#39;, content1);
App.insertElement(&#39;afterbegin&#39;, content2);
App.insertElement(&#39;beforeend&#39;, content3);
App.insertElement(&#39;afterend&#39;, content4);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&#39;s a example how it works &lt;a href=&quot;http://jsfiddle.net/ftZyn/2/&quot; target=&quot;_blank&quot; title=&quot;how insertAdjacentHTMl works&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy the tip.&lt;/p&gt;
</description>
				<published>2014-01-08 00:00:00 -0600</published>
				<link>http://bymichaellancaster.com//blog/DOM-insert-html-method-you-might-not-know-about</link>
			</item>
		
			<item>
				<title>Why I like GulpJS more than GruntJS</title>
				<description>&lt;p&gt;2013 was the year of GruntJS (I have a post about it) but beginning of 2014 a new cool kid on the block show up&lt;/p&gt;

&lt;p&gt;This post is just an FYI instead of a tutorial and for those that don&#39;t know GruntJS please take a look here &lt;a href=&quot;http://www.bymichaellancaster.com/blog/introduction-to-task-runner-gruntjs/&quot; target=&quot;_blank&quot; title=&quot;GruntJS&quot;&gt;GruntJS post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When I saw GulpJS at first I said just another task runner.. but then I read the code to see how it works and I got very excited. Why?
First because uses Streams (Streams is an very important part of NodeJS) which makes faster than GruntJS.. second because if you have been writing NodeJs applications you can notice that GruntJS isn&#39;t very let&#39;s say &amp;quot;pretty&amp;quot; (but works great) but on the other hand GulpJS is like write an NodeJS application making very very easy to &amp;quot;install&amp;quot; and use. I loved.&lt;/p&gt;

&lt;p&gt;Here&#39;s how a GruntJS file looks like &lt;a href=&quot;https://github.com/weblancaster/blog-examples/blob/master/GruntJS-app&quot; target=&quot;_blank&quot; title=&quot;GruntJS&quot;&gt;GruntJS code example&lt;/a&gt; and here how &lt;a href=&quot;https://github.com/weblancaster/blog-examples/tree/master/gulpjs-example&quot; target=&quot;_blank&quot; title=&quot;GulpJS&quot;&gt;GulpJS code example &lt;/a&gt; looks like&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://gulpjs.com&quot; target=&quot;_blank&quot; title=&quot;GulpJS website&quot;&gt; GulpJS website &lt;/a&gt; for more information.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
// Require modules
var gulp = require(&#39;gulp&#39;)
    , uglify = require(&#39;gulp-uglify&#39;)
    , minifyHTML = require(&#39;gulp-minify-html&#39;)
    , sass = require(&#39;gulp-sass&#39;);

// Here&#39;s the tasks
gulp.task(&#39;build&#39;, function(){
    var dist = &#39;dist/&#39;
        , dirPublic = &#39;public/&#39;
        , distStylesheets = dist + dirPublic + &#39;stylesheets/&#39;
        , distJavascripts = dist + dirPublic + &#39;javascripts/&#39;;

    gulp.src(&#39;public/stylesheets/scss/*.scss&#39;)
        .pipe(sass())
        .pipe(gulp.dest(distStylesheets));

    gulp.src(&#39;*.html&#39;)
        .pipe(minifyHTML())
        .pipe(gulp.dest(dist))

    gulp.src(&#39;public/javascripts/*.js&#39;)
        .pipe(uglify())
        .pipe(gulp.dest(distJavascripts))
});

// Gulp watch for file changes
gulp.task(&#39;default&#39;, function() {
    gulp.watch([
        &#39;public/stylesheets/scss/**&#39;,
        &#39;public/javascripts/*.js&#39;,
        &#39;*.html&#39;,
        &#39;!dist/**&#39;
    ], function(event) {
        gulp.run(&#39;build&#39;);
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
				<published>2014-01-06 00:00:00 -0600</published>
				<link>http://bymichaellancaster.com//blog/why-i-like-gulpjs-more-than-gruntjs</link>
			</item>
		
			<item>
				<title>PS4 Alerts using BBY API</title>
				<description>&lt;p&gt;Long story short.. I didn&#39;t want to check Best Buy every day to see if PS4 is available..
So I built this Web Application &lt;a href=&quot;http://ps4alerts.herokuapp.com/&quot; target=&quot;_blank&quot; title=&quot;Be notified when PlayStation 4 is available at Bes Buy&quot;&gt;PS4 Alerts!&lt;/a&gt; to check every one (1) minute Best Buy Data and if find any PS4 available in store or online will send me an email notification with a direct link to the product.&lt;/p&gt;

&lt;p&gt;I also added one feature as subscription so more people can be notified as well.&lt;/p&gt;

&lt;h3&gt;Specs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Node.js/Express.js (Backend/Server)&lt;/li&gt;
&lt;li&gt;Socket.io (Real time communication with the client)&lt;/li&gt;
&lt;li&gt;Handlebars.js (as backend template view)&lt;/li&gt;
&lt;li&gt;NeDB (Database)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bbyopen.com/&quot; target=&quot;_blank&quot; title=&quot;Best Buy open API&quot;&gt;BBYOpen API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Be advised I built it in two nights..Enjoy!&lt;/p&gt;
</description>
				<published>2013-12-12 00:00:00 -0600</published>
				<link>http://bymichaellancaster.com//blog/playstation4-alert-using-best-buy-api-nodejs-socketio-nedb</link>
			</item>
		
			<item>
				<title>Experience Chicago through Instagram</title>
				<description>&lt;p&gt;Since the amount (just a few) of people sharing pictures on Instagram with Lollapalooza hashtag isn&#39;t the same as when the event was happening I decided to create &lt;a href=&quot;http://chicagogram.us&quot; target=&quot;&quot;_blank title=&quot;Chicagogram.us - Experience Chicago through Instagram&quot;&gt;Chicagogram.us&lt;/a&gt; with the hashtag #chicago #chicagogram therefore lots of people sharing different pictures of Chicago and selfies of course.&lt;/p&gt;

&lt;p&gt;I&#39;m using the same code (I did some code refactor) and changed/removed some stuff from the layout as a developer standpoint.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
				<published>2013-12-10 00:00:00 -0600</published>
				<link>http://bymichaellancaster.com//blog/chicago-through-instagram-chicagogram-us</link>
			</item>
		
			<item>
				<title>CSS Bad and Good practices</title>
				<description>&lt;p&gt;Today I&#39;m sharing my presentation/slide about CSS bad and good practices and some really good tips. Hopefully this contribution to the community will help developers and designers make better products..FYI this can hurt your feeling.&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;ac560a10247001311e28167841e016d4&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Feedback is always welcome.&lt;/p&gt;
</description>
				<published>2013-11-01 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/css-bad-and-good-practices-good-tips</link>
			</item>
		
			<item>
				<title>We are influenced by people</title>
				<description>&lt;p&gt;It&#39;s about questioning what surround us to try understand things. The pragmatic programmer is a book that I&#39;m looking forward to read after finish Javascript Web Applications..but for now this is what I would like to share related to the topic of this book.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;quot;You’re a Pragmatic Programmer. You aren’t wedded to any particular technology, but you have a broad enough background in the science, and your experience with practical projects allows you to choose good solutions in particular situations. Theory and practice combine to make you strong. You adjust your approach to suit the current circumstances and environment. And you do this continuously as the work progresses. Pragmatic Programmers get the job done, and do it well.&amp;quot;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;fluidMedia&quot;&gt;
    &lt;iframe src=&quot;//www.youtube.com/embed/vPj4zxhy8wI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt; &lt;/iframe&gt;
&lt;/div&gt;
</description>
				<published>2013-10-15 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/we-are-influenced-by-people</link>
			</item>
		
			<item>
				<title>My Micro-Library called Jet.js</title>
				<description>&lt;p&gt;My love for Javascript just get bigger and also my knowledge but that&#39;s not what I&#39;m going to blog about today.. at this time I&#39;m going to post about the Micro-Library I created Jet.js&lt;/p&gt;

&lt;h2&gt;Jet.js&lt;/h2&gt;

&lt;p&gt;One of the senior developers at my former company was having some performance issues on a particular Web Application..
After see the code at my perspective one of the problems were all the plugins (was more than 15) being download on the entire Application.&lt;/p&gt;

&lt;p&gt;I decided create a very lightweight library (called modular-script-loader) to solve that problem downloading scripts asynchronously (non-block) and on demand (not for all the pages).&lt;/p&gt;

&lt;p&gt;So last night I decided re-write entirely using better Design pattern and cleaner code I also gave a better name &amp;quot;Jet.js&amp;quot;.&lt;/p&gt;

&lt;h3&gt;Code&lt;/h3&gt;

&lt;p&gt;Check out on Github &lt;a href=&quot;http://www.github.com/weblancaster/jet&quot; target=&quot;&quot;_blank title=&quot;Jet js&quot;&gt;Jet.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My goal here is to make the Web Application faster therefore &lt;strong&gt; download scripts asynchronously (non-block), better organized script dependency and very very lightweight&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Below is the code to make the &amp;quot;magic&amp;quot; happen..just a few lines of code.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
/*!
 * Jet.js (Micro-library)
 * Version: 0.3
 * http://git.io/LwFXlg
 * Released under the MIT license
 *
 * Author&#39;s name: Michael Lancaster
 * website: www.bymichaellancaster.com
 * Twitter: @weblancaster
 * Date: 24-09-2013
 */
;(function(window, undefined) {

    window.Jet = window.Jet || {};

    Jet.App = (function() {
        // PRIVATE

        /**
         * Responsible to inject widgets/scripts
         * on the page
         * @method inject
         */
         function inject(url, callback) {
            var script = document.createElement(&quot;script&quot;);
            script.type = &quot;text/javascript&quot;;

            if (script.readyState){  //IE
                script.onreadystatechange = function(){
                    if ( script.readyState == &quot;loaded&quot; || script.readyState == &quot;complete&quot; ) {
                        script.onreadystatechange = null;
                        if ( callback !== undefined ) {
                            callback();
                        }
                    }
                };
            } else {  //Others
                script.onload = function(){
                    if ( callback !== undefined ) {
                        callback();
                    }
                };
            }

            script.src = url;
            document.getElementsByTagName(&#39;body&#39;)[0].appendChild(script);
        }

        // PUBLIC
        return {
            /**
             * Responsible to store all widgets
             * as an array
             * @property WIDGETS_COLLECTION
             */
            WIDGETS_COLLECTION: null,

            /**
             * Responsible to get widgets
             * and transform in array
             * and assign to the property
             * @method widgets
             */
            widgets: function() {
                var widgets = document.body.getAttribute(&#39;data-ui-widget&#39;),
                    widgetsArr = widgets.split(&#39; &#39;);

                this.WIDGETS_COLLECTION = widgetsArr;
            },

            /**
             * Responsible for receive arguments and initialize widget
             * @method init
             */
            init: function(name, url, callback) {
                this.widgets();

                if ( arguments.length &lt; 2 ) {
                    return false
                }

                var widget = name,
                    widgetCollection = this.WIDGETS_COLLECTION,
                    widgetCollectionLength = widgetCollection.length,
                    i = 0;

                for ( ; i &lt; widgetCollectionLength; i++ ) {
                    if ( widgetCollection[i].indexOf(widget) === 0 ) {
                        inject(url, callback);
                    }
                }
            }
        }

    });

})(window);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;how to use&lt;/h3&gt;

&lt;p&gt;Define what are the widgets you want to use on that page (on body element).&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;html&quot;&gt;
&lt; body data-ui-widget=&quot;widget-jquery widget-cycle&quot; &gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;include Jet.js on your page&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;html&quot;&gt;
&lt;script src=&quot;js/jet.min.js&quot;&gt;&lt;/script&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I would suggest you create a JS file which has all your widgets been called.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
// Cycle
var dependency1 = new Jet.App;
    dependency1.init(&#39;widget-cycle&#39;, &#39;http://malsup.github.io/jquery.cycle.all.js&#39;, function() {
        console.log(&#39;cycle loaded&#39;);
        $(&#39;#outdoor-context-content&#39;).cycle({
            fx: &#39;fade&#39;
        });
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Done!&lt;/p&gt;

&lt;h3&gt;Example of use&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Relatively small to medium Web Applications&lt;/li&gt;
&lt;li&gt;Wordpress, Drupal, CMS&#39;s Web Applications in general&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;(Intended) browser support&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Google Chrome&lt;/li&gt;
&lt;li&gt;Mozilla Firefox 3+&lt;/li&gt;
&lt;li&gt;Apple Safari 4+&lt;/li&gt;
&lt;li&gt;Opera 10+&lt;/li&gt;
&lt;li&gt;Internet Explorer 7+&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you found any bug or want to contribute or want to give me any opinion feel free to do that.&lt;/p&gt;
</description>
				<published>2013-09-24 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/javascript-script-dependency-loader-on-demand</link>
			</item>
		
			<item>
				<title>Deploying Node.js server on Heroku Cloud</title>
				<description>&lt;p&gt;[post under improvements]&lt;/p&gt;

&lt;p&gt;As a developer I have been always curious to learn and try new technologies that can improve my skill and help me build better Web Applications..So today I&#39;m going to try help you set up a simple Node.js server on Heroku Cloud using my small open source project aims deploy even faster Node.js applications.&lt;/p&gt;

&lt;h2&gt;Why Heroku&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.heroku.com&quot; target=&quot;&quot;_blank title=&quot;&quot;&gt;Heroku&lt;/a&gt; is a cloud application platform where you can build and deploy web apps
with the technologies you know as Java, Ruby, Closure, Node.js, Python and Scala..Heroku uses integration with Git so you can deploy your Application
simply pushing to master. Oh and It&#39;s FREE!&lt;/p&gt;

&lt;p&gt;I have four web apps hosted on heroku but two are for public access this blog/portfolio running on Ruby and Lollagram running on Node.js.&lt;/p&gt;

&lt;h2&gt;Why Node.js&lt;/h2&gt;

&lt;p&gt;It&#39;s Javascript...on the Server!&lt;/p&gt;

&lt;iframe src=&quot;http://giphy.com/embed/13k1e8OMVO2a3K&quot; frameBorder=&quot;0&quot; allowFullScreen=&quot;allowFullScreen&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;No, But seriously. Javascript is well known by us Front End Developers/Engineers and even designers. &lt;br&gt;
That&#39;s already one good reason but the main &amp;quot;real&amp;quot; reasons are Node.js is all about making event-driven (Ajax can be done on the server side), low-latency, non-blocking I/O...perfect for real time. &lt;br&gt;
Node.js makes a much smaller footprint on your web server It allocates web server resources on an as-needed basis, not pre-allocating a large chunk of resources for each user. For example, Apache might assign 8MB to a user, while Node assigns 8KB.&lt;/p&gt;

&lt;h2&gt;Heroku set up&lt;/h2&gt;

&lt;p&gt;I&#39;m going to assume you have account on Heroku (it&#39;s free) and the &lt;a href=&quot;https://toolbelt.heroku.com/&quot; title=&quot;toolbelt kit&quot; target=&quot;_blank&quot;&gt;toolbelt kit&lt;/a&gt; installed and you also have &lt;a href=&quot;http://Nodejs.org/&quot; title=&quot;Node.js&quot; target=&quot;_blank&quot;&gt;Node.js&lt;/a&gt; installed.&lt;/p&gt;

&lt;h2&gt;Let&#39;s get it start&lt;/h2&gt;

&lt;p&gt;First of all (after everything installed) create a new folder (whatever-name-you-want) then open your terminal go to your folder and type..&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
git init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
git commit -m &quot;first commit&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you have git initialized..time to create a Heroku app. &lt;br&gt;
First thing you need to login to Heroku (remember that we are doing everything from the command line on terminal)&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
heroku login
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
heroku create name-of-your-app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Done! You just need to push your code.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can access your Web App url on www.your-app-name.heroku.com&lt;/p&gt;

&lt;p&gt;Oh wait! What is this?&lt;/p&gt;

&lt;div class=&quot;fluidImg&quot;&gt;
&lt;img src=&quot;/assets/images/post-images/heroku-404.png&quot; alt=&quot;Heroku 404&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;To make your Web App run on Heroku you need to run your Web App in one of those languages I said right on the beginning of this post.&lt;/p&gt;

&lt;p&gt;Today we are going to run and deploy a simple Node.js/Express.js Application..since I have been using Heroku and Node.js for all my personal/aside projects I created a Express.js boilerplate to run and deploy fast and easy with &lt;a href=&quot;/blog/introduction-to-task-runner-gruntjs/&quot; target=&quot;_blank&quot; title=&quot;introduction to Grunt.js&quot;&gt;Grunt.js&lt;/a&gt; included so you can watch for changes on your files to minify CSS and uglify JS. I also included static assets and NO Jade (jade is native on Express.js) so you can code your normal HTML instead of Jade.&lt;/p&gt;

&lt;p&gt;Go to my Github repository &lt;a href=&quot;https://github.com/weblancaster/expressjs-static-boilerplate&quot; target=&quot;_blank&quot; title=&quot;Express.js static boilerplate&quot;&gt;Express.js static boilerplate&lt;/a&gt; and download the zip file then extract and copy everything has inside of &amp;quot;expressjs-static-boilerplate&amp;quot; folder to your Web App folder.&lt;/p&gt;

&lt;h2&gt;Running Node.js&lt;/h2&gt;

&lt;p&gt;After download my boilerplate let&#39;s install the dependencies and run our Node.js server&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
sudo npm install -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enter your password.
You should see something like the image below.. notice that not every log is showed on the image..&lt;/p&gt;

&lt;div class=&quot;fluidImg&quot;&gt;
&lt;img src=&quot;/assets/images/post-images/success-image.png&quot; alt=&quot;success image&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;All Node dependencies are installed and now you can start run your server.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
node server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or to not need to quit the server &amp;quot;control + c&amp;quot; every time you do any change I also added a monitor to the boilerplate so every time you do your changes and save the monitor you automatically re-run the server.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
nodemon server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Running Grunt.js&lt;/h2&gt;

&lt;p&gt;After install all the Node.js dependencies you can start run your tasks to minify CSS and uglify JS. &lt;br&gt;
Open a new tab on your terminal and run the command.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
grunt build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the message you should get.&lt;/p&gt;

&lt;div class=&quot;fluidImg&quot;&gt;
&lt;img src=&quot;/assets/images/post-images/grunt-build.png&quot; alt=&quot;grunt build&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;But still not quite good enough because we would need to build every time we did any change.
So let&#39;s start to watch for changes on the files.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
grunt watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now every time you do any change and save the file grunt you build automatically.&lt;/p&gt;

&lt;div class=&quot;fluidImg&quot;&gt;
&lt;img src=&quot;/assets/images/post-images/grunt-watch.png&quot; alt=&quot;grunt watch&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Ok. That&#39;s pretty cool right?!.&lt;/p&gt;

&lt;h2&gt;Deploying and Running on Heroku&lt;/h2&gt;

&lt;p&gt;Now let&#39;s push to Heroku and see if it works.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
git commit -m &quot;added express boilerplate&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and this is what happened..&lt;/p&gt;

&lt;div class=&quot;fluidImg&quot;&gt;
&lt;img src=&quot;/assets/images/post-images/no-support.png&quot; alt=&quot;no support&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;If you read the message you will see &amp;quot;Push rejected, no Cedar-supported app detected&amp;quot; so let&#39;s add support to make this baby work..
Every Web App on Heroku needs a file to tell Heroku what are we deploying..&lt;/p&gt;

&lt;p&gt;In this case we need a &amp;quot;Procfile&amp;quot;. So create a new file named &amp;quot;Procfile&amp;quot; and type &amp;quot;web: node server.js&amp;quot; save inside your app folder. &lt;br&gt;&lt;/p&gt;

&lt;p&gt;Then you need to activate your server and tell Heroku to run 1 &amp;quot;Cedar&amp;quot; (one cedar is free hosting).&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
heroku ps:scale web=1
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;fluidImg&quot;&gt;
&lt;img src=&quot;/assets/images/post-images/cedar.png&quot; alt=&quot;no support&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Repeat the push process.. after do the push process again &amp;quot;git add .&amp;quot; &amp;quot;git commit&amp;quot; and &amp;quot;git push origin master&amp;quot; a bunch of message will log and the final logs would be like this image below.. now you can access your Web App URL in my case is &lt;a href=&quot;http://deployed-nodejs-app.herokuapp.com/&quot; title=&quot;my how to deploy node.js to Heroku post&quot; target=&quot;_blank&quot;&gt;deployed-nodejs-app&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;fluidImg&quot;&gt;
&lt;img src=&quot;/assets/images/post-images/pushed.png&quot; alt=&quot;Web app deployed&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;And this is how we deploy Node.js to Heroku.. fast and easy.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
				<published>2013-09-19 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/deploying-nodejs-on-heroku-cloud</link>
			</item>
		
			<item>
				<title>How I built Lollagram with Instagram real time API</title>
				<description>&lt;p&gt;[post under improvements]&lt;/p&gt;

&lt;h2&gt;What is Lollagram?&lt;/h2&gt;

&lt;p&gt;[from the Application] &lt;a href=&quot;http://www.lollagram.com&quot; target=&quot;_blank&quot; title=&quot;Lollagram - real time lollapalooza&quot;&gt;Lollagram&lt;/a&gt;  is a labor of love that’s designed to help you keep track of the Lollapalooza experience, through the eyes (or, more accurately, snapshots) of music lovers on the ground at Grant Park. Lollagram takes advantage of the Instagram Real Time API and aggregates the moments at Lollapalooza, creating a visual record of the bands, food, people, and city that make up this great musical tradition. With 45 million photos being uploaded to Instagram each day, we&#39;re excited to present snapshots from Lollapalooza 2013.&lt;/p&gt;

&lt;h2&gt;The new version&lt;/h2&gt;

&lt;p&gt;Check out the source code on &lt;a href=&quot;https://github.com/weblancaster/instagram-real-time&quot; target=&quot;_blank&quot; title=&quot;github Lollagram - real time lollagram cosuming Instagram real time API&quot;&gt;Lollagram source code.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The old version of Lollagram was a simple website built in PHP where you needed to click on the refresh button to pull the latest pictures shared on Instagram with the hashtags #lollapalooza #lollapalooza2012 or #lolla2012&lt;/p&gt;

&lt;p&gt;While I was working for Golinharris I was also working on my side projects/experiments using NodeJS so I think two weeks before the event I started to talk with my co-worker and designer Daniel Branca that I was thinking to use cutting edge technologies to do a real time Application therefore much more engaging.&lt;/p&gt;

&lt;p&gt;I was also about to leave the company to another company and I had one more week at Golinharris but I really wanted to work on it for fun and learning to use technologies like NodeJs, Socket.io, Client Side template (HandlebarsJs) and responsive web design where the user can follow on their smartphone, tablet, desktop or even on TV (and Yes I did for &amp;quot;free&amp;quot;).&lt;/p&gt;

&lt;p&gt;I never had work with real time Application so I started to read and do some experiments with Socket.io coding a real time chat (as most developers do).
After understand the basic concept of Socket.io &amp;quot;Real Time&amp;quot; and discuss all the most important details of the Application with Dan (the designer) I started code the Application.&lt;/p&gt;

&lt;p&gt;As I said before at that time I was leaving the company to work for another company and I was also preparing my slides/speak for the biggest conference in Brazil for Front End Developers/Engineers which I was invited to speak (topic for another post) and it would be in the same day I had to release the Application.&lt;/p&gt;

&lt;p&gt;So in one week I had to start at the new company understand the new workflow, finish Lollagram Application and finish my slides/speak for the conference in Brazil.&lt;/p&gt;

&lt;h2&gt;The Application&lt;/h2&gt;

&lt;p&gt;I&#39;m not going to describe in a lot of details it will be more a overview how I did it.&lt;/p&gt;

&lt;p&gt;After understand how the Instagram real time API work I started to code the Back-end utilizing NodeJS (&lt;a href=&quot;http://expressjs.com/&quot; target=&quot;_blank&quot; title=&quot;ExpressJS Framework&quot;&gt;ExpressJS&lt;/a&gt;) and hosted on &lt;a href=&quot;http://www.heroku.com&quot; target=&quot;Heroku cloud&quot; title=&quot;Heroku cloud&quot;&gt;Heroku&lt;/a&gt; which is awesome and I could added monitoring to the server to debug and make sure everything on the server was/is running alright. &lt;br&gt;
I tried to find code examples to gain some time but I found anything good enough. Or the code were too old or was developed PHP or RoR so I ended up utilizing the library called &lt;a href=&quot;https://github.com/mckelvey/instagram-node-lib&quot; targte=&quot;_blank&quot; title=&quot;Instagram node lib&quot;&gt;instagram-node-lib&lt;/a&gt; which helped me a lot and I gained some time.&lt;/p&gt;

&lt;p&gt;After register my Application on Instagram and get my &amp;quot;client id&amp;quot; and &amp;quot;client secret&amp;quot; the most important things I needed to get it working was the steps below.&lt;/p&gt;

&lt;p&gt;Remember I&#39;m using the &lt;a href=&quot;https://github.com/mckelvey/instagram-node-lib&quot; targte=&quot;_blank&quot; title=&quot;Instagram node lib&quot;&gt;instagram-node-lib&lt;/a&gt; so we don&#39;t need to do from scratch since time is/was very precious and we don&#39;t want to reinvent the wheel.&lt;/p&gt;

&lt;h3&gt;Basic setup&lt;/h3&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
Instagram.set(&#39;client_id&#39;, clientID);
Instagram.set(&#39;client_secret&#39;, clientSecret);
Instagram.set(&#39;callback_url&#39;, &#39;http://YOUR_URL.COM/callback&#39;);
Instagram.set(&#39;redirect_uri&#39;, &#39;http://YOUR_URL.com&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;The Handshake&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;http://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot; target=&quot;&quot; title=&quot;Handshake&quot;&gt;Handshake&lt;/a&gt; is the confirmation connection between the servers.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
app.get(&#39;/callback&#39;, function(req, res){
    var handshake =  Instagram.subscriptions.handshake(req, res);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;First load&lt;/h3&gt;

&lt;p&gt;When you access the Application for the first time you can noticed thirteen pictures are loaded.
Here I request the latest shared pictures on Instagram with hashtag #lollapalooza and utilizing Socket.io I transmit it to the client side as json.&lt;/p&gt;

&lt;p&gt;Server sends the data to the client side.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
io.sockets.on(&#39;connection&#39;, function (socket) {
  Instagram.tags.recent({ 
      name: &#39;lollapalooza&#39;,
      complete: function(data) {
        socket.emit(&#39;firstShow&#39;, { firstShow: data });
      }
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On my method &amp;quot;mostRecent&amp;quot; the Socket.io on the client receives the data and parse/process using client side templating (HandlebarsJs) and append to the Application showing the latest pictures shared on Instagram.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
mostRecent: function() {
    socket.on(&#39;firstShow&#39;, function (data) {
        var
            query = data,
            source = $(&#39;#firstShow-tpl&#39;).html(),
            compiledTemplate = Handlebars.compile(source),
            result = compiledTemplate(query),
            imgWrap = $(&#39;#imgContent&#39;);

        imgWrap.html(result);
    });
},
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Subscribing to hashtags&lt;/h3&gt;

&lt;p&gt;To receive the last updates from Instagram as real time first I needed to subscribe to the hashtags.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
Instagram.subscriptions.subscribe({
  object: &#39;tag&#39;,
  object_id: &#39;lollapalooza&#39;,
  aspect: &#39;media&#39;,
  callback_url: &#39;http://YOUR_URL.com/callback&#39;,
  type: &#39;subscription&#39;,
  id: &#39;#&#39;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Real time &amp;quot;time&amp;quot;&lt;/h3&gt;

&lt;p&gt;After subscribe to the hashtags I started to receive &amp;quot;notifications&amp;quot; from Instagram when someone shared pictures with the hashtags subscribed which is pretty cool specially when lots of people share and makes even more engaging.&lt;/p&gt;

&lt;p&gt;One thing that I noticed is that Instagram real time API is unstable and if you go to the google groups where developers post problems and discuss solutions you can see there&#39;s a lot to get better.
Another thing is that you can receive 5000 &amp;quot;notifications&amp;quot; per hour and if you pass the limit the Instagram block your Application.&lt;/p&gt;

&lt;p&gt;Here I send the url to the client side to make the Ajax request but theres another way to do it which is access the json response from Instagram &amp;quot;notification&amp;quot; on the server and get the last image to send to the client.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
app.post(&#39;/callback&#39;, function(req, res) {
    var data = req.body;

    data.forEach(function(tag) {
      var url = &#39;https://api.instagram.com/v1/tags/&#39; + tag.object_id + &#39;/media/recent?client_id=479edbf0004c42758987cf0244afd3ef&#39;;
      sendMessage(url);

    });
    res.end();
});

function sendMessage(url) {
  io.sockets.emit(&#39;show&#39;, { show: url });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the client side I receive the data &amp;quot;url&amp;quot; and do Ajax request then I call my method to render the client side template.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
getData: function() {
    var self = this;
    socket.on(&#39;show&#39;, function(data) {
        var url = data.show;
        $.ajax({
            url: url,
            type: &#39;POST&#39;,
            crossDomain: true,
            dataType: &#39;jsonp&#39;
        }).done(function (data) {
            self.renderTemplate(data);
        }); 
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;How to unsubscribe&lt;/h3&gt;

&lt;p&gt;To unsubscribe is easy it just need the tag &amp;quot;ID&amp;quot; and done.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
Instagram.subscriptions.unsubscribe({ id: &#39;#######&#39; });
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Final thoughts&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Work with Real Time is pretty cool and fun.&lt;/li&gt;
&lt;li&gt;Instagram real time API isn&#39;t great but does the job.&lt;/li&gt;
&lt;li&gt;Work in three different important things in one week is possible with one pack with ten monster energetic drink and less than four hours of sleep per night.&lt;/li&gt;
&lt;li&gt;People love to share pictures. People love to see pictures.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out the source code on &lt;a href=&quot;https://github.com/weblancaster/instagram-real-time&quot; target=&quot;_blank&quot; title=&quot;github Lollagram - real time lollagram cosuming Instagram real time API&quot;&gt;Lollagram source code.&lt;/a&gt;&lt;/p&gt;
</description>
				<published>2013-09-09 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/how-i-built-lollagram-lollapalooza-instagram-real-time-api</link>
			</item>
		
	</channel>
</rss>
