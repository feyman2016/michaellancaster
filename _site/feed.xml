<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
	<channel>
		<title>Michael Lancaster</title>
		<description>Front End Developer/Web Engineer</description>
		<link>http://bymichaellancaster.com/</link>
		
			<item>
				<title>Javascript Unit Test for UI developers</title>
				<description>&lt;p&gt;Unit tests for UI developers is a underground world and today we will explore this world a bit. &lt;br&gt;
You can find the code example &lt;a href=&quot;https://github.com/weblancaster/karma-mocha-chai-sinon&quot; target=&quot;_blank&quot; title=&quot;karma-mocha-chai-sinon starter kit&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Where to start&lt;/h3&gt;

&lt;p&gt;The first question you need to answer is, why unit test my code? that will give you a better understanding of why unit tests are important and useful. &lt;br&gt;
Here a few points.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reduce bugs (new and/or existing features)&lt;/li&gt;
&lt;li&gt;Serve as documentation&lt;/li&gt;
&lt;li&gt;Improve Software Design&lt;/li&gt;
&lt;li&gt;Reduce fear (you can write code with no fear of breaking something else)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unit tests are meant to be &lt;strong&gt;small&lt;/strong&gt; but what I mean by that is, let&#39;s say you have a function called foo() that calls two other functions fooUno() and fooDos() each function has a specific logic/goal, let&#39;s also say that one of those functions inside foo() make a XHR request.. &lt;br&gt;
You don&#39;t want to make a XHR request because it&#39;s slow and the XHR might depend on something else from the system, but foo() require the data from the function that make XHR request, so what do you do? this scenario is very common for UI developers.&lt;/p&gt;

&lt;p&gt;One of the ways to achieve isolation and small unit tests is using &lt;strong&gt;Spies&lt;/strong&gt;, &lt;strong&gt;Stubs&lt;/strong&gt; and &lt;strong&gt;Mocks&lt;/strong&gt; understanding them will help you write better unit tests, I&#39;m going to talk more about it later.&lt;/p&gt;

&lt;p&gt;A good structure for unit tests is 3A&#39;s &lt;strong&gt;Arrange, Act, Assert&lt;/strong&gt; (not applicable to all scenarios), where Arrange is the set up of the object/function being tested (e.g stub a dependency), Act is when you act on the object being tested (e.g call the function) and Assert where you claim the object. (e.g assert that the function was called with xyz arguments);&lt;/p&gt;

&lt;h3&gt;What tools to use&lt;/h3&gt;

&lt;p&gt;Javascript ecosystem isn&#39;t like Java, .Net, C++ and other languages with established frameworks/tools for unit tests, in Javascript you will find a lot of frameworks/tools, the good part is that you will have multiple options that suits you the bad part is that most of them isn&#39;t well established.&lt;/p&gt;

&lt;p&gt;In this article I&#39;m going to introduce you to the most established framework/tools I know.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Karma&lt;/strong&gt; &lt;br&gt;
&lt;a href=&quot;http://karma-runner.github.io/0.13/index.html&quot; target=&quot;_blank&quot; title=&quot;Karma.js&quot;&gt;Karma&lt;/a&gt; is a test runner by Google/Angular team created to increase developer productivity helping on setting up the environment for testing, with features like tests in real browser, debugging for tests, plugins and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mocha&lt;/strong&gt; &lt;br&gt;
The website has a good explanation, &amp;quot;&lt;a href=&quot;http://mochajs.org/&quot; target=&quot;_blank&quot; title=&quot;Mocha.js&quot;&gt;Mocha&lt;/a&gt; is a JavaScript test framework running on Node.js and the browser, making asynchronous testing simple. Mocha tests run serially, allowing for flexible and accurate reporting, while mapping uncaught exceptions to the correct test cases&amp;quot;.&lt;/p&gt;

&lt;p&gt;Mocha include a series of interfaces where you can choose how to write your tests in BDD, TDD, Exports, QUnit or Require.&lt;/p&gt;

&lt;p&gt;We will be using the BDD interface which provide &lt;strong&gt;describe()&lt;/strong&gt;, &lt;strong&gt;context()&lt;/strong&gt; (same as describe, just a way to keep tests easier to read and organized), &lt;strong&gt;before()&lt;/strong&gt;, &lt;strong&gt;after()&lt;/strong&gt;, &lt;strong&gt;beforeEach()&lt;/strong&gt;, &lt;strong&gt;afterEach()&lt;/strong&gt; and &lt;strong&gt;it()&lt;/strong&gt;, this introduce a great design structure for unit tests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chai&lt;/strong&gt; &lt;br&gt;
&lt;a href=&quot;http://chaijs.com/&quot; target=&quot;_blank&quot; title=&quot;Chai.js&quot;&gt;Chai&lt;/a&gt; is a BDD/TDD assertion library which has several styles &lt;strong&gt;assert&lt;/strong&gt;, &lt;strong&gt;should&lt;/strong&gt; or &lt;strong&gt;expect&lt;/strong&gt;, this makes very flexible for the developer to express the unit test.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sinon&lt;/strong&gt; &lt;br&gt;
&lt;a href=&quot;http://sinonjs.org/&quot; target=&quot;_blank&quot; title=&quot;Sinon.js&quot;&gt;Sinon&lt;/a&gt; is the library that implements features like stubs, spies, mocks and things like fake XHR and server.&lt;/p&gt;

&lt;h3&gt;Spies, Stubs &amp;amp; Mocks&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;strong&gt;Spies&lt;/strong&gt; &lt;br&gt;
The word basically describe what the concept means, you spy on a function and then you can assert your test if the function was called, how many times was called if called, what the parameters was called with and what was returned.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
context(&#39;Spy&#39;, function() {
    it(&#39;spy on a function&#39;, function() {
        var addSpy = sinon.spy(add());

        addSpy(2, 4);

        expect(addSpy.called).to.be.true;

        addSpy.reset(); // reset spy to it&#39;s normal state
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Stubs&lt;/strong&gt; &lt;br&gt;
This concept is used to isolate a function from the rest of the App, stubs are going to take place of the component and return consistent results making easier to write tests, stubs are also spies.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
context(&#39;Stub&#39;, function() {
    it(&#39;stub function&#39;, function() {
        var result;
        var isTruthyStub = sinon.stub(isTruthy()).returns(true);
        var obj = {
            &quot;name&quot;: &quot;John Doe&quot;,
            &quot;age&quot;: 24
        };

        result = person(&#39;John Doe&#39;, 24);

        expect(result).to.be.deep.equal(obj);

        isTruthyStub.reset(); // reset spy to it&#39;s normal state
    })
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Mocks&lt;/strong&gt; &lt;br&gt;
Mocks are very similar to spies and stubs with the difference you need to define all things that need to happen before you assert and when you are done with all the actions defined you then assert everything happened as planned/defined.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
 context(&#39;Mock&#39;, function() {
    it(&#39;mock function&#39;, function() {
        var multiplyMock = sinon.mock(obj);

        multiplyMock.expects(&#39;foo&#39;).once();

        obj.foo();

        multiplyMock.verify();
    });
});
&lt;/code&gt;&lt;/pre&gt;
</description>
				<published>2015-08-02 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/client-side-javascript-unit-tests-for-front-end-developers</link>
			</item>
		
			<item>
				<title>IoT for fun and Lazyness</title>
				<description>&lt;h3&gt;Experimenting with IoT&lt;/h3&gt;

&lt;p&gt;So there was I at &lt;a href=&quot;https://2015.battlehack.org/&quot; title=&quot;Battlehack Chicago&quot; target=&quot;_blank&quot;&gt;Battlehack&lt;/a&gt; Chicago brainstorming ideas...trying to come up with something I would have fun developing and at the same time learn something new.&lt;/p&gt;

&lt;div class=&quot;fluidImg&quot;&gt;
    &lt;img src=&quot;/assets/images/post-images/battlehack-02.jpg&quot; alt=&quot;Battlehack Chicago 2015&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;After teaming up with &lt;a href=&quot;https://josephmilla.com/&quot; title=&quot;Joseph Milla&quot; target=&quot;_blank&quot;&gt;Joseph Milla&lt;/a&gt; a young and smart CS student, After discussing what we should do we decided to build something related to IoT so we ended up using my &lt;a href=&quot;https://tessel.io/&quot; title=&quot;Tessel IoT&quot; target=&quot;_blank&quot;&gt;Tessel&lt;/a&gt;micro-controller and the Tessel Ambient module.&lt;/p&gt;

&lt;p&gt;Tessel is a micro-controller with built-in wifi and support to run nodejs out-of-the-box, therefore we were good because both of us have experience with Nodejs.&lt;/p&gt;

&lt;h3&gt;Clappity&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/josephmilla/clappity&quot; title=&quot;Clappity&quot; target=&quot;_blank&quot;&gt;Clappity&lt;/a&gt; is a device that you plug into your wall and listen to your configured claps to trigger an online order, in our case you would be able to order a pizza, sandwich or burrito.&lt;/p&gt;

&lt;h3&gt;How does it that work?&lt;/h3&gt;

&lt;p&gt;Anyone could just clap and order without permission, right? no. &lt;br&gt;
The device would be linked to your user account in the website where you would have access to order options and how many claps they require through the user configuration. &lt;br&gt;
All claps have 1x clap for confirmation.. let&#39;s say you want to order pizza, you would clap 2x than wait 3 secs and clap again to confirm you actually want that.&lt;/p&gt;

&lt;p&gt;The tech stack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tessel micro-controller&lt;/li&gt;
&lt;li&gt;Tessel Ambient Module&lt;/li&gt;
&lt;li&gt;Node.js (websocket)&lt;/li&gt;
&lt;li&gt;HTML5/Javascript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We did not win the Battlehack but was a fun experimentation with IoT. &lt;br&gt;
The code is &lt;a href=&quot;https://github.com/josephmilla/clappity&quot; title=&quot;Clappity Open Source&quot; target=&quot;_blank&quot;&gt;Open Source&lt;/a&gt;.&lt;/p&gt;
</description>
				<published>2015-07-01 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/iot-javascript-battlehack-tessel</link>
			</item>
		
			<item>
				<title>Soundnode App and its 10k plus downloads</title>
				<description>&lt;p&gt;Soundnode App reached more than 10 thousand plus downloads and it&#39;s been great!&lt;/p&gt;

&lt;h3&gt;How Everything started&lt;/h3&gt;

&lt;p&gt;I started &lt;a href=&quot;http://www.soundnodeapp.com/&quot; target=&quot;_blank&quot; title=&quot;Soundnode App - the soundcloud for desktop windows and Mac&quot;&gt;Soundnode App&lt;/a&gt; with one goal in mind which was solve a personal problem, I wanted to be able to use media keyboards shortcuts. &lt;br&gt;
Although I could use &lt;a href=&quot;https://soundcloud.com&quot; target=&quot;_blank&quot; title=&quot;Soundcloud&quot;&gt;Soundcloud&lt;/a&gt; in the browser, the shortcuts are available just when I had Soundcloud as my current tab.&lt;/p&gt;

&lt;p&gt;I&#39;m big fan of trying new technologies to learn new skills, so solve this personal problem was the perfect opportunity to use &lt;a href=&quot;http://nwjs.io/&quot; target=&quot;_blank&quot; title=&quot;Nw.js&quot;&gt;NW.js&lt;/a&gt; and learn &lt;a href=&quot;https://angularjs.org/&quot; target=&quot;_blank&quot; title=&quot;Angular.js&quot;&gt;Angular.js&lt;/a&gt; more in depth. &lt;br&gt;
With that being said I also had my mind on managing a &amp;quot;big&amp;quot; project and devs (contributors) working towards the goals and it&#39;s priorities.. a bit of product design and developing from start to finish.&lt;/p&gt;

&lt;p&gt;I also wanted to open-source it to keep open for any suggestion and improvements, I&#39;m a big believer that the open-source community transform lives besides push projects to it&#39;s limits of quality, so the first version released was just for developers and if I&#39;m not mistaken less than a month later I released the official version for anyone to download the files from &lt;a href=&quot;http://www.soundnodeapp.com/&quot; target=&quot;_blank&quot; title=&quot;Soundnode App - the soundcloud for desktop windows and Mac&quot;&gt;Soundnode App&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;10 thousand plus downloads&lt;/h3&gt;

&lt;p&gt;I had no idea if people would use it or not, but today I have 10 thousand plus downloads and lots of people sending emails and twitting at me making compliments.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/weblancaster&quot;&gt;@weblancaster&lt;/a&gt; Just discovered SoundNode, and I totally love it! THank you for your work and hopefully you will continue developing :-)&lt;/p&gt;&amp;mdash; PoTTii (@xPoTTii) &lt;a href=&quot;https://twitter.com/xPoTTii/status/599359994954416128&quot;&gt;May 15, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Hurray, there is a &lt;a href=&quot;https://twitter.com/hashtag/soundcloud?src=hash&quot;&gt;#soundcloud&lt;/a&gt; mac desktop app that works! Thanks so much Sir &lt;a href=&quot;https://twitter.com/weblancaster&quot;&gt;@weblancaster&lt;/a&gt;!&amp;#10;&lt;a href=&quot;https://t.co/XZjqWMNCaU&quot;&gt;https://t.co/XZjqWMNCaU&lt;/a&gt;&lt;/p&gt;&amp;mdash; Andreas Klein (@ixisio) &lt;a href=&quot;https://twitter.com/ixisio/status/590090916876132352&quot;&gt;April 20, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;just tested the &lt;a href=&quot;https://twitter.com/hashtag/nodewebkit?src=hash&quot;&gt;#nodewebkit&lt;/a&gt; app &lt;a href=&quot;http://t.co/lM4L80oqxN&quot;&gt;http://t.co/lM4L80oqxN&lt;/a&gt; ! great work &lt;a href=&quot;https://twitter.com/weblancaster&quot;&gt;@weblancaster&lt;/a&gt;&lt;/p&gt;&amp;mdash; SG (@svengiebel) &lt;a href=&quot;https://twitter.com/svengiebel/status/488675479072018432&quot;&gt;July 14, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Why I love web? Dunno... maybe a desktop app with web technologies connected to &lt;a href=&quot;https://twitter.com/SoundCloud&quot;&gt;@SoundCloud&lt;/a&gt; ? &lt;a href=&quot;https://twitter.com/weblancaster&quot;&gt;@weblancaster&lt;/a&gt; gj there! &lt;a href=&quot;http://t.co/68k4TnRhnG&quot;&gt;pic.twitter.com/68k4TnRhnG&lt;/a&gt;&lt;/p&gt;&amp;mdash; Daniel Rocha (@kabezondan) &lt;a href=&quot;https://twitter.com/kabezondan/status/483600047418769408&quot;&gt;June 30, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;And that&#39;s a great feeling when you do something for fun and you end up solving others people problems.&lt;/p&gt;

&lt;p&gt;And there&#39;s more, I spoke in Brazil about Soundnode App at the biggest conference for front end developers in Brazil (more about it &lt;a href=&quot;/blog/speaking-at-front-in-bh-conference-2014/&quot; title=&quot;Speaking at FrontInBH&quot;&gt;Here&lt;/a&gt;), and in Chicago.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Thanks to Michael Lancaster (&lt;a href=&quot;https://twitter.com/weblancaster&quot;&gt;@weblancaster&lt;/a&gt;) who is speaking &lt;a href=&quot;https://twitter.com/ChicagoWebConf&quot;&gt;@ChicagoWebConf&lt;/a&gt; on desktop apps with NodeWebkit &lt;a href=&quot;http://t.co/lHmOaTltXD&quot;&gt;http://t.co/lHmOaTltXD&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/cwc2015?src=hash&quot;&gt;#cwc2015&lt;/a&gt;&lt;/p&gt;&amp;mdash; JC Grubbs (@thegrubbsian) &lt;a href=&quot;https://twitter.com/thegrubbsian/status/550380141550260224&quot;&gt;December 31, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Therefore, no more words, just that the journey on this project has been a great learning experience.&lt;/p&gt;

&lt;h3&gt;What now?&lt;/h3&gt;

&lt;p&gt;I want to thank you those that downloaded the project, sent feedback (negative or positive) and for those that contributed with code and hours working on fixes, improvements and new features. Thank you!&lt;/p&gt;

&lt;p&gt;Wait. Calm down.. I won&#39;t stop supporting and improving Soundnode.. I actually added two new contributors as core team to the project so the next releases can be as fast as possible, focused in the user, quality and simplicity.&lt;/p&gt;

&lt;p&gt;I&#39;m planning re-write the entire Application using &lt;a href=&quot;https://facebook.github.io/react/&quot; title=&quot;React.js&quot;&gt;React.js&lt;/a&gt; to boost the performance and maybe improve the App architecture (I&#39;m pretty happy with the current architecture though) and of course because I want to try React.js in a bigger open-source project.&lt;/p&gt;

&lt;p&gt;I want to keep this short, so thank you again and cheers.&lt;/p&gt;
</description>
				<published>2015-05-21 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/soundnode-the-soundcloud-for-desktop-and-its-10-k-plus-downloads</link>
			</item>
		
			<item>
				<title>What you should know about React.js</title>
				<description>&lt;p&gt;To start I want to say to not think about the technology and old paradigms, leave what you know about developing UI&#39;s outside. Focus on the ideas implemented in the library. &lt;br&gt;
Slides from my talk at Chicago HTML5 meetup to complement are at the end of the post.&lt;/p&gt;

&lt;h3&gt;What&#39;s React.js&lt;/h3&gt;

&lt;p&gt;React.js is a component-based library created to build &lt;strong&gt;modular&lt;/strong&gt; and &lt;strong&gt;fast&lt;/strong&gt; UIs. React manages the DOM updates applying a concept called Virtual DOM, therefore you don&#39;t need to think about DOM manipulations anymore managing all the states in your UI with jQuey. &lt;br&gt;
The React library includes a lightweight implementation of the DOM and events System with W3C Standards.&lt;/p&gt;

&lt;h3&gt;What&#39;s the Virtual DOM and how does it work?&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;Virtual DOM is just a lightweight Javascript Object as a representation of your component&lt;/strong&gt;. &lt;br&gt; 
React uses the virtual DOM (component representation) to diff whenever a change occurs to your component which it&#39;s going to compare your old/previous representation with your updated/new representation and isolate just the parts that changed compared with your previous Virtual DOM. &lt;br&gt;
When React needs to actually render the representation in the DOM it&#39;s going to iterate through the components, recursively generate a string with the markup, and put in the document. After doing that, it&#39;s going to attach the events at the top level as even delegation... so you have event delegation by default.&lt;/p&gt;

&lt;h3&gt;What&#39;s JSX?&lt;/h3&gt;

&lt;p&gt;JSX is an xml-like syntax to write html markup in your React component..which is familiar for all front end developers and adventurers. &lt;br&gt;
JSX doesn&#39;t care about your component; the only job JSX has is to compile your markup code into native Javascript and will accept custom attributes when using &lt;strong&gt;data-&lt;/strong&gt;. You also need to write attributes in javascript notation &lt;strong&gt;className&lt;/strong&gt; instead of class, &lt;strong&gt;onClick&lt;/strong&gt; and so on. &lt;br&gt;
You will need curly braces &lt;strong&gt;{}&lt;/strong&gt; to interpret your javascript inside JSX.&lt;/p&gt;

&lt;h3&gt;React&#39;s lifecycle&lt;/h3&gt;

&lt;p&gt;&lt;br&gt; &lt;strong&gt;Mounting/Unmounting&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The methods below are part of the mounting cycle...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;getInitialState() // called before component is mounted, stateful components should implement this with initial state.&lt;/li&gt;
&lt;li&gt;getDefaultProps() // called when the component is mounted, set default props to your component before any instance is intialized&lt;/li&gt;
&lt;li&gt;componentWillMount() // called before mounting occurs&lt;/li&gt;
&lt;li&gt;render()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those methods occurs every time before you see your App in the browser.&lt;/p&gt;

&lt;p&gt;And these are part of Unmounting cycle...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;componentDidMount() // at this point React has a representation of your component&lt;/li&gt;
&lt;li&gt;componentWillUnmount() // At this point the component has been added to the document&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The methods part of the updating lifecycle are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;componentWillReceiveNewProps(nextProps) // called when a component is receiving new props, you can setState here and render won&#39;t be called&lt;/li&gt;
&lt;li&gt;shouldComponentUpdate(nextProps, nextState) // return false when you know the component wont receive any update, called before render method&lt;/li&gt;
&lt;li&gt;componentWillUpdate(nextProps, nextState) // called before update occurs&lt;/li&gt;
&lt;li&gt;render()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and after DOM mutations&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;componentDidUpdate(); // called after updates occurs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Props vs State&lt;/h3&gt;

&lt;p&gt;Parent components pass data through props to their children and the children can&#39;t change the data received from the parents. &lt;br&gt;
You can think of props as options, configuration (immutable).
States are mutable where when used in your component you need a default state. Try to keep your components states for less complexity over time. &lt;br&gt;&lt;/p&gt;

&lt;p&gt;Check out the slides to have a better understanding.&lt;/p&gt;

&lt;h3&gt;Slides&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;
&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;8b2d15f2f6bb46218bbf4bf34df1f306&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
				<published>2015-05-12 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/intro-to-reactjs-or-what-you-should-know-html5-chicago-meetup</link>
			</item>
		
			<item>
				<title>Accessing folder recursively with Node.js</title>
				<description>&lt;p&gt;A very quick post on how to access folders recursively with Node.js. &lt;br&gt;
This code was taken from Grunt.js src code with a slight change made by myself.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var fs = require(&#39;fs&#39;);
var path = require(&#39;path&#39;);

// Windows?
var win32 = process.platform === &#39;win32&#39;;
// Normalize \\ paths to / paths.
function unixifyPath(filepath) {
  if (win32) {
    return filepath.replace(/\\/g, &#39;/&#39;);
  } else {
    return filepath;
  }
};

// Recurse into a directory, executing callback for each file.
function walk(rootdir, callback, subdir) {
  var abspath = subdir ? path.join(rootdir, subdir) : rootdir;
  fs.readdirSync(abspath).forEach(function(filename) {
    var filepath = path.join(abspath, filename);
    if (fs.statSync(filepath).isDirectory()) {
      walk(rootdir, callback, unixifyPath(path.join(subdir || &#39;&#39;, filename || &#39;&#39;)));
    } else {
      callback(unixifyPath(filepath), rootdir, subdir, filename);
    }
  });
};

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How to use?&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
walk(&#39;./pathTofolder&#39;, function(filepath, rootdir, subdir, filename) {
  console.log(&#39;Filepath&#39;, filepath);
});
&lt;/code&gt;&gt;&lt;/pre&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
				<published>2015-01-28 00:00:00 -0600</published>
				<link>http://bymichaellancaster.com//blog/nodejs-recursively-access-folder</link>
			</item>
		
			<item>
				<title>Ep.4 Data Structures and Algorithms with JS - Stacks</title>
				<description>&lt;div class=&quot;intro-series&quot;&gt;
    &lt;strong&gt;Be advised!&lt;/strong&gt; &lt;br&gt; 
    This post is part of the series: Data Structures and Algorithms with JS therefore before continue to read I suggest you &lt;a href=&quot;/blog/javascript-data-structure-algorithms-series-ep1/&quot; title=&quot;Data Structures and Algorithms Ep.1&quot;&gt;the introduction&lt;/a&gt; to this series of posts if you haven&#39;t read yet. thanks.
&lt;/div&gt;

&lt;p&gt;Let&#39;s talk about Pringles tube today..I meant Stack data structure another ADT used to solve problems&lt;/p&gt;

&lt;h3&gt;Stacks&lt;/h3&gt;

&lt;p&gt;Stacks in Computer Science are not very different than in real world where is just another way to organize things.. for example let&#39;s say we have an Pringles tube so all those potatoes chips are organized as stack (LIFO - Last In First Out) which you can&#39;t have the bottom potatoes chips before eating the top of the stack and for that reason Stacks are a very good data structure because you add and remove just from one end. From the top.&lt;/p&gt;

&lt;p&gt;That being said Stacks operation can be executed only from one end which is the top of the stack and the fundamental operations for Stacks are &lt;code&gt;push&lt;/code&gt; to add new element at the top of the stack, &lt;code&gt;pop&lt;/code&gt; to return and remove an element from the top of the stack.. Stacks also might have operations like &lt;code&gt;peek&lt;/code&gt; which returns the element in the top of the stack, &lt;code&gt;clear&lt;/code&gt; clean the stack removing all elements and &lt;code&gt;length&lt;/code&gt; which returns the size/length of the stack.&lt;/p&gt;

&lt;p&gt;Therefore..&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;push&lt;/code&gt; add an element at the top of the stack&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pop&lt;/code&gt; return and remove an element at the top of the stack&lt;/li&gt;
&lt;li&gt;&lt;code&gt;peek&lt;/code&gt; return element at the top of the stack&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clear&lt;/code&gt; clear the stack&lt;/li&gt;
&lt;li&gt;&lt;code&gt;length&lt;/code&gt; returns the size/length of the Stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That being said lets get our bellies full. I mean. our hands dirty (WAT).&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
/**
 * Stack constructor
 * @class Stack
 */
function Stack() {
    this.stack = [];
    this.top = 0;
}

/**
 * Add new element at the top of the stack
 * @param element
 * @method push
 */
Stack.prototype.push = function(element) {
  this.stack[this.top++] = element;
}

/**
 * Return and Remove element at the top of the stack
 * @method pop
 */
Stack.prototype.pop = function() {
  return this.stack[--this.top];
}

/**
 * Clean stack
 * @method clear
 */
Stack.prototype.clear = function() {
  this.top = 0;
  this.stack = [];
}

/**
 * Return the size of the stack
 * @method length
 */
Stack.prototype.length = function() {
  return this.top;
}

/**
 * Return top element in the stack
 * @method top
 */
Stack.prototype.peek = function() {
  return this.stack[this.top-1];
}

/**
 * This method was created to log/debug the stack
 * @debug
 */
Stack.prototype.debug = function (options) {
    var options = options || {};
        options.stack = options.stack || false;
        options.peek = options.peek || false;

    if ( options.list ) {
        console.log(&#39;list &gt;&gt;&#39;, this.stack);
    }
  
    if ( options.peek ) {
      console.log(&#39;Top &gt;&gt;&#39;, this.peek());
    }
}

var pringles = new Stack();
pringles.push(&#39;potato chips 1&#39;);
pringles.push(&#39;potato chips 2&#39;);
pringles.push(&#39;potato chips 3&#39;);
pringles.peek(); // returns potato chips 3
pringles.pop();
pringles.peek(); // returns potato chips 2
pringles.clear();
pringles.length(); // returns 0

pringles.debug({
  list: true,
  peek: true
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More examples to come on how to use Stacks but for now this was the Ep.4 about Data Structures and Algorithms - Stacks.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
				<published>2015-01-26 00:00:00 -0600</published>
				<link>http://bymichaellancaster.com//blog/javascript-data-structure-algorithms-series-ep4-stack</link>
			</item>
		
			<item>
				<title>Ep.3 Data Structures and Algorithms with JS - Lists</title>
				<description>&lt;div class=&quot;intro-series&quot;&gt;
    &lt;strong&gt;Be advised!&lt;/strong&gt; &lt;br&gt; 
    This post is part of the series: Data Structures and Algorithms with JS therefore before continue to read I suggest you &lt;a href=&quot;/blog/javascript-data-structure-algorithms-series-ep1/&quot; title=&quot;Data Structures and Algorithms Ep.1&quot;&gt;the introduction&lt;/a&gt; to this series of posts if you haven&#39;t read yet. thanks.
&lt;/div&gt;

&lt;p&gt;Let&#39;s get start and see how data structures can help us design better software solutions...today I&#39;m going to talk briefly about Lists&lt;/p&gt;

&lt;h3&gt;Lists&lt;/h3&gt;

&lt;p&gt;Answer out and loud what are lists? ... Yes that&#39;s it. We all intuitively understand what lists are but to be more clear Lists are simply a collection of items therefore a To-Do list, Grocery shop list, book list, Phone number list and so on.&lt;/p&gt;

&lt;p&gt;In computer programing Lists are under the ADT (Abstract Data Type) category and can have order/or not (each element has your position) where the element can be duplicated or there&#39;s no restrictions on different data types but usually assumed to have the same data type so lists are useful when search and sorted order &lt;strong&gt;isn&#39;t&lt;/strong&gt; in need which otherwise would perform a slow and complex data structure design.&lt;/p&gt;

&lt;p&gt;A list is said to be &lt;code&gt;empty&lt;/code&gt; when it contains no elements. The number of elements currently stored is called the &lt;code&gt;length&lt;/code&gt; of the list. The beginning of the list is called the &lt;code&gt;head&lt;/code&gt;, the end of the list is called the &lt;code&gt;tail&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The basic operations we want on a list is to increase and decrease in size adding and removing new elements..We also want to add or remove elements on any position of the list.. access the element value either to just read or change it.. Access the next or prev based on the current element.. we also want to be able to create new lists or clear one.&lt;/p&gt;

&lt;p&gt;So here&#39;s our actions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;position&lt;/code&gt; current position in the list where any action will take place&lt;/li&gt;
&lt;li&gt;&lt;code&gt;currPos&lt;/code&gt; return the position of the current element&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clear&lt;/code&gt; remove all elements of the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insertAfter&lt;/code&gt; insert an element after target specified in the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insertBefore&lt;/code&gt; insert an element before target specified in the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;append&lt;/code&gt; an element to the end of the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remove&lt;/code&gt; an element from the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;length&lt;/code&gt; number of elements in the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find&lt;/code&gt; an element in the list and return the position of the element&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contains&lt;/code&gt; an element in the list return boolean&lt;/li&gt;
&lt;li&gt;&lt;code&gt;head&lt;/code&gt; set current position to first element in the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tail&lt;/code&gt; set current position to last element in the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prev&lt;/code&gt; set the current position one step left of the current position, no change if already at beginning&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next&lt;/code&gt; set the current position one step right of the current position, no change if already at end&lt;/li&gt;
&lt;li&gt;&lt;code&gt;moveTo&lt;/code&gt; move current position to specified position&lt;/li&gt;
&lt;li&gt;&lt;code&gt;to String&lt;/code&gt; return string representation of the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getElement&lt;/code&gt; return element of the current position in the list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That being said lets get our hands dirty.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
/**
 * List constructor
 * @class List
 */
function List() {
    this.list = [];
    this.position = 0;
    this.listSize = 0;
}

/**
 * Return current position in the list
 * @return {[number]} list current position
 * @method currPos
 */
List.prototype.currPos = function () {
    return this.position;
};

/**
 * Insert element after specified target element in the list
 * @method insertAfter
 */
List.prototype.insertAfter = function (after, element) {
    var target = this.find(after);
    if ( target &gt; -1 ) {
        this.list.splice(target + 1, 0, element);
        ++this.listSize;
        return true;
    }
};

/**
 * Insert element before specified target element in the list
 * @method insertBefore
 */
List.prototype.insertBefore = function (before, element) {
    var target = this.find(before);
    if ( target &gt; 0 ) {
        this.list.splice(target, 0, element);
        ++this.listSize;
        return true;
    }
};

/**
 * Remove specified element in the list
 * @param  element [specified element in the list to be removed]
 * @method remove
 */
List.prototype.remove = function (element) {
    var target = this.find(element);
    if ( target &gt; -1 ) {
        this.list.splice(target, 1);
        --this.listSize;
        return true;
    }
};

/**
 * Add element at the next available position
 * which is equal to the listSize
 * also increment the listSize by 1 when
 * adding a new element
 * @method append
 */
List.prototype.append = function (element) {
    this.list[this.listSize++] = element;
};

/**
 * Responsible to return the number of
 * books in the list
 * @return {[number]} [number of books in the list]
 * @method 
 */
List.prototype.length = function () {
    return this.listSize;
};

/**
 * Responsible to check if book list is empty
 * @return {Boolean}
 * @method isEmpty
 */
List.prototype.isEmpty = function () {
    if ( this.listSize &lt; 1 ) {
        return true;
    } else {
        return false;
    }
};

/**
 * Clear all elements in the list
 * @method clear
 */
List.prototype.clear = function () {
    this.list.length = this.position = 0;
};

/**
 * Move current position to the front/first in the list
 * @method head
 */
List.prototype.head = function () {
    this.position = 0;
};

/**
 * Move current position to the end in the list
 * @method tail
 */
List.prototype.tail = function () {
    this.position = this.listSize;
};

/**
 * Set current position on step left/back in the list
 * if not at the first element
 * @method prev
 */
List.prototype.prev = function () {
    if ( this.position !== 0 ) {
        --this.position;
    }
};

/**
 * Set current position on step right in the list
 * if not at the end/tail element
 * @method next
 */
List.prototype.next = function () {
    if ( this.position !== (this.listSize - 1) ) {
        ++this.position;
    }
};

/**
 * Return string representation of the list
 * @return {[string]} list as string
 * @method toString
 */
List.prototype.toString = function () {
    return this.list.toString();
};

/**
 * Find element and return it&#39;s position
 * @param  {[type]} element [element to be search]
 * @return {[number]} element position
 * @method find
 */
List.prototype.find = function (element) {
    for ( var i = 0; i &lt; this.list.length; ++i ) {
        if ( this.list[i] == element ) {
            return i;
        }
    }

    return -1;
};

/**
 * Find an element in the list
 * and returns true if exist or false if not
 * @param  element [element to be added in the list]
 * @return {[boolean]}
 * @method contains
 */
List.prototype.contains = function (element) {
    for ( var i = 0; i &lt; this.list.length; ++i ) {
        if ( this.list[i] == element ) {
            return true;
        }
    }

    return false;
};

/**
 * Move current to specified position
 * @param  {[number]} position
 * @return {[type]}          [description]
 */
List.prototype.moveTo = function (position) {
    if ( position &gt;= 0 || position &lt;= (this.listSize - 1) ) {
        this.position = position;
    }
};

/**
 * Return current element in list
 * @method getElement
 */
List.prototype.getElement = function () {
    return this.list[this.position];
}

/**
 * This method was created to log/debug the list
 * @debug
 */
List.prototype.debug = function (options) {
    var options = options || {};
        options.list = options.list || false;
        options.position = options.position || false;
        options.toString = options.toString || false;
        options.getElement = options.getElement || false;
        options.listSize = options.listSize || false;
        options.contains = options.contains || false;
        options.isEmpty = options.isEmpty || false;

    if ( options.list ) {
        console.log(&#39;list &gt;&gt;&#39;, this.list);
    }
    if ( options.position ) {
        console.log(&#39;position &gt;&gt;&#39;, this.currPos() );
    }
    if ( options.toString ) {
        console.log(&#39;string &gt;&gt;&#39;, this.toString() );
    }
    if ( options.getElement ) {
        console.log(&#39;Current element &gt;&gt;&#39;, this.getElement() );
    }
    if ( options.listSize ) {
        console.log(&#39;List size &gt;&gt;&#39;, this.listSize );
    }
    if ( options.contains ) {
        console.log(&#39;Contains element &gt;&gt;&#39;, this.contains(options.contains) );
    }
    if ( options.isEmpty ) {
        console.log(&#39;is empty &gt;&gt;&#39;, this.isEmpty() );
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the code example above show all methods and properties our list need to have and I also added a method call &lt;code&gt;debug&lt;/code&gt; so we can do some simple debug/log.&lt;/p&gt;

&lt;p&gt;Let&#39;s create a list of movies and at the end lets use our simple test method&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
/**
* Movie list
*/
var movies = new List();

// add action
movies.append(&#39;Matrix&#39;);
movies.append(&#39;Inception&#39;);
movies.append(&#39;The Wolf of Wall Street&#39;);
movies.append(&#39;Batman&#39;);
movies.append(&#39;G.I Joe&#39;);
movies.append(&#39;Interstellar&#39;);

// move action
movies.tail();
movies.prev();
movies.moveTo(4);
movies.head();

// delete action
movies.remove(&#39;G.I Joe&#39;);

// add at specified position
movies.insertAfter(&#39;Matrix&#39;, &#39;G.I Joe&#39;);
movies.insertBefore(&#39;G.I Joe&#39;, &#39;The theory of everything&#39;);

// Debug list
movies.debug({
    list: true,
    position: true,
    toString: true,
    getElement: true,
    listSize: true,
    contains: &#39;Batman&#39;,
    isEmpty: true
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this is was the Ep.3 about Data Structures and Algorithms - Lists.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
				<published>2015-01-11 00:00:00 -0600</published>
				<link>http://bymichaellancaster.com//blog/javascript-data-structure-algorithms-series-ep3-lists</link>
			</item>
		
			<item>
				<title>Murphy's law for programmers</title>
				<description>&lt;p&gt;Murphy&#39;s law in the life of a programmer useful for every Friday 5pm EOD.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1. Any given program, when running, is obsolete. &lt;/li&gt;
&lt;li&gt;2. Any given program costs more and takes longer. &lt;/li&gt;
&lt;li&gt;3. If any program is useful, it will have to be changed. &lt;/li&gt;
&lt;li&gt;4. If a program is useless, it will have to be documented. &lt;/li&gt;
&lt;li&gt;5. Any given program will expand to fill all available memory. &lt;/li&gt;
&lt;li&gt;6. The value of a program is proportional to the weight of its output. &lt;/li&gt;
&lt;li&gt;7. Program complexity always grows until it exceeds the capability of the programmer who must maintain it. &lt;/li&gt;
&lt;li&gt;8. If a test installation functions perfectly, all subsequent systems will malfunction. &lt;/li&gt;
&lt;li&gt;9. Job control cards that positively cannot be arranged in improper order will be.&lt;/li&gt;
&lt;li&gt;10. If the input editor has been designed to reject all bad input, an ingenious idiot will discover a method to get bad data past it.&lt;/li&gt;
&lt;li&gt;11. Profanity is the one language all programmers know best.&lt;/li&gt;
&lt;li&gt;12. Adding manpower to a late software project makes it later.&lt;/li&gt;
&lt;li&gt;13. A carelessly planned project takes three times longer to complete than expected; a carefully planned project takes only twice as long.&lt;/li&gt;
&lt;li&gt;14. (Lubarsky&#39;s Law of Cybernetic Entomology) There is always one more bug.&lt;/li&gt;
&lt;li&gt;15. It is impossible to make any program foolproof because fools are so ingenious.&lt;/li&gt;
&lt;li&gt;16. When things are going well, something will go wrong.&lt;/li&gt;
&lt;li&gt;17. When things just can&#39;t get any worse, they will.&lt;/li&gt;
&lt;li&gt;18. Anytime things appear to be going well, you have overlooked something.&lt;/li&gt;
&lt;li&gt;19. Test functions and their tests should be reproducible -- they should all fail in the same way.&lt;/li&gt;
&lt;li&gt;20. If it looks easy, it&#39;s tough.&lt;/li&gt;
&lt;li&gt;21. If it looks tough, it&#39;s damn near impossible.&lt;/li&gt;
&lt;li&gt;22. You always find any bug in the last place you look.&lt;/li&gt;
&lt;li&gt;23. Anything can be made to work if you fiddle with it long enough.&lt;/li&gt;
&lt;li&gt;24. A terminal usually works better if you plug it in. &lt;/li&gt;
&lt;li&gt;25. If all else fails, read the documentation.&lt;/li&gt;
&lt;li&gt;26. If you do not understand a particular word in a piece of technical writing, ignore it. The piece will make perfect sense without it.&lt;/li&gt;
&lt;li&gt;27. No matter how much you do, you&#39;ll never do enough.&lt;/li&gt;
&lt;li&gt;28. What you don&#39;t do is always more important than what you do.&lt;/li&gt;
&lt;li&gt;29. Procrastination avoids boredom; one never has the feeling that there is nothing important to do.&lt;/li&gt;
&lt;li&gt;30. Always leave room to add an explanation if it doesn&#39;t work out.&lt;/li&gt;
&lt;li&gt;31. No amount of genius can overcome a preoccupation with detail.&lt;/li&gt;
&lt;li&gt;32. Nothing is impossible for a man who doesn&#39;t have to do it himself.&lt;/li&gt;
&lt;li&gt;33. If builders built buildings the way programmers write programs, then the first woodpecker than came along would destroy civilization.&lt;/li&gt;
&lt;li&gt;34. Programmers will act rational when all other possibilities have been exhausted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;* From &lt;a href=&quot;http://www.murphys-laws.com/murphy/murphy-computer.html&quot; title=&quot;Murphy&#39;s law for programmers&quot; target=&quot;_blank&quot;&gt;Murphy&#39;s law site&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;
</description>
				<published>2014-11-21 00:00:00 -0600</published>
				<link>http://bymichaellancaster.com//blog/murphys-law-for-programming-programmers</link>
			</item>
		
			<item>
				<title>Migrating Jekyll to Ghost</title>
				<description>&lt;p&gt;When I decided to migrate my blog platform Jekyll to Ghost blog platform I did not find any simple/useful way to export/import my posts besides this &lt;a href=&quot;https://github.com/mattvh/Jekyll-to-Ghost&quot; title=&quot;Jekyll to Ghost Ruby script&quot; target=&quot;_blank&quot;&gt;old Ruby script&lt;/a&gt; which did not work for me.. So I decided to solve this problem creating a nice npm module called &lt;a href=&quot;https://github.com/weblancaster/nodejs-jekyll-to-ghost&quot; title=&quot;Nodejs-Jekyll-to-Ghost&quot; target=&quot;_blank&quot;&gt;Nodejs-Jekyll-to-Ghost&lt;/a&gt; which do the heavy work for those that want to migrate to ghost from Jekyll.&lt;/p&gt;

&lt;p&gt;This npm module will help you to export your Markdown posts from &lt;a href=&quot;http://jekyllrb.com&quot; title=&quot;Jekyll static blog platform&quot; target=&quot;_blank&quot;&gt;Jekyll&lt;/a&gt; to a format that can be easily imported into &lt;a href=&quot;http://ghost.org&quot; title=&quot;Ghost blog platform&quot; target=&quot;_blank&quot;&gt;Ghost blog platform&lt;/a&gt;. &lt;br&gt; 
It doesn&#39;t handle static pages, and it doesn&#39;t do anything with images. You&#39;ll have to copy those over yourself and manually adjust any URL differences.&lt;/p&gt;

&lt;p&gt;This was built by reverse-engineering the version of &lt;a href=&quot;https://wordpress.org/plugins/ghost/&quot; title=&quot;Wordpress plugin&quot; target=&quot;_blank&quot;&gt;Wordpress plugin&lt;/a&gt; and  &lt;a href=&quot;https://github.com/TryGhost/Ghost/blob/master/core/server/data/schema.js&quot; title=&quot;Ghost schema&quot; target=&quot;_blank&quot;&gt;Ghost schema&lt;/a&gt; to match the JSON file it outputs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/weblancaster/nodejs-jekyll-to-ghost&quot; title=&quot;Nodejs-Jekyll-to-Ghost&quot; target=&quot;_blank&quot;&gt;Nodejs-Jekyll-to-Ghost&lt;/a&gt; &lt;br&gt;
Enjoy!&lt;/p&gt;
</description>
				<published>2014-11-04 00:00:00 -0600</published>
				<link>http://bymichaellancaster.com//blog/migrate-jekyll-to-ghost-built-with-nodejs</link>
			</item>
		
			<item>
				<title>Ep.2 Data Structures and Algorithms with JS - Arrays</title>
				<description>&lt;div class=&quot;intro-series&quot;&gt;
    This post is part of the series: Data Structures and Algorithms with JS therefore before continue to read I suggest you &lt;a href=&quot;/blog/javascript-data-structure-algorithms-series-ep1/&quot; title=&quot;Data Structures and Algorithms Ep.1&quot;&gt;the introduction&lt;/a&gt; to this series of posts if you haven&#39;t read yet. thanks.
&lt;/div&gt;

&lt;h3&gt;Brushing up on Arrays&lt;/h3&gt;

&lt;p&gt;This is the second post on the series of Data Structure and Algorithms with JS - focused on Array. &lt;br&gt;
Notice that this is a overview/start point for those that need to brush up your knowledge on Arrays where we are going to be using in the future on more complex topics.&lt;/p&gt;

&lt;p&gt;Every programming language has sort of a built-in Array where you can access data via index and most of these languages has a strict type of Array which would be integer BUT not in Javascript, where Array is also an object which when integers used for index they are converted to strings. &lt;br&gt;
And Array being an object means that it contain properties and functions you can use out of the box.&lt;/p&gt;

&lt;p&gt;In Javascript we don&#39;t need to define the length of our Array as in C++ and we can have different types of values therefore making Arrays in Javascript flexible and easier to manipulate than other classic languages.&lt;/p&gt;

&lt;h3&gt;Creating Arrays&lt;/h3&gt;

&lt;p&gt;Let&#39;s create an Array with length zero:&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr = []; // arr.length = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&#39;s create an Array with some elements defined and length equal 5:&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]; // arr.length = 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Array with different types would look like:&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr = [&#39;michael&#39;, &#39;lancaster&#39;, 23, true, null];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to verify if an object is an Array you can use the method &lt;code&gt;Arrays.isArray()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;];
Array.isArray(arr); // true

var str = &#39;Michael Lancaster&#39;;
Array.isArray(str); // false
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Accessing&lt;/h3&gt;

&lt;p&gt;Use the operator &lt;code&gt;[]&lt;/code&gt; passing the index to access the value/element.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;];
console.log( arr[2] ) // c
console.log( arr[4] ) // e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also iterating through an Array sequentially&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr = [1, 2, 3, 4, 5];
for ( var i = 0; i &lt; arr.length; i++ ) {
    console.log(&#39;Index: &#39; + i, &#39;Value: &#39; + arr[i])
}

// outputs
// Index: 0 Value: 1
// Index: 1 Value: 2
// Index: 2 Value: 3
// Index: 3 Value: 4
// Index: 4 Value: 5 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice on the sample above that the loop is controlled by the length of the Array &lt;code&gt;arr.length&lt;/code&gt; since in Javascript Array is an object and it can be modified so we guarantee that we have gone through all indexes.&lt;/p&gt;

&lt;h3&gt;Array from String&lt;/h3&gt;

&lt;p&gt;We can also create Arrays from strings defining a delimiter (&lt;code&gt;space&lt;/code&gt; in my case).&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var str = &#39;Michael lancaster 23 and developer&#39;;
var arr = str.split(&#39; &#39;); // [&quot;Michael&quot;, &quot;lancaster&quot;, &quot;23&quot;, &quot;and&quot;, &quot;developer&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Object Copy&lt;/h3&gt;

&lt;p&gt;There&#39;s several ways of Object copy &lt;code&gt;Shallow Copy&lt;/code&gt;, &lt;code&gt;Deep Copy&lt;/code&gt; and &lt;code&gt;Lazy Copy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Shallow Copy&lt;/code&gt; is when you assign &amp;quot;B = A&amp;quot; which has the disadvantage of when updating Array A the Array B will also be modified with same updates as A no matter what. Here&#39;s an example of &lt;code&gt;Shallow Copy&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
var arr2 = arr1;
console.log(arr2) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
arr1.push(&#39;michael&#39;);
console.log(arr1) // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;michael&quot;]
console.log(arr2) // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;michael&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we pushed a new value to the end of &lt;code&gt;arr1&lt;/code&gt; this change is reflected into &lt;code&gt;arr2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A better way to do a copy would be the &lt;code&gt;Deep Copy&lt;/code&gt; which one don&#39;t depend on another but it&#39;s a slower operation. &lt;br&gt;
Here&#39;s an example of &lt;code&gt;Deep Copy&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
var arr2 = [];

function deepCopy(arr1, arr2) {
    for ( var i = 0; i &lt; arr1.length; i++ ) {
        arr2[i] = arr1[i];
    }
}

deepCopy(arr1, arr2);

console.log(arr1) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
console.log(arr2) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
arr1.push(&#39;michael&#39;)
console.log(arr1) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;michael&quot;] 
console.log(arr2) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example above you can notice that the value pushed to &lt;code&gt;arr1&lt;/code&gt; do not reflected into &lt;code&gt;arr2&lt;/code&gt;.
Now. &lt;code&gt;Lazy Copy&lt;/code&gt; is the combination of both operations.&lt;/p&gt;

&lt;h3&gt;Array traversal and mutation operations&lt;/h3&gt;

&lt;p&gt;Array is list-like and also a constructor that contains prototype methods to perform traversal and mutation operations such as:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Searching a value&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Searching a value can be done with the method &lt;code&gt;Array.prototype.indexOf()&lt;/code&gt; which perform an operation of comparing with &lt;code&gt;===&lt;/code&gt; the value passed to the function is found and return it&#39;s index position otherwise will return -1.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var languages = [&#39;Javascript&#39;, &#39;Java&#39;, &#39;C++&#39;, &#39;Go&#39;];
languages.indexOf(&#39;C++&#39;) // 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that this search operation using the &lt;code&gt;indexOf&lt;/code&gt; will return the just the position of the &lt;code&gt;first&lt;/code&gt; value encountered in the Array.
You can also the &#39;lastIndexOf&#39; which will do the same but return the position of the last value encountered.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var languages = [&#39;Javascript&#39;, &#39;Java&#39;, &#39;C++&#39;, &#39;Go&#39;, &#39;Lua&#39;, &#39;C++&#39;];
languages.lastIndexOf(&#39;C++&#39;) // 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;String from Arrays&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There&#39;s two methods to return a string representation from an Array &lt;code&gt;Array.prototype.join()&lt;/code&gt; and &lt;code&gt;Array.prototype.toString()&lt;/code&gt;. &lt;br&gt;
It&#39;s automatically delimited by commas but you can pass your delimiter on the method. Here&#39;s an example using &lt;code&gt;join&lt;/code&gt; and &lt;code&gt;toString&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var languages = [&#39;Javascript&#39;, &#39;Java&#39;, &#39;C++&#39;, &#39;Go&#39;, &#39;Lua&#39;];
languages.join(); // &quot;Javascript,Java,C++,Go,Lua&quot;
languages.toString(); // &quot;Javascript,Java,C++,Go,Lua&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;New Array from Array&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There&#39;s also multiple methods to create an Array from another Array &lt;code&gt;Array.prototype.concat()&lt;/code&gt; and &lt;code&gt;Array.prototype.splice()&lt;/code&gt;.
The &lt;code&gt;Array.prototype.concat()&lt;/code&gt; method allow you to pass one or more Arrays/Values as argument to create a new Array.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var cats = [&#39;Abyssinian&#39;, &#39;Persian&#39;, &#39;Peterbald&#39;];
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
var birds = [&#39;Malleefowl&#39;, &#39;Maleo&#39;];

var petAnimals = cats.concat(dogs, birds);
console.log(petAnimals); // [&quot;Abyssinian&quot;, &quot;Persian&quot;, &quot;Peterbald&quot;, &quot;Alaskan Klee Kai&quot;, &quot;American Bulldog&quot;, &quot;Pitbull&quot;, &quot;Malleefowl&quot;, &quot;Maleo&quot;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Array.prototype.splice()&lt;/code&gt; takes two arguments (minimum) or more. You can also use to add new elements to the middle of an Array. &lt;br&gt;
They are going to be used to mutate the Array therefore it can add new elements and/or remove old elements.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
var removedDogs = dogs.splice(2, 0, &quot;Bull Terrier&quot;);
console.log(dogs); // [&quot;Alaskan Klee Kai&quot;, &quot;American Bulldog&quot;, &quot;Bull Terrier&quot;, &quot;Pitbull&quot;]
console.log(removedDogs); // [] empty since no values/elements were removed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above the order of my arguments are &lt;code&gt;.splice(from index, remove, enter new element)&lt;/code&gt; so looking at my arguments we have inserted a new value &lt;code&gt;Bull terrier&lt;/code&gt; removed &lt;code&gt;0&lt;/code&gt; and started at index &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
var removedDogs = dogs.splice(1, 1, &quot;Bull Terrier&quot;);
console.log(dogs); // [&quot;Alaskan Klee Kai&quot;, &quot;Bull Terrier&quot;, &quot;Pitbull&quot;]
console.log(removedDogs); // [&quot;American Bulldog&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above I said .splice &lt;code&gt;from index 1, remove index 1, insert &#39;Bull Terrier&#39;&lt;/code&gt; so now the variable &lt;code&gt;removedDogs&lt;/code&gt; contain the item removed from the index defined which in this case is &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Adding elements/values to an Array&lt;/h3&gt;

&lt;p&gt;So instead of use the length of an Array to add an element to the end or even harder to add an element to the beginning of an Array which you would have to iterate through the Array and shift the index from the end towards start.
Anyway. Let&#39;s keep it simple with these two methods to add new elements to an Array &lt;code&gt;Array.prototype.push()&lt;/code&gt; add to the end of an Array and &lt;code&gt;Array.prototype.unshift()&lt;/code&gt; add to the beginning of an Array (Both methods accept multiple values/elements passed as arguments). &lt;br&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;push()&lt;/code&gt; function/method add a value/element to the end of an Array.&lt;br&gt;
Here&#39;s an example.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
console.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];

dogs.push(&#39;Bull Terrier&#39;);
console.log(dogs); // [&quot;Alaskan Klee Kai&quot;, &quot;American Bulldog&quot;, &quot;Pitbull&quot;, &quot;Bull Terrier&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;unshift()&lt;/code&gt; function/method add a value/element to the beginning of an Array. &lt;br&gt;
Here&#39;s an example.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
console.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];

dogs.unshift(&#39;American Bulldog&#39;);
console.log(dogs); // [&quot;American Bulldog&quot;, &quot;Alaskan Klee Kai&quot;, &quot;American Bulldog&quot;, &quot;Pitbull&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Removing elements/values from an Array&lt;/h3&gt;

&lt;p&gt;There&#39;s also two methods to remove values/elements from an Array where you can remove the beginning using &lt;code&gt;Array.prototype.shift()&lt;/code&gt; or if you want to remove from the end you can use &lt;code&gt;Array.prototype.pop()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here&#39;s an example to remove the first element using the &lt;code&gt;Array.prototype.shift()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
console.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];

dogs.shift();
console.log(dogs); // [ &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here&#39;s an example to remove the last element using the &lt;code&gt;Array.prototype.pop()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
console.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];

dogs.pop();
console.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;];
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Ordering/Sorting elements&lt;/h3&gt;

&lt;p&gt;There&#39;s also two ways to order/sort an Array &lt;code&gt;Array.prototype.reverse()&lt;/code&gt; which are going to do what says and &lt;code&gt;Array.prototype.sort()&lt;/code&gt; to put elements in order but in this case the method &lt;code&gt;Array.prototype.sort()&lt;/code&gt; turns every value in strings so if you have numbers you are going to need to pass a function and order the numbers.&lt;/p&gt;

&lt;p&gt;Here&#39;s an example of &lt;code&gt;Array.prototype.reverse()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
console.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];

dogs.reverse();
console.log(dogs); // [&quot;Pitbull&quot;, &quot;American Bulldog&quot;, &quot;Alaskan Klee Kai&quot;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&#39;s an example of &lt;code&gt;Array.prototype.sort()&lt;/code&gt; with strings.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var alphabet = [&#39;a&#39;, &#39;b&#39;, &#39;e&#39;, &#39;z&#39;, &#39;f&#39;, &#39;c&#39;];
console.log(alphabet); // [&#39;a&#39;, &#39;b&#39;, &#39;e&#39;, &#39;z&#39;, &#39;f&#39;, &#39;c&#39;]

alphabet.sort();
console.log(alphabet); // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;e&quot;, &quot;f&quot;, &quot;z&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here&#39;s an example of how to pass a function to &lt;code&gt;Array.prototype.sort()&lt;/code&gt; to order numbers.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
console.log(nums) // [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]

nums.sort(function(n1, n2) {
  return n1 - n2;
});

console.log(nums) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Iterator methods&lt;/h3&gt;

&lt;p&gt;The iterator methods/functions are going to be applied for each value/element and may or may not return a new array, groups of values or just a value as result of the operation.&lt;/p&gt;

&lt;p&gt;First let&#39;s talk about the &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; which receive a callback as argument and this callback has three arguments respectively &lt;code&gt;element&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;array being traversed&lt;/code&gt; going to iterate on ascending order. &lt;br&gt;
Here&#39;s an example using &lt;code&gt;Array.prototype.forEach()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];

dogs.forEach(function(value, index, array) {
    console.log(&#39;Dog breed: &#39; + value + &#39;, position: &#39; + index);
});

// outputs
// Dog breed: Alaskan Klee Kai, position: 0
// Dog breed: American Bulldog, position: 1
// Dog breed: Pitbull, position: 2 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it&#39;s time to show the &lt;code&gt;Array.prototype.every()&lt;/code&gt; which test a condition against each element and return true in case all elements meet the condition or false. &lt;br&gt;
Also receives a callback as argument and this callback has three arguments respectively &lt;code&gt;element&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;array being traversed&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

var meetCondition = nums.every(function(element, index, array) {
    return (element &lt; 11);
});

console.log(meetCondition) // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code above all elements are tested against the condition to check if they are less than 11 in our case all elements are less than 11 so the result returned is true.&lt;/p&gt;

&lt;p&gt;The method/function &lt;code&gt;Array.prototype.some()&lt;/code&gt; works almost the same way as &lt;code&gt;Array.prototype.every()&lt;/code&gt; but in this case if at least one element meet the condition would return true.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]

var meetCondition = nums.some(function(element, index, array) {
    return (element === 11);
});

console.log(meetCondition) // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Array.prototype.reduce()&lt;/code&gt; method run a function against an accumulator for each element until reduce to one single value.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var nums = [100, 200, 300, 400];

nums.reduce(function(a, b) {
    console.log(&#39;a&#39;, a);
    console.log(&#39;b&#39;, b);
    console.log(&#39;result accumulated is: &#39;, a + b);
    return a + b;
});

// output

// a 100
// b 200
// result accumulated is: 300
// a 300
// b 300
// result accumulated is: 600
// a 600
// b 400
// result accumulated is: 1000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see our method &lt;code&gt;Array.prototype.reduce()&lt;/code&gt; receive a function with two arguments &lt;code&gt;previous value&lt;/code&gt; and &lt;code&gt;current value&lt;/code&gt; a + b which the result turns into the &lt;code&gt;accumulator&lt;/code&gt; a and then calculate this result against the next in line which is b and so on so forth. &lt;br&gt;
You can also pass &lt;code&gt;initial value&lt;/code&gt; where it&#39;s going to turn into the &lt;code&gt;previous value&lt;/code&gt; and the original &lt;code&gt;previous value&lt;/code&gt; turn into &lt;code&gt;current value&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var nums = [100, 200, 300, 400];

nums.reduce(function(a, b) {
    console.log(&#39;a&#39;, a);
    console.log(&#39;b&#39;, b);
    console.log(&#39;result accumulated is: &#39;, a + b);
    return a + b;
}, 200);

// output

// a 200
// b 100
// result accumulated is: 300
// a 300
// b 200
// result accumulated is: 500
// a 500
// b 300
// result accumulated is: 800
// a 800
// b 400
// result accumulated is: 1200
// 1200
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&#39;s also the possibility to use &lt;code&gt;Array.prototype.reduceRight()&lt;/code&gt; which is going to perform the function on each element of the array from the end to start.&lt;/p&gt;

&lt;p&gt;the &lt;code&gt;Array.prototype.map()&lt;/code&gt; method works the same way &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; method works but return a new Array as the difference between the two methods.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];

var newArr = dogs.map(function(value, index, array) {
    console.log(&#39;Dog breed: &#39; + value + &#39;, position: &#39; + index);
    return value;
});

console.log(newArr);

// outputs
// Dog breed: Alaskan Klee Kai, position: 0
// Dog breed: American Bulldog, position: 1
// Dog breed: Pitbull, position: 2 

// [&quot;Alaskan Klee Kai&quot;, &quot;American Bulldog&quot;, &quot;Pitbull&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Array.prototype.filter()&lt;/code&gt; method works almost the same way as &lt;code&gt;Array.prototype.every()&lt;/code&gt; but instead return an Array with the elements that met the condition &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

var numsLessThan5 = nums.filter(function(element, index, array) {
    return (element &lt; 5);
});

console.log(numsLessThan5) // [0, 1, 2, 3, 4] 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;That&#39;s it&lt;/h3&gt;

&lt;p&gt;I hope you have brush up on your Array knowledge being aware of we can use and will use more complex approaches applying some of the topics I covered on this post. &lt;br&gt;&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;* Don&#39;t be shy. I will appreciate any improvement and/or fix.&lt;/small&gt;&lt;/p&gt;
</description>
				<published>2014-09-03 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/javascript-data-structure-algorithms-series-ep2-arrays</link>
			</item>
		
	</channel>
</rss>
