<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
	<channel>
		<title>Michael Lancaster</title>
		<description>Front End Developer/Web Engineer</description>
		<link>http://bymichaellancaster.com/</link>
		
			<item>
				<title>Ep.3 Data Structures and Algorithms with JS - Lists</title>
				<description>&lt;div class=&quot;intro-series&quot;&gt;
    &lt;strong&gt;Be advised!&lt;/strong&gt; &lt;br&gt; 
    This post is part of the series: Data Structures and Algorithms with JS therefore before continue to read I suggest you &lt;a href=&quot;/blog/javascript-data-structure-algorithms-series-ep1/&quot; title=&quot;Data Structures and Algorithms Ep.1&quot;&gt;the introduction&lt;/a&gt; to this series of posts if you haven&#39;t read yet. thanks.
&lt;/div&gt;

&lt;p&gt;Let&#39;s get start and see how data structures can help us design better software solutions...today I&#39;m going to talk briefly about Lists&lt;/p&gt;

&lt;h3&gt;Lists&lt;/h3&gt;

&lt;p&gt;Answer out and loud what are lists? ... Yes that&#39;s it. We all intuitively understand what lists are but to be more clear Lists are simply a collection of items therefore a To-Do list, Grocery shop list, book list, Phone number list and so on.&lt;/p&gt;

&lt;p&gt;In computer programing Lists are under the ADT (Abstract Data Type) category and can have order/or not (each element has your position) where the element can be duplicated or there&#39;s no restrictions on different data types but usually assumed to have the same data type so lists are useful when search and sorted order &lt;strong&gt;isn&#39;t&lt;/strong&gt; in need which otherwise would perform a slow and complex data structure design.&lt;/p&gt;

&lt;p&gt;A list is said to be &lt;code&gt;empty&lt;/code&gt; when it contains no elements. The number of elements currently stored is called the &lt;code&gt;length&lt;/code&gt; of the list. The beginning of the list is called the &lt;code&gt;head&lt;/code&gt;, the end of the list is called the &lt;code&gt;tail&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The basic operations we want on a list is to increase and decrease in size adding and removing new elements..We also want to add or remove elements on any position of the list.. access the element value either to just read or change it.. Access the next or prev based on the current element.. we also want to be able to create new lists or clear one.&lt;/p&gt;

&lt;p&gt;So here&#39;s our actions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;position&lt;/code&gt; current position in the list where any action will take place&lt;/li&gt;
&lt;li&gt;&lt;code&gt;currPos&lt;/code&gt; return the position of the current element&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clear&lt;/code&gt; remove all elements of the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insertAfter&lt;/code&gt; insert an element after target specified in the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insertBefore&lt;/code&gt; insert an element before target specified in the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;append&lt;/code&gt; an element to the end of the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remove&lt;/code&gt; an element from the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;length&lt;/code&gt; number of elements in the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find&lt;/code&gt; an element in the list and return the position of the element&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contains&lt;/code&gt; an element in the list return boolean&lt;/li&gt;
&lt;li&gt;&lt;code&gt;head&lt;/code&gt; set current position to first element in the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tail&lt;/code&gt; set current position to last element in the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prev&lt;/code&gt; set the current position one step left of the current position, no change if already at beginning&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next&lt;/code&gt; set the current position one step right of the current position, no change if already at end&lt;/li&gt;
&lt;li&gt;&lt;code&gt;moveTo&lt;/code&gt; move current position to specified position&lt;/li&gt;
&lt;li&gt;&lt;code&gt;to String&lt;/code&gt; return string representation of the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getElement&lt;/code&gt; return element of the current position in the list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That being said lets get our hands dirty.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
/**
 * List constructor
 * @class List
 */
function List() {
    this.list = [];
    this.position = 0;
    this.listSize = 0;
}

/**
 * Return current position in the list
 * @return {[number]} list current position
 * @method currPos
 */
List.prototype.currPos = function () {
    return this.position;
};

/**
 * Insert element after specified target element in the list
 * @method insertAfter
 */
List.prototype.insertAfter = function (after, element) {
    var target = this.find(after);
    if ( target &gt; -1 ) {
        this.list.splice(target + 1, 0, element);
        ++this.listSize;
        return true;
    }
};

/**
 * Insert element before specified target element in the list
 * @method insertBefore
 */
List.prototype.insertBefore = function (before, element) {
    var target = this.find(before);
    if ( target &gt; 0 ) {
        this.list.splice(target, 0, element);
        ++this.listSize;
        return true;
    }
};

/**
 * Remove specified element in the list
 * @param  element [specified element in the list to be removed]
 * @method remove
 */
List.prototype.remove = function (element) {
    var target = this.find(element);
    if ( target &gt; -1 ) {
        this.list.splice(target, 1);
        --this.listSize;
        return true;
    }
};

/**
 * Add element at the next available position
 * which is equal to the listSize
 * also increment the listSize by 1 when
 * adding a new element
 * @method append
 */
List.prototype.append = function (element) {
    this.list[this.listSize++] = element;
};

/**
 * Responsible to return the number of
 * books in the list
 * @return {[number]} [number of books in the list]
 * @method 
 */
List.prototype.length = function () {
    return this.listSize;
};

/**
 * Responsible to check if book list is empty
 * @return {Boolean}
 * @method isEmpty
 */
List.prototype.isEmpty = function () {
    if ( this.listSize &lt; 1 ) {
        return true;
    } else {
        return false;
    }
};

/**
 * Clear all elements in the list
 * @method clear
 */
List.prototype.clear = function () {
    this.list.length = this.position = 0;
};

/**
 * Move current position to the front/first in the list
 * @method head
 */
List.prototype.head = function () {
    this.position = 0;
};

/**
 * Move current position to the end in the list
 * @method tail
 */
List.prototype.tail = function () {
    this.position = this.listSize;
};

/**
 * Set current position on step left/back in the list
 * if not at the first element
 * @method prev
 */
List.prototype.prev = function () {
    if ( this.position !== 0 ) {
        --this.position;
    }
};

/**
 * Set current position on step right in the list
 * if not at the end/tail element
 * @method next
 */
List.prototype.next = function () {
    if ( this.position !== (this.listSize - 1) ) {
        ++this.position;
    }
};

/**
 * Return string representation of the list
 * @return {[string]} list as string
 * @method toString
 */
List.prototype.toString = function () {
    return this.list.toString();
};

/**
 * Find element and return it&#39;s position
 * @param  {[type]} element [element to be search]
 * @return {[number]} element position
 * @method find
 */
List.prototype.find = function (element) {
    for ( var i = 0; i &lt; this.list.length; ++i ) {
        if ( this.list[i] == element ) {
            return i;
        }
    }

    return -1;
};

/**
 * Find an element in the list
 * and returns true if exist or false if not
 * @param  element [element to be added in the list]
 * @return {[boolean]}
 * @method contains
 */
List.prototype.contains = function (element) {
    for ( var i = 0; i &lt; this.list.length; ++i ) {
        if ( this.list[i] == element ) {
            return true;
        }
    }

    return false;
};

/**
 * Move current to specified position
 * @param  {[number]} position
 * @return {[type]}          [description]
 */
List.prototype.moveTo = function (position) {
    if ( position &gt;= 0 || position &lt;= (this.listSize - 1) ) {
        this.position = position;
    }
};

/**
 * Return current element in list
 * @method getElement
 */
List.prototype.getElement = function () {
    return this.list[this.position];
}

/**
 * This method was created to log/debug the list
 * @debug
 */
List.prototype.debug = function (options) {
    var options = options || {};
        options.list = options.list || false;
        options.position = options.position || false;
        options.toString = options.toString || false;
        options.getElement = options.getElement || false;
        options.listSize = options.listSize || false;
        options.contains = options.contains || false;
        options.isEmpty = options.isEmpty || false;

    if ( options.list ) {
        console.log(&#39;list &gt;&gt;&#39;, this.list);
    }
    if ( options.position ) {
        console.log(&#39;position &gt;&gt;&#39;, this.currPos() );
    }
    if ( options.toString ) {
        console.log(&#39;string &gt;&gt;&#39;, this.toString() );
    }
    if ( options.getElement ) {
        console.log(&#39;Current element &gt;&gt;&#39;, this.getElement() );
    }
    if ( options.listSize ) {
        console.log(&#39;List size &gt;&gt;&#39;, this.listSize );
    }
    if ( options.contains ) {
        console.log(&#39;Contains element &gt;&gt;&#39;, this.contains(options.contains) );
    }
    if ( options.isEmpty ) {
        console.log(&#39;is empty &gt;&gt;&#39;, this.isEmpty() );
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the code example above show all methods and properties our list need to have and I also added a method call &lt;code&gt;debug&lt;/code&gt; so we can do some simple debug/log.&lt;/p&gt;

&lt;p&gt;Let&#39;s create a list of movies and at the end lets use our simple test method&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
/**
* Movie list
*/
var movies = new List();

// add action
movies.append(&#39;Matrix&#39;);
movies.append(&#39;Inception&#39;);
movies.append(&#39;The Wolf of Wall Street&#39;);
movies.append(&#39;Batman&#39;);
movies.append(&#39;G.I Joe&#39;);
movies.append(&#39;Interstellar&#39;);

// move action
movies.tail();
movies.prev();
movies.moveTo(4);
movies.head();

// delete action
movies.remove(&#39;G.I Joe&#39;);

// add at specified position
movies.insertAfter(&#39;Matrix&#39;, &#39;G.I Joe&#39;);
movies.insertBefore(&#39;G.I Joe&#39;, &#39;The theory of everything&#39;);

// Debug list
movies.debug({
    list: true,
    position: true,
    toString: true,
    getElement: true,
    listSize: true,
    contains: &#39;Batman&#39;,
    isEmpty: true
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this is was the Ep.3 about Data Structures and Algorithms - Lists.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
				<published>2015-01-11 00:00:00 -0600</published>
				<link>http://bymichaellancaster.com//blog/javascript-data-structure-algorithms-series-ep3-lists</link>
			</item>
		
			<item>
				<title>Murphy's law for programmers</title>
				<description>&lt;p&gt;Murphy&#39;s law in the life of a programmer useful for every Friday 5pm EOD.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1. Any given program, when running, is obsolete. &lt;/li&gt;
&lt;li&gt;2. Any given program costs more and takes longer. &lt;/li&gt;
&lt;li&gt;3. If any program is useful, it will have to be changed. &lt;/li&gt;
&lt;li&gt;4. If a program is useless, it will have to be documented. &lt;/li&gt;
&lt;li&gt;5. Any given program will expand to fill all available memory. &lt;/li&gt;
&lt;li&gt;6. The value of a program is proportional to the weight of its output. &lt;/li&gt;
&lt;li&gt;7. Program complexity always grows until it exceeds the capability of the programmer who must maintain it. &lt;/li&gt;
&lt;li&gt;8. If a test installation functions perfectly, all subsequent systems will malfunction. &lt;/li&gt;
&lt;li&gt;9. Job control cards that positively cannot be arranged in improper order will be.&lt;/li&gt;
&lt;li&gt;10. If the input editor has been designed to reject all bad input, an ingenious idiot will discover a method to get bad data past it.&lt;/li&gt;
&lt;li&gt;11. Profanity is the one language all programmers know best.&lt;/li&gt;
&lt;li&gt;12. Adding manpower to a late software project makes it later.&lt;/li&gt;
&lt;li&gt;13. A carelessly planned project takes three times longer to complete than expected; a carefully planned project takes only twice as long.&lt;/li&gt;
&lt;li&gt;14. (Lubarsky&#39;s Law of Cybernetic Entomology) There is always one more bug.&lt;/li&gt;
&lt;li&gt;15. It is impossible to make any program foolproof because fools are so ingenious.&lt;/li&gt;
&lt;li&gt;16. When things are going well, something will go wrong.&lt;/li&gt;
&lt;li&gt;17. When things just can&#39;t get any worse, they will.&lt;/li&gt;
&lt;li&gt;18. Anytime things appear to be going well, you have overlooked something.&lt;/li&gt;
&lt;li&gt;19. Test functions and their tests should be reproducible -- they should all fail in the same way.&lt;/li&gt;
&lt;li&gt;20. If it looks easy, it&#39;s tough.&lt;/li&gt;
&lt;li&gt;21. If it looks tough, it&#39;s damn near impossible.&lt;/li&gt;
&lt;li&gt;22. You always find any bug in the last place you look.&lt;/li&gt;
&lt;li&gt;23. Anything can be made to work if you fiddle with it long enough.&lt;/li&gt;
&lt;li&gt;24. A terminal usually works better if you plug it in. &lt;/li&gt;
&lt;li&gt;25. If all else fails, read the documentation.&lt;/li&gt;
&lt;li&gt;26. If you do not understand a particular word in a piece of technical writing, ignore it. The piece will make perfect sense without it.&lt;/li&gt;
&lt;li&gt;27. No matter how much you do, you&#39;ll never do enough.&lt;/li&gt;
&lt;li&gt;28. What you don&#39;t do is always more important than what you do.&lt;/li&gt;
&lt;li&gt;29. Procrastination avoids boredom; one never has the feeling that there is nothing important to do.&lt;/li&gt;
&lt;li&gt;30. Always leave room to add an explanation if it doesn&#39;t work out.&lt;/li&gt;
&lt;li&gt;31. No amount of genius can overcome a preoccupation with detail.&lt;/li&gt;
&lt;li&gt;32. Nothing is impossible for a man who doesn&#39;t have to do it himself.&lt;/li&gt;
&lt;li&gt;33. If builders built buildings the way programmers write programs, then the first woodpecker than came along would destroy civilization.&lt;/li&gt;
&lt;li&gt;34. Programmers will act rational when all other possibilities have been exhausted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;* From &lt;a href=&quot;http://www.murphys-laws.com/murphy/murphy-computer.html&quot; title=&quot;Murphy&#39;s law for programmers&quot; target=&quot;_blank&quot;&gt;Murphy&#39;s law site&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;
</description>
				<published>2014-11-21 00:00:00 -0600</published>
				<link>http://bymichaellancaster.com//blog/murphys-law-for-programming-programmers</link>
			</item>
		
			<item>
				<title>Migrating Jekyll to Ghost</title>
				<description>&lt;p&gt;When I decided to migrate my blog platform Jekyll to Ghost blog platform I did not find any simple/useful way to export/import my posts besides this &lt;a href=&quot;https://github.com/mattvh/Jekyll-to-Ghost&quot; title=&quot;Jekyll to Ghost Ruby script&quot; target=&quot;_blank&quot;&gt;old Ruby script&lt;/a&gt; which did not work for me.. So I decided to solve this problem creating a nice npm module called &lt;a href=&quot;https://github.com/weblancaster/nodejs-jekyll-to-ghost&quot; title=&quot;Nodejs-Jekyll-to-Ghost&quot; target=&quot;_blank&quot;&gt;Nodejs-Jekyll-to-Ghost&lt;/a&gt; which do the heavy work for those that want to migrate to ghost from Jekyll.&lt;/p&gt;

&lt;p&gt;This npm module will help you to export your Markdown posts from &lt;a href=&quot;http://jekyllrb.com&quot; title=&quot;Jekyll static blog platform&quot; target=&quot;_blank&quot;&gt;Jekyll&lt;/a&gt; to a format that can be easily imported into &lt;a href=&quot;http://ghost.org&quot; title=&quot;Ghost blog platform&quot; target=&quot;_blank&quot;&gt;Ghost blog platform&lt;/a&gt;. &lt;br&gt; 
It doesn&#39;t handle static pages, and it doesn&#39;t do anything with images. You&#39;ll have to copy those over yourself and manually adjust any URL differences.&lt;/p&gt;

&lt;p&gt;This was built by reverse-engineering the version of &lt;a href=&quot;https://wordpress.org/plugins/ghost/&quot; title=&quot;Wordpress plugin&quot; target=&quot;_blank&quot;&gt;Wordpress plugin&lt;/a&gt; and  &lt;a href=&quot;https://github.com/TryGhost/Ghost/blob/master/core/server/data/schema.js&quot; title=&quot;Ghost schema&quot; target=&quot;_blank&quot;&gt;Ghost schema&lt;/a&gt; to match the JSON file it outputs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/weblancaster/nodejs-jekyll-to-ghost&quot; title=&quot;Nodejs-Jekyll-to-Ghost&quot; target=&quot;_blank&quot;&gt;Nodejs-Jekyll-to-Ghost&lt;/a&gt; &lt;br&gt;
Enjoy!&lt;/p&gt;
</description>
				<published>2014-11-04 00:00:00 -0600</published>
				<link>http://bymichaellancaster.com//blog/migrate-jekyll-to-ghost-built-with-nodejs</link>
			</item>
		
			<item>
				<title>Ep.2 Data Structures and Algorithms with JS - Arrays</title>
				<description>&lt;div class=&quot;intro-series&quot;&gt;
    This post is part of the series: Data Structures and Algorithms with JS therefore before continue to read I suggest you &lt;a href=&quot;/blog/javascript-data-structure-algorithms-series-ep1/&quot; title=&quot;Data Structures and Algorithms Ep.1&quot;&gt;the introduction&lt;/a&gt; to this series of posts if you haven&#39;t read yet. thanks.
&lt;/div&gt;

&lt;h3&gt;Brushing up on Arrays&lt;/h3&gt;

&lt;p&gt;This is the second post on the series of Data Structure and Algorithms with JS - focused on Array. &lt;br&gt;
Notice that this is a overview/start point for those that need to brush up your knowledge on Arrays where we are going to be using in the future on more complex topics.&lt;/p&gt;

&lt;p&gt;Every programming language has sort of a built-in Array where you can access data via index and most of these languages has a strict type of Array which would be integer BUT not in Javascript, where Array is also an object which when integers used for index they are converted to strings. &lt;br&gt;
And Array being an object means that it contain properties and functions you can use out of the box.&lt;/p&gt;

&lt;p&gt;In Javascript we don&#39;t need to define the length of our Array as in C++ and we can have different types of values therefore making Arrays in Javascript flexible and easier to manipulate than other classic languages.&lt;/p&gt;

&lt;h3&gt;Creating Arrays&lt;/h3&gt;

&lt;p&gt;Let&#39;s create an Array with length zero:&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr = []; // arr.length = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&#39;s create an Array with some elements defined and length equal 5:&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]; // arr.length = 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Array with different types would look like:&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr = [&#39;michael&#39;, &#39;lancaster&#39;, 23, true, null];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to verify if an object is an Array you can use the method &lt;code&gt;Arrays.isArray()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;];
Array.isArray(arr); // true

var str = &#39;Michael Lancaster&#39;;
Array.isArray(str); // false
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Accessing&lt;/h3&gt;

&lt;p&gt;Use the operator &lt;code&gt;[]&lt;/code&gt; passing the index to access the value/element.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;];
console.log( arr[2] ) // c
console.log( arr[4] ) // e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also iterating through an Array sequentially&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr = [1, 2, 3, 4, 5];
for ( var i = 0; i &lt; arr.length; i++ ) {
    console.log(&#39;Index: &#39; + i, &#39;Value: &#39; + arr[i])
}

// outputs
// Index: 0 Value: 1
// Index: 1 Value: 2
// Index: 2 Value: 3
// Index: 3 Value: 4
// Index: 4 Value: 5 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice on the sample above that the loop is controlled by the length of the Array &lt;code&gt;arr.length&lt;/code&gt; since in Javascript Array is an object and it can be modified so we guarantee that we have gone through all indexes.&lt;/p&gt;

&lt;h3&gt;Array from String&lt;/h3&gt;

&lt;p&gt;We can also create Arrays from strings defining a delimiter (&lt;code&gt;space&lt;/code&gt; in my case).&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var str = &#39;Michael lancaster 23 and developer&#39;;
var arr = str.split(&#39; &#39;); // [&quot;Michael&quot;, &quot;lancaster&quot;, &quot;23&quot;, &quot;and&quot;, &quot;developer&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Object Copy&lt;/h3&gt;

&lt;p&gt;There&#39;s several ways of Object copy &lt;code&gt;Shallow Copy&lt;/code&gt;, &lt;code&gt;Deep Copy&lt;/code&gt; and &lt;code&gt;Lazy Copy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Shallow Copy&lt;/code&gt; is when you assign &amp;quot;A = B&amp;quot; which has the disadvantage of when modifying Array B the Array A will also be modified with same values/elements as B no matter what. Here&#39;s an example of &lt;code&gt;Shallow Copy&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
var arr2 = arr1;
console.log(arr2) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
arr1.push(&#39;michael&#39;);
console.log(arr1) // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;michael&quot;]
console.log(arr2) // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;michael&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we pushed a new value to the end of &lt;code&gt;arr1&lt;/code&gt; this change is reflected into &lt;code&gt;arr2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A better way to do a copy would be the &lt;code&gt;Deep Copy&lt;/code&gt; which one don&#39;t depend on another but it&#39;s a slower operation. &lt;br&gt;
Here&#39;s an example of &lt;code&gt;Deep Copy&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
var arr2 = [];

function deepCopy(arr1, arr2) {
    for ( var i = 0; i &lt; arr1.length; i++ ) {
        arr2[i] = arr1[i];
    }
}

deepCopy(arr1, arr2);

console.log(arr1) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
console.log(arr2) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
arr1.push(&#39;michael&#39;)
console.log(arr1) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;michael&quot;] 
console.log(arr2) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example above you can notice that the value pushed to &lt;code&gt;arr1&lt;/code&gt; do not reflected into &lt;code&gt;arr2&lt;/code&gt;.
Now. &lt;code&gt;Lazy Copy&lt;/code&gt; is the combination of both operations.&lt;/p&gt;

&lt;h3&gt;Array traversal and mutation operations&lt;/h3&gt;

&lt;p&gt;Array is list-like and also a constructor that contains prototype methods to perform traversal and mutation operations such as:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Searching a value&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Searching a value can be done with the method &lt;code&gt;Array.prototype.indexOf()&lt;/code&gt; which perform an operation of comparing with &lt;code&gt;===&lt;/code&gt; the value passed to the function is found and return it&#39;s index position otherwise will return -1.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var languages = [&#39;Javascript&#39;, &#39;Java&#39;, &#39;C++&#39;, &#39;Go&#39;];
languages.indexOf(&#39;C++&#39;) // 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that this search operation using the &lt;code&gt;indexOf&lt;/code&gt; will return the just the position of the &lt;code&gt;first&lt;/code&gt; value encountered in the Array.
You can also the &#39;lastIndexOf&#39; which will do the same but return the position of the last value encountered.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var languages = [&#39;Javascript&#39;, &#39;Java&#39;, &#39;C++&#39;, &#39;Go&#39;, &#39;Lua&#39;, &#39;C++&#39;];
languages.lastIndexOf(&#39;C++&#39;) // 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;String from Arrays&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There&#39;s two methods to return a string representation from an Array &lt;code&gt;Array.prototype.join()&lt;/code&gt; and &lt;code&gt;Array.prototype.toString()&lt;/code&gt;. &lt;br&gt;
It&#39;s automatically delimited by commas but you can pass your delimiter on the method. Here&#39;s an example using &lt;code&gt;join&lt;/code&gt; and &lt;code&gt;toString&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var languages = [&#39;Javascript&#39;, &#39;Java&#39;, &#39;C++&#39;, &#39;Go&#39;, &#39;Lua&#39;];
languages.join(); // &quot;Javascript,Java,C++,Go,Lua&quot;
languages.toString(); // &quot;Javascript,Java,C++,Go,Lua&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;New Array from Array&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There&#39;s also multiple methods to create an Array from another Array &lt;code&gt;Array.prototype.concat()&lt;/code&gt; and &lt;code&gt;Array.prototype.splice()&lt;/code&gt;.
The &lt;code&gt;Array.prototype.concat()&lt;/code&gt; method allow you to pass one or more Arrays/Values as argument to create a new Array.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var cats = [&#39;Abyssinian&#39;, &#39;Persian&#39;, &#39;Peterbald&#39;];
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
var birds = [&#39;Malleefowl&#39;, &#39;Maleo&#39;];

var petAnimals = cats.concat(dogs, birds);
console.log(petAnimals); // [&quot;Abyssinian&quot;, &quot;Persian&quot;, &quot;Peterbald&quot;, &quot;Alaskan Klee Kai&quot;, &quot;American Bulldog&quot;, &quot;Pitbull&quot;, &quot;Malleefowl&quot;, &quot;Maleo&quot;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Array.prototype.splice()&lt;/code&gt; takes two arguments (minimum) or more. You can also use to add new elements to the middle of an Array. &lt;br&gt;
They are going to be used to mutate the Array therefore it can add new elements and/or remove old elements.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
var removedDogs = dogs.splice(2, 0, &quot;Bull Terrier&quot;);
console.log(dogs); // [&quot;Alaskan Klee Kai&quot;, &quot;American Bulldog&quot;, &quot;Bull Terrier&quot;, &quot;Pitbull&quot;]
console.log(removedDogs); // [] empty since no values/elements were removed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above the order of my arguments are &lt;code&gt;.splice(from index, remove, enter new element)&lt;/code&gt; so looking at my arguments we have inserted a new value &lt;code&gt;Bull terrier&lt;/code&gt; removed &lt;code&gt;0&lt;/code&gt; and started at index &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
var removedDogs = dogs.splice(1, 1, &quot;Bull Terrier&quot;);
console.log(dogs); // [&quot;Alaskan Klee Kai&quot;, &quot;Bull Terrier&quot;, &quot;Pitbull&quot;]
console.log(removedDogs); // [&quot;American Bulldog&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above I said .splice &lt;code&gt;from index 1, remove index 1, insert &#39;Bull Terrier&#39;&lt;/code&gt; so now the variable &lt;code&gt;removedDogs&lt;/code&gt; contain the item removed from the index defined which in this case is &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Adding elements/values to an Array&lt;/h3&gt;

&lt;p&gt;So instead of use the length of an Array to add an element to the end or even harder to add an element to the beginning of an Array which you would have to iterate through the Array and shift the index from the end towards start.
Anyway. Let&#39;s keep it simple with these two methods to add new elements to an Array &lt;code&gt;Array.prototype.push()&lt;/code&gt; add to the end of an Array and &lt;code&gt;Array.prototype.unshift()&lt;/code&gt; add to the beginning of an Array (Both methods accept multiple values/elements passed as arguments). &lt;br&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;push()&lt;/code&gt; function/method add a value/element to the end of an Array.&lt;br&gt;
Here&#39;s an example.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
console.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];

dogs.push(&#39;Bull Terrier&#39;);
console.log(dogs); // [&quot;Alaskan Klee Kai&quot;, &quot;American Bulldog&quot;, &quot;Pitbull&quot;, &quot;Bull Terrier&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;unshift()&lt;/code&gt; function/method add a value/element to the beginning of an Array. &lt;br&gt;
Here&#39;s an example.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
console.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];

dogs.unshift(&#39;American Bulldog&#39;);
console.log(dogs); // [&quot;American Bulldog&quot;, &quot;Alaskan Klee Kai&quot;, &quot;American Bulldog&quot;, &quot;Pitbull&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Removing elements/values from an Array&lt;/h3&gt;

&lt;p&gt;There&#39;s also two methods to remove values/elements from an Array where you can remove the beginning using &lt;code&gt;Array.prototype.shift()&lt;/code&gt; or if you want to remove from the end you can use &lt;code&gt;Array.prototype.pop()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here&#39;s an example to remove the first element using the &lt;code&gt;Array.prototype.shift()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
console.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];

dogs.shift();
console.log(dogs); // [ &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here&#39;s an example to remove the last element using the &lt;code&gt;Array.prototype.pop()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
console.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];

dogs.pop();
console.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;];
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Ordering/Sorting elements&lt;/h3&gt;

&lt;p&gt;There&#39;s also two ways to order/sort an Array &lt;code&gt;Array.prototype.reverse()&lt;/code&gt; which are going to do what says and &lt;code&gt;Array.prototype.sort()&lt;/code&gt; to put elements in order but in this case the method &lt;code&gt;Array.prototype.sort()&lt;/code&gt; turns every value in strings so if you have numbers you are going to need to pass a function and order the numbers.&lt;/p&gt;

&lt;p&gt;Here&#39;s an example of &lt;code&gt;Array.prototype.reverse()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
console.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];

dogs.reverse();
console.log(dogs); // [&quot;Pitbull&quot;, &quot;American Bulldog&quot;, &quot;Alaskan Klee Kai&quot;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&#39;s an example of &lt;code&gt;Array.prototype.sort()&lt;/code&gt; with strings.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var alphabet = [&#39;a&#39;, &#39;b&#39;, &#39;e&#39;, &#39;z&#39;, &#39;f&#39;, &#39;c&#39;];
console.log(alphabet); // [&#39;a&#39;, &#39;b&#39;, &#39;e&#39;, &#39;z&#39;, &#39;f&#39;, &#39;c&#39;]

alphabet.sort();
console.log(alphabet); // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;e&quot;, &quot;f&quot;, &quot;z&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here&#39;s an example of how to pass a function to &lt;code&gt;Array.prototype.sort()&lt;/code&gt; to order numbers.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
console.log(nums) // [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]

nums.sort(function(n1, n2) {
  return n1 - n2;
});

console.log(nums) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Iterator methods&lt;/h3&gt;

&lt;p&gt;The iterator methods/functions are going to be applied for each value/element and may or may not return a new array, groups of values or just a value as result of the operation.&lt;/p&gt;

&lt;p&gt;First let&#39;s talk about the &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; which receive a callback as argument and this callback has three arguments respectively &lt;code&gt;element&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;array being traversed&lt;/code&gt; going to iterate on ascending order. &lt;br&gt;
Here&#39;s an example using &lt;code&gt;Array.prototype.forEach()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];

dogs.forEach(function(value, index, array) {
    console.log(&#39;Dog breed: &#39; + value + &#39;, position: &#39; + index);
});

// outputs
// Dog breed: Alaskan Klee Kai, position: 0
// Dog breed: American Bulldog, position: 1
// Dog breed: Pitbull, position: 2 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it&#39;s time to show the &lt;code&gt;Array.prototype.every()&lt;/code&gt; which test a condition against each element and return true in case all elements meet the condition or false. &lt;br&gt;
Also receives a callback as argument and this callback has three arguments respectively &lt;code&gt;element&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;array being traversed&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

var meetCondition = nums.every(function(element, index, array) {
    return (element &lt; 11);
});

console.log(meetCondition) // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code above all elements are tested against the condition to check if they are less than 11 in our case all elements are less than 11 so the result returned is true.&lt;/p&gt;

&lt;p&gt;The method/function &lt;code&gt;Array.prototype.some()&lt;/code&gt; works almost the same way as &lt;code&gt;Array.prototype.every()&lt;/code&gt; but in this case if at least one element meet the condition would return true.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]

var meetCondition = nums.some(function(element, index, array) {
    return (element === 11);
});

console.log(meetCondition) // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Array.prototype.reduce()&lt;/code&gt; method run a function against an accumulator for each element until reduce to one single value.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var nums = [100, 200, 300, 400];

nums.reduce(function(a, b) {
    console.log(&#39;a&#39;, a);
    console.log(&#39;b&#39;, b);
    console.log(&#39;result accumulated is: &#39;, a + b);
    return a + b;
});

// output

// a 100
// b 200
// result accumulated is: 300
// a 300
// b 300
// result accumulated is: 600
// a 600
// b 400
// result accumulated is: 1000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see our method &lt;code&gt;Array.prototype.reduce()&lt;/code&gt; receive a function with two arguments &lt;code&gt;previous value&lt;/code&gt; and &lt;code&gt;current value&lt;/code&gt; a + b which the result turns into the &lt;code&gt;accumulator&lt;/code&gt; a and then calculate this result against the next in line which is b and so on so forth. &lt;br&gt;
You can also pass &lt;code&gt;initial value&lt;/code&gt; where it&#39;s going to turn into the &lt;code&gt;previous value&lt;/code&gt; and the original &lt;code&gt;previous value&lt;/code&gt; turn into &lt;code&gt;current value&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var nums = [100, 200, 300, 400];

nums.reduce(function(a, b) {
    console.log(&#39;a&#39;, a);
    console.log(&#39;b&#39;, b);
    console.log(&#39;result accumulated is: &#39;, a + b);
    return a + b;
}, 200);

// output

// a 200
// b 100
// result accumulated is: 300
// a 300
// b 200
// result accumulated is: 500
// a 500
// b 300
// result accumulated is: 800
// a 800
// b 400
// result accumulated is: 1200
// 1200
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&#39;s also the possibility to use &lt;code&gt;Array.prototype.reduceRight()&lt;/code&gt; which is going to perform the function on each element of the array from the end to start.&lt;/p&gt;

&lt;p&gt;the &lt;code&gt;Array.prototype.map()&lt;/code&gt; method works the same way &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; method works but return a new Array as the difference between the two methods.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];

var newArr = dogs.map(function(value, index, array) {
    console.log(&#39;Dog breed: &#39; + value + &#39;, position: &#39; + index);
    return value;
});

console.log(newArr);

// outputs
// Dog breed: Alaskan Klee Kai, position: 0
// Dog breed: American Bulldog, position: 1
// Dog breed: Pitbull, position: 2 

// [&quot;Alaskan Klee Kai&quot;, &quot;American Bulldog&quot;, &quot;Pitbull&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Array.prototype.filter()&lt;/code&gt; method works almost the same way as &lt;code&gt;Array.prototype.every()&lt;/code&gt; but instead return an Array with the elements that met the condition &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

var numsLessThan5 = nums.filter(function(element, index, array) {
    return (element &lt; 5);
});

console.log(numsLessThan5) // [0, 1, 2, 3, 4] 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;That&#39;s it&lt;/h3&gt;

&lt;p&gt;I hope you have brush up on your Array knowledge being aware of we can use and will use more complex approaches applying some of the topics I covered on this post. &lt;br&gt;&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;* Don&#39;t be shy. I will appreciate any improvement and/or fix.&lt;/small&gt;&lt;/p&gt;
</description>
				<published>2014-09-03 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/javascript-data-structure-algorithms-series-ep2-arrays</link>
			</item>
		
			<item>
				<title>Javascript Object Oriented simple form validation</title>
				<description>&lt;p&gt;Today I want to show you how to build a simple form validation with Object Oriented programming in Javascript.&lt;/p&gt;

&lt;h3&gt;Why Object Oriented&lt;/h3&gt;

&lt;p&gt;Object Oriented programming aim to provide a model of programming based on Objects where an Object has both behaviors state (data) and behavior (code). &lt;br&gt;
Therefore focus on Objects rather than actions and data rather than logic with that our advantages are a more clear modular structure, easier to maintain and modify since we can create more objects with small differences from the exiting ones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The core concepts&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Data Abstraction and Encapsulation&lt;/li&gt;
&lt;li&gt;Inheritance&lt;/li&gt;
&lt;li&gt;Polymorphism&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;OO form validation&lt;/h2&gt;

&lt;p&gt;Here&#39;s our simple form validation in javascript based on Object Oriented programming. &lt;br&gt;
Our scenario: validate fields when form is submitted.&lt;/p&gt;

&lt;p&gt;First things first... Let&#39;s create our class called &lt;code&gt;Validator&lt;/code&gt; and also create our constructor called as method &lt;code&gt;constructor&lt;/code&gt; which is responsible to setup our basic data.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;Javascript&quot;&gt;
;(function(window, undefined) {
  
  var Validator = {
    
    constructor: function(form, config) {
      this._elForm = form;
      this._els = config.fields || {};
    }
  
  }
  
})(window, undefined);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&#39;s create our initializer called &lt;code&gt;init&lt;/code&gt; and initialize the program adding a listener to the form using the info/data was passed to our constructor. &lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;Javascript&quot;&gt;
;(function(window, undefined) {
  
  var Validator = {
    
    constructor: function(form, config) {
      this._elForm = form;
      this._els = config.fields || {};
      
      this.init();
    },
    
    init: function() {
      this.addFormListener();
    },
    
    addFormListener: function() {
        var formSelector = this._elForm
          , elForm = document.querySelector(formSelector);
          
          elForm.addEventListener(&#39;submit&#39;, this.validate.bind(this), false);
    }
  
  }
  
})(window, undefined);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The method called &lt;code&gt;addFormListener&lt;/code&gt; does what it&#39;s named.. we add a listener to the form to when submitted trigger a method and also chain a method called &lt;code&gt;bind&lt;/code&gt; which call the method &lt;code&gt;this.validate&lt;/code&gt; with the context of the class instead of send the object clicked &lt;code&gt;form&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The example below we are going add the method to &lt;code&gt;validate&lt;/code&gt; which is responsible to test against the field requirement &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;empty&lt;/code&gt; or &lt;code&gt;maxlength&lt;/code&gt; and then add a CSS class to the input field.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;Javascript&quot;&gt;
;(function(window, undefined) {
  
  var Validator = {
    
    constructor: function(form, config) {
      this._elForm = form;
      this._els = config.fields || {};
      
      this.init();
    },
    
    init: function() {
      this.addFormListener();
    },
    
    addFormListener: function() {
        var formSelector = this._elForm
          , elForm = document.querySelector(formSelector);
          
          elForm.addEventListener(&#39;submit&#39;, this.validate.bind(this), false);
    },
    
    validate: function(e) {
      var elFields = this._els;
      
      for ( var field in elFields ) {
        var el = document.querySelector(field)
          , elVal = el.value;
          
        if ( elFields[field].require || elVal === &#39;&#39; || elVal.length &gt; elFields[field].maxlength ) {
          el.classList.add(&#39;invalid&#39;);
        }
      }
      
      e.preventDefault();
    }
  
  }
  
})(window, undefined);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We simply create a new object which are going to inherit directly from our class/object and call the constructor passing the &lt;code&gt;form ID&lt;/code&gt; and an Object containing an Object called &lt;code&gt;fields&lt;/code&gt; which contain all fields that need to be validate with our requirements &lt;code&gt;required&lt;/code&gt; and &lt;code&gt;maxlength&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;Javascript&quot;&gt;
var form1 = Object.create(Validator);
form1.constructor(&#39;#form1&#39;, {
  fields: {
    &#39;#fname&#39;: {
      required: true,
      maxlength: 20
    },
    &#39;#lname&#39;: {
      maxlength: 10
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a reference the HTML markup looks like this.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;html&quot;&gt;
&lt;form id=&quot;form1&quot;&gt;
    &lt;fieldset&gt;
        &lt;legend&gt;Person&lt;/legend&gt;
        &lt;p&gt;
            &lt;label for=&quot;fname&quot;&gt;First name:&lt;/label&gt;
            &lt;input type=&quot;text&quot; name=&quot;fname&quot; id=&quot;fname&quot; /&gt;
        &lt;/p&gt;
        &lt;p&gt;
            &lt;label for=&quot;lname&quot;&gt;Last name:&lt;/label&gt;
            &lt;input type=&quot;text&quot; name=&quot;fname&quot; id=&quot;lname&quot; /&gt;
        &lt;/p&gt;
        &lt;input type=&quot;submit&quot; name=&quot;submit&quot; class=&quot;submit&quot; value=&quot;Submit&quot; /&gt;
    &lt;/fieldset&gt;
&lt;/form&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we can use a different design pattern to just the &lt;code&gt;constructor&lt;/code&gt; method be accessible, but let&#39;s keep it simple. &lt;br&gt;
Also note that in ES6 this OO Approach are going to very clear on how to use the API.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
				<published>2014-08-25 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/javascript-object-oriented-simple-form-validation</link>
			</item>
		
			<item>
				<title>Ep.1 Data Structures and Algorithms with JS</title>
				<description>&lt;p&gt;I don&#39;t have officially a Computer Science degree.. But clearly nowadays you wont need a degree as engineer. You just need to be passionated to what you do and have that eager to learn and always evolve.&lt;/p&gt;

&lt;p&gt;That being said I have been always trying to learn and evolve to be better on what I do which I&#39;m passionate about so here&#39;s something else I&#39;m improving.&lt;/p&gt;

&lt;p&gt;Web applications has evolved to a much complex system and with that Developers/Engineers are being &amp;quot;forced&amp;quot; to solve problems (could be the other way around) applying concepts of Computer Science which before you would just see on systems/programs using languages such as C, C++, Java and so on.&lt;/p&gt;

&lt;p&gt;What I want to do here it&#39;s not just help me improve/evolve my knowledge also share the basics of Data Structures and Algorithms exploring some concepts with Javascript where what kind of Data Structure is more efficient than other or when certain Algorithm perform better than others.&lt;/p&gt;

&lt;p&gt;I&#39;m not a Computer Scientist and this Series of posts wont be very advanced but I&#39;m sure will be worthwhile.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
				<published>2014-08-06 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/javascript-data-structure-algorithms-series-ep1</link>
			</item>
		
			<item>
				<title>Speaking at Front in BH conference</title>
				<description>&lt;p&gt;Last weekend I spoke at &lt;a href=&quot;http://frontinbh.com.br/&quot; target=&quot;_blank&quot; title=&quot;Front in BH 2014&quot;&gt;Front in BH 2014&lt;/a&gt; (in Belo Horizonte - Br) the biggest conference for Front End developers in Brazil.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speakers and Conference staff&lt;/strong&gt;
&lt;div class=&quot;fluidImg&quot;&gt;
    &lt;img src=&quot;/assets/images/post-images/all-speakers-front-in-bh.jpg&quot; alt=&quot;All speakers at Front in BH 2014&quot;&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;I&#39;m going to start saying that the conference was amazing. The organization was incredibly great. The topic that each speaker spoke was very enjoyable and knowledgeable. &lt;br&gt;
There was attendees from 4 different countries and at least 3 speakers were foreign as well known companies like Liferay, Github, Opera, Globo.com, Avenue Code and more.&lt;/p&gt;

&lt;p&gt;The talks were from &amp;quot;&lt;code&gt;UI testing frameworks&lt;/code&gt;&amp;quot; &amp;quot;&lt;code&gt;Node.js&lt;/code&gt;&amp;quot; &amp;quot;&lt;code&gt;UX on Google Glass&lt;/code&gt;&amp;quot; &amp;quot;&lt;code&gt;Workflow for designers and developers&lt;/code&gt;&amp;quot; &amp;quot;&lt;code&gt;Polifylls&lt;/code&gt;&amp;quot; &amp;quot;&lt;code&gt;augmented reality on the Web&lt;/code&gt;&amp;quot; to more client-side/Javascript related topics.&lt;/p&gt;

&lt;h3&gt;My talk&lt;/h3&gt;

&lt;div class=&quot;fluidImg&quot;&gt;
    &lt;img src=&quot;/assets/images/post-images/myself-speaking.jpg&quot; alt=&quot;Michael Lancaster on beyond the web with Nodewebkit&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
The title of my talk is/was &lt;code&gt;Beyond the Web&lt;/code&gt; where I exploited the difficulties of a Web developer on build native Apps for desktop or mobile (the talk was focused on desktop) and showed how this is easily possible nowadays with many App runtimes like Nodewebkit.&lt;/p&gt;

&lt;p&gt;I was a bit nervous but I was more excited to present a nice content to the attendees and show them new possibilities therefore I was prepared and happy to be there speaking about that topic to a such good crowd of people wanting to learn new things.&lt;/p&gt;

&lt;p&gt;You can check out my slides on &lt;a href=&quot;https://speakerdeck.com/weblancaster/beyond-the-web-with-nodewebkit&quot; title=&quot;Beyond the Web with Nodewebkit by Michael Lancaster&quot; target=&quot;_blank&quot;&gt;Speaker deck&lt;/a&gt; or below.&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;015874f0f7460131223b568bbdf7fd4f&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br&gt;
I had a wonderful experience. Now. I hope do more talks. &lt;br&gt;
Cheers!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attendees (the ones that stayed until the end), Speakers and conference staff&lt;/strong&gt;
&lt;div class=&quot;fluidImg&quot;&gt;
    &lt;img src=&quot;/assets/images/post-images/everybody.jpg&quot; alt=&quot;Attendees and speakers&quot;&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
				<published>2014-07-30 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/speaking-at-front-in-bh-conference-2014</link>
			</item>
		
			<item>
				<title>Soundnode App - Soundcloud for desktop released</title>
				<description>&lt;p&gt;Soundnode App - The Soundcloud for desktop beta released! &lt;br&gt;
That being said you download the best version to your computer &lt;a href=&quot;http://www.soundnodeapp.com&quot; target=&quot;_blank&quot; title=&quot;Soundnode App - Soundcloud for desktop&quot;&gt;here&lt;/a&gt; and &lt;strong&gt;out of the box&lt;/strong&gt; click, authenticate your user and start to listen to songs.&lt;/p&gt;

&lt;div class=&quot;fluidImg&quot;&gt;
    &lt;img src=&quot;/assets/images/post-images/soundenode-0-1-0.png&quot; alt=&quot;Sublime Text 3 jump to definition/method&quot;&gt;
&lt;/div&gt;

&lt;h2&gt;Current Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Search&lt;/li&gt;
&lt;li&gt;Keyboard shortcuts (not native for this release)
Play/Pause &lt;code&gt;command+return&lt;/code&gt; or &lt;code&gt;space&lt;/code&gt;, Prev &lt;code&gt;command+left&lt;/code&gt;, Next &lt;code&gt;command+right&lt;/code&gt;, Volume down &lt;code&gt;command+down&lt;/code&gt;, Volume up &lt;code&gt;command+up&lt;/code&gt;, Cheat-sheet &lt;code&gt;shift+?&lt;/code&gt; (ps: use ctrl for Windows/PC user)&lt;/li&gt;
&lt;li&gt;Listen to songs from your Streams, Likes, Tracks or Playlists&lt;/li&gt;
&lt;li&gt;Automatic update available notification&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There&#39;s still known minor bugs which you can track on the &lt;a href=&quot;https://github.com/Soundnode/soundnode-app/issues&quot; target=&quot;_blank&quot; title=&quot;Soundnode App issues list&quot;&gt;issues list&lt;/a&gt; &lt;br&gt;
and lots of features to come.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
				<published>2014-06-19 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/soundcloud-for-desktop-win-mac-released-soundnode-app</link>
			</item>
		
			<item>
				<title>Soundnode App - Soundcloud for Desktop developer release</title>
				<description>&lt;p&gt;Last night I decided to release as beta version for Developer a project I have been working in the last week and make available as Open Source.&lt;/p&gt;

&lt;h2&gt;Intro..&lt;/h2&gt;

&lt;p&gt;Three years ago I started work as a developer and one of the things I have been using since then is &lt;a href=&quot;http://www.soundcloud.com&quot; target=&quot;_blank&quot; title=&quot;Soundcloud&quot;&gt;Soundcloud&lt;/a&gt; I used to use their desktop application till the day they stopped support it. to know more about it &lt;a href=&quot;http://blog.soundcloud.com/2011/01/06/desktop/&quot; target=&quot;_blank&quot; title=&quot;Soundcloud desktop support&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Turns out that I miss my native shortcuts while listening to Soundcloud on the web browser.. Therefore I decided to solve my problem but also release as open source so contributors can suggest &amp;quot;new&amp;quot; features.. and here it is.&lt;/p&gt;

&lt;h2&gt;Soundnode App&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.soundnodeapp.com&quot; target=&quot;_blank&quot; title=&quot;Soundnode App - Soundcloud for desktop&quot;&gt;Soundnode App&lt;/a&gt; is a open source project to support Soundcloud for desktop (Windows/Mac) built with Node-Webkit, Node.js Angular.js and consuming Soundcloud API.&lt;/p&gt;

&lt;h2&gt;Why beta Developer release&lt;/h2&gt;

&lt;p&gt;I built the core but I have been working on other projects in parallel and I still want to release Soundnode App as fast as I can to the public so I thought that the community would help to get this project going faster than one man.&lt;/p&gt;

&lt;p&gt;The project is on the Github &lt;a href=&quot;https://github.com/Soundnode/soundnode-app&quot; target=&quot;_blank&quot; title=&quot;Soundnode App - Soundcloud for desktop&quot;&gt;Soundnode App&lt;/a&gt;.
Constructive (or not) feedback is always welcome.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
				<published>2014-05-13 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/soundnode-soundcloud-for-desktop-dev-release</link>
			</item>
		
			<item>
				<title>Sublime Text 3 jump to definition/method</title>
				<description>&lt;p&gt;Quick blog post to show you how to easily add the feature goto or jump to definition on Sublime text 3 with custom shortcut&lt;/p&gt;

&lt;div class=&quot;fluidImg&quot;&gt;
    &lt;img src=&quot;/assets/images/post-images/st3-goto-definition.gif&quot; alt=&quot;Sublime Text 3 jump to definition/method&quot;&gt;
&lt;/div&gt;

&lt;h2&gt;Simple steps&lt;/h2&gt;

&lt;p&gt;In Sublime Text 3
&lt;pre&gt;&lt;code data-language=&quot;HTML&quot;&gt;
Sublime Text -&amp;gt; Preferences -&amp;gt; Key Bindings - User
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;You can add any shortcut you want since it&#39;s not in use already so you don&#39;t overwrite the default shortcut settings.
&lt;br&gt;
In my case I decided to use &amp;quot;shift+command+m&amp;quot;..as below.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;Javascript&quot;&gt;
[
    { &quot;keys&quot;: [&quot;shift+command+m&quot;], &quot;command&quot;: &quot;goto_definition&quot; }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save it and you are done. (ps: if did not work restart your Sublime Text 3).&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;
</description>
				<published>2014-03-03 00:00:00 -0600</published>
				<link>http://bymichaellancaster.com//blog/sublime-text-3-jump-to-definition-custom-shortcut</link>
			</item>
		
	</channel>
</rss>
