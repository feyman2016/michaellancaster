<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
	<channel>
		<title>Michael Lancaster</title>
		<description>Front End Developer/Web Engineer</description>
		<link>http://bymichaellancaster.com/</link>
		
			<item>
				<title>Ep.2 Data Structures and Algorithms with JS - Arrays</title>
				<description>&lt;div class=&quot;intro-series&quot;&gt;
    This post is part of the series: Data Structures and Algorithms with JS therefore before continue to read I suggest you &lt;a href=&quot;/blog/javascript-data-structure-algorithms-series-ep1/&quot; title=&quot;Data Structures and Algorithms Ep.1&quot;&gt;the introduction&lt;/a&gt; to this series of posts if you haven&#39;t read yet. thanks.
&lt;/div&gt;

&lt;h3&gt;Brushing up on Arrays&lt;/h3&gt;

&lt;p&gt;This is the second post on the series of Data Structure and Algorithms with JS - focused on Array. &lt;br&gt;
Notice that this is a overview/start point for those that need to brush up your knowledge on Arrays where we are going to be using in the future on more complex topics.&lt;/p&gt;

&lt;p&gt;Every programming language has sort of a built-in Array where you can access data via index and most of these languages has a strict type of Array which would be integer BUT not in Javascript, where Array is also an object which when integers used for index they are converted to strings. &lt;br&gt;
And Array being an object means that it contain properties and functions you can use out of the box.&lt;/p&gt;

&lt;p&gt;In Javascript we don&#39;t need to define the length of our Array as in C++ and we can have different types of values therefore making Arrays in Javascript flexible and easier to manipulate than other classic languages.&lt;/p&gt;

&lt;h3&gt;Creating Arrays&lt;/h3&gt;

&lt;p&gt;Let&#39;s create an Array with length zero:&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr = []; // arr.length = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&#39;s create an Array with some elements defined and length equal 5:&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]; // arr.length = 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Array with different types would look like:&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr = [&#39;michael&#39;, &#39;lancaster&#39;, 23, true, null];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to verify if an object is an Array you can use the method &lt;code&gt;Arrays.isArray()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;];
Array.isArray(arr); // true

var str = &#39;Michael Lancaster&#39;;
Array.isArray(str); // false
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Accessing&lt;/h3&gt;

&lt;p&gt;Use the operator &lt;code&gt;[]&lt;/code&gt; passing the index to access the value/element.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;];
console.log( arr[2] ) // c
console.log( arr[4] ) // e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also iterating through an Array sequentially&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr = [1, 2, 3, 4, 5];
for ( var i = 0; i &lt; arr.length; i++ ) {
    console.log(&#39;Index: &#39; + i, &#39;Value: &#39; + arr[i])
}

// outputs
// Index: 0 Value: 1
// Index: 1 Value: 2
// Index: 2 Value: 3
// Index: 3 Value: 4
// Index: 4 Value: 5 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice on the sample above that the loop is controlled by the length of the Array &lt;code&gt;arr.length&lt;/code&gt; since in Javascript Array is an object and it can be modified so we guarantee that we have gone through all indexes.&lt;/p&gt;

&lt;h3&gt;Array from String&lt;/h3&gt;

&lt;p&gt;We can also create Arrays from strings defining a delimiter (&lt;code&gt;space&lt;/code&gt; in my case).&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var str = &#39;Michael lancaster 23 and developer&#39;;
var arr = str.split(&#39; &#39;); // [&quot;Michael&quot;, &quot;lancaster&quot;, &quot;23&quot;, &quot;and&quot;, &quot;developer&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Object Copy&lt;/h3&gt;

&lt;p&gt;There&#39;s several ways of Object copy &lt;code&gt;Shallow Copy&lt;/code&gt;, &lt;code&gt;Deep Copy&lt;/code&gt; and &lt;code&gt;Lazy Copy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Shallow Copy&lt;/code&gt; is when you assign &amp;quot;A = B&amp;quot; which has the disadvantage of when modifying Array B the Array A will also be modified with same values/elements as B no matter what. Here&#39;s an example of &lt;code&gt;Shallow Copy&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
var arr2 = arr1;
console.log(arr2) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
arr1.push(&#39;michael&#39;);
console.log(arr1) // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;michael&quot;]
console.log(arr2) // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;michael&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we pushed a new value to the end of &lt;code&gt;arr1&lt;/code&gt; this change is reflected into &lt;code&gt;arr2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A better way to do a copy would be the &lt;code&gt;Deep Copy&lt;/code&gt; which one don&#39;t depend on another but it&#39;s a slower operation. &lt;br&gt;
Here&#39;s an example of &lt;code&gt;Deep Copy&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var arr1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
var arr2 = [];

function deepCopy(arr1, arr2) {
    for ( var i = 0; i &lt; arr1.length; i++ ) {
        arr2[i] = arr1[i];
    }
}

deepCopy(arr1, arr2);

console.log(arr1) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
console.log(arr2) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
arr1.push(&#39;michael&#39;)
console.log(arr1) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;michael&quot;] 
console.log(arr2) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example above you can notice that the value pushed to &lt;code&gt;arr1&lt;/code&gt; do not reflected into &lt;code&gt;arr2&lt;/code&gt;.
Now. &lt;code&gt;Lazy Copy&lt;/code&gt; is the combination of both operations.&lt;/p&gt;

&lt;h3&gt;Array traversal and mutation operations&lt;/h3&gt;

&lt;p&gt;Array is list-like and also a constructor that contains prototype methods to perform traversal and mutation operations such as:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Searching a value&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Searching a value can be done with the method &lt;code&gt;Array.prototype.indexOf()&lt;/code&gt; which perform an operation of comparing with &lt;code&gt;===&lt;/code&gt; the value passed to the function is found and return it&#39;s index position otherwise will return -1.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var languages = [&#39;Javascript&#39;, &#39;Java&#39;, &#39;C++&#39;, &#39;Go&#39;];
languages.indexOf(&#39;C++&#39;) // 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that this search operation using the &lt;code&gt;indexOf&lt;/code&gt; will return the just the position of the &lt;code&gt;first&lt;/code&gt; value encountered in the Array.
You can also the &#39;lastIndexOf&#39; which will do the same but return the position of the last value encountered.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var languages = [&#39;Javascript&#39;, &#39;Java&#39;, &#39;C++&#39;, &#39;Go&#39;, &#39;Lua&#39;, &#39;C++&#39;];
languages.lastIndexOf(&#39;C++&#39;) // 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;String from Arrays&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There&#39;s two methods to return a string representation from an Array &lt;code&gt;Array.prototype.join()&lt;/code&gt; and &lt;code&gt;Array.prototype.toString()&lt;/code&gt;. &lt;br&gt;
It&#39;s automatically delimited by commas but you can pass your delimiter on the method. Here&#39;s an example using &lt;code&gt;join&lt;/code&gt; and &lt;code&gt;toString&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var languages = [&#39;Javascript&#39;, &#39;Java&#39;, &#39;C++&#39;, &#39;Go&#39;, &#39;Lua&#39;];
languages.join(); // &quot;Javascript,Java,C++,Go,Lua&quot;
languages.toString(); // &quot;Javascript,Java,C++,Go,Lua&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;New Array from Array&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There&#39;s also multiple methods to create an Array from another Array &lt;code&gt;Array.prototype.concat()&lt;/code&gt; and &lt;code&gt;Array.prototype.splice()&lt;/code&gt;.
The &lt;code&gt;Array.prototype.concat()&lt;/code&gt; method allow you to pass one or more Arrays/Values as argument to create a new Array.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var cats = [&#39;Abyssinian&#39;, &#39;Persian&#39;, &#39;Peterbald&#39;];
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
var birds = [&#39;Malleefowl&#39;, &#39;Maleo&#39;];

var petAnimals = cats.concat(dogs, birds);
console.log(petAnimals); // [&quot;Abyssinian&quot;, &quot;Persian&quot;, &quot;Peterbald&quot;, &quot;Alaskan Klee Kai&quot;, &quot;American Bulldog&quot;, &quot;Pitbull&quot;, &quot;Malleefowl&quot;, &quot;Maleo&quot;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Array.prototype.splice()&lt;/code&gt; takes two arguments (minimum) or more. You can also use to add new elements to the middle of an Array. &lt;br&gt;
They are going to be used to mutate the Array therefore it can add new elements and/or remove old elements.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
var removedDogs = dogs.splice(2, 0, &quot;Bull Terrier&quot;);
console.log(dogs); // [&quot;Alaskan Klee Kai&quot;, &quot;American Bulldog&quot;, &quot;Bull Terrier&quot;, &quot;Pitbull&quot;]
console.log(removedDogs); // [] empty since no values/elements were removed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My arguments are &lt;code&gt;.splice(from index, remove, enter new element)&lt;/code&gt; so looking at my arguments we have insert a new value &lt;code&gt;Bull terrier&lt;/code&gt; remove &lt;code&gt;0&lt;/code&gt; and start at index &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
var removedDogs = dogs.splice(1, 1, &quot;Bull Terrier&quot;);
console.log(dogs); // [&quot;Alaskan Klee Kai&quot;, &quot;Bull Terrier&quot;, &quot;Pitbull&quot;]
console.log(removedDogs); // [&quot;American Bulldog&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above I said .splice &lt;code&gt;from index 1, remove index 1, insert &#39;Bull Terrier&#39;&lt;/code&gt; so now the variable &lt;code&gt;removedDogs&lt;/code&gt; contain the item removed from the index defined which in this case is &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Adding elements/values to an Array&lt;/h3&gt;

&lt;p&gt;So instead of use the length of an Array to add an element to the end or even harder to add an element to the beginning of an Array which you would have to iterate through the Array and shift the index from the end towards start.
Anyway. Let&#39;s keep it simple with these two methods to add new elements to an Array &lt;code&gt;Array.prototype.push()&lt;/code&gt; add to the end of an Array and &lt;code&gt;Array.prototype.unshift()&lt;/code&gt; add to the beginning of an Array (Both methods accept multiple values/elements passed as arguments). &lt;br&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;push()&lt;/code&gt; function/method add a value/element to the Array.&lt;br&gt;
Here&#39;s an example.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
console.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];

dogs.push(&#39;Bull Terrier&#39;);
console.log(dogs); // [&quot;Alaskan Klee Kai&quot;, &quot;American Bulldog&quot;, &quot;Pitbull&quot;, &quot;Bull Terrier&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;unshift()&lt;/code&gt; function/method add a value/element to the Array. &lt;br&gt;
Here&#39;s an example.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
console.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];

dogs.unshift(&#39;American Bulldog&#39;);
console.log(dogs); // [&quot;American Bulldog&quot;, &quot;Alaskan Klee Kai&quot;, &quot;American Bulldog&quot;, &quot;Pitbull&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Removing elements/values from an Array&lt;/h3&gt;

&lt;p&gt;There&#39;s also two methods to remove values/elements from an Array where you can remove the beginning using &lt;code&gt;Array.prototype.shift()&lt;/code&gt; or if you want to remove from the end you can use &lt;code&gt;Array.prototype.pop()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here&#39;s an example to remove the first element using the &lt;code&gt;Array.prototype.shift()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
console.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];

dogs.shift();
console.log(dogs); // [ &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here&#39;s an example to remove the last element using the &lt;code&gt;Array.prototype.pop()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
console.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];

dogs.pop();
console.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;];
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Ordering/Sorting elements&lt;/h3&gt;

&lt;p&gt;There&#39;s also two ways to order/sort an Array &lt;code&gt;Array.prototype.reverse()&lt;/code&gt; which are going to do what says and &lt;code&gt;Array.prototype.sort()&lt;/code&gt; to put elements in order but in this case the method &lt;code&gt;Array.prototype.sort()&lt;/code&gt; turns every value in strings so if you have numbers you are going to need to pass a function and order the numbers.&lt;/p&gt;

&lt;p&gt;Here&#39;s an example of &lt;code&gt;Array.prototype.reverse()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];
console.log(dogs); // [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];

dogs.reverse();
console.log(dogs); // [&quot;Pitbull&quot;, &quot;American Bulldog&quot;, &quot;Alaskan Klee Kai&quot;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&#39;s an example of &lt;code&gt;Array.prototype.sort()&lt;/code&gt; with strings.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var alphabet = [&#39;a&#39;, &#39;b&#39;, &#39;e&#39;, &#39;z&#39;, &#39;f&#39;, &#39;c&#39;];
console.log(alphabet); // [&#39;a&#39;, &#39;b&#39;, &#39;e&#39;, &#39;z&#39;, &#39;f&#39;, &#39;c&#39;]

alphabet.sort();
console.log(alphabet); // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;e&quot;, &quot;f&quot;, &quot;z&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here&#39;s an example of how to pass a function to &lt;code&gt;Array.prototype.sort()&lt;/code&gt; to order numbers.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
console.log(nums) // [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]

nums.sort(function(n1, n2) {
  return n1 - n2;
});

console.log(nums) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Iterator methods&lt;/h3&gt;

&lt;p&gt;The iterator methods/functions are going to be applied for each value/element and/or returning an new array, groups of values or just a value as result of the operation.&lt;/p&gt;

&lt;p&gt;First let&#39;s talk about the &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; which receive a callback as argument and this callback has three arguments respectively &lt;code&gt;element&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;array being traversed&lt;/code&gt; going to iterate on ascending order. &lt;br&gt;
Here&#39;s an example using &lt;code&gt;Array.prototype.forEach()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];

dogs.forEach(function(value, index, array) {
    console.log(&#39;Dog breed: &#39; + value + &#39;, position: &#39; + index);
});

// outputs
// Dog breed: Alaskan Klee Kai, position: 0
// Dog breed: American Bulldog, position: 1
// Dog breed: Pitbull, position: 2 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it&#39;s time to show the &lt;code&gt;Array.prototype.every()&lt;/code&gt; which test a condition against each element and return true in case all elements meet the condition or false. &lt;br&gt;
Also receives a callback as argument and this callback has three arguments respectively &lt;code&gt;element&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;array being traversed&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

var meetCondition = nums.every(function(element, index, array) {
    return (element &lt; 11);
});

console.log(meetCondition) // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code above all elements are tested against the condition to check if they are less than 11 in our case all elements are less than 11 so the result returned is true.&lt;/p&gt;

&lt;p&gt;The method/function &lt;code&gt;Array.prototype.some()&lt;/code&gt; works almost the same way as &lt;code&gt;Array.prototype.every()&lt;/code&gt; but in this case if at least one element meet the condition would return true.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]

var meetCondition = nums.some(function(element, index, array) {
    return (element === 11);
});

console.log(meetCondition) // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Array.prototype.reduce()&lt;/code&gt; method run a function against an accumulator for each element until reduce to one single value.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var nums = [100, 200, 300, 400];

nums.reduce(function(a, b) {
    console.log(&#39;a&#39;, a);
    console.log(&#39;b&#39;, b);
    console.log(&#39;result accumulated is: &#39;, a + b);
    return a + b;
});

// output

// a 100
// b 200
// result accumulated is: 300
// a 300
// b 300
// result accumulated is: 600
// a 600
// b 400
// result accumulated is: 1000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see our method &lt;code&gt;Array.prototype.reduce()&lt;/code&gt; receive a function with two arguments &lt;code&gt;previous value&lt;/code&gt; and &lt;code&gt;current value&lt;/code&gt; a + b which the result turns into the &lt;code&gt;accumulator&lt;/code&gt; a and then calculate this result against the next in line which is b and so on so forth. &lt;br&gt;
You can also pass &lt;code&gt;initial value&lt;/code&gt; where it&#39;s going to turn into the &lt;code&gt;previous value&lt;/code&gt; and the original &lt;code&gt;previous value&lt;/code&gt; turn into &lt;code&gt;current value&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var nums = [100, 200, 300, 400];

nums.reduce(function(a, b) {
    console.log(&#39;a&#39;, a);
    console.log(&#39;b&#39;, b);
    console.log(&#39;result accumulated is: &#39;, a + b);
    return a + b;
}, 200);

// output

// a 200
// b 100
// result accumulated is: 300
// a 300
// b 200
// result accumulated is: 500
// a 500
// b 300
// result accumulated is: 800
// a 800
// b 400
// result accumulated is: 1200
// 1200
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&#39;s also the possibility to use &lt;code&gt;Array.prototype.reduceRight()&lt;/code&gt; which is going to perform the function on each element of the array from the end to start.&lt;/p&gt;

&lt;p&gt;the &lt;code&gt;Array.prototype.map()&lt;/code&gt; method are going to return a new Array and works the same way &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; method works but return a new Array as the difference between the two methods.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var dogs = [&#39;Alaskan Klee Kai&#39;, &#39;American Bulldog&#39;, &#39;Pitbull&#39;];

var newArr = dogs.map(function(value, index, array) {
    console.log(&#39;Dog breed: &#39; + value + &#39;, position: &#39; + index);
    return value;
});

console.log(newArr);

// outputs
// Dog breed: Alaskan Klee Kai, position: 0
// Dog breed: American Bulldog, position: 1
// Dog breed: Pitbull, position: 2 

// [&quot;Alaskan Klee Kai&quot;, &quot;American Bulldog&quot;, &quot;Pitbull&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Array.prototype.filter()&lt;/code&gt; method work almost the same way as &lt;code&gt;Array.prototype.every()&lt;/code&gt; but instead return an Array with the elements that met the condition &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
var nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

var numsLessThan5 = nums.filter(function(element, index, array) {
    return (element &lt; 5);
});

console.log(numsLessThan5) // [0, 1, 2, 3, 4] 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;That&#39;s it&lt;/h3&gt;

&lt;p&gt;I hope you have brush up on your Array knowledge being aware of we can use and will use more complex approaches applying some of the topics I covered on this post. &lt;br&gt;&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;* Don&#39;t be shy. I appreciate any improvement and/or fix.&lt;/small&gt;&lt;/p&gt;
</description>
				<published>2014-09-03 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/javascript-data-structure-algorithms-series-ep2-arrays</link>
			</item>
		
			<item>
				<title>Javascript Object Oriented simple form validation</title>
				<description>&lt;p&gt;Today I want to show you how to build a simple form validation with Object Oriented programming in Javascript.&lt;/p&gt;

&lt;h3&gt;Why Object Oriented&lt;/h3&gt;

&lt;p&gt;Object Oriented programming aim to provide a model of programming based on Objects where an Object has both behaviors state (data) and behavior (code). &lt;br&gt;
Therefore focus on Objects rather than actions and data rather than logic with that our advantages are a more clear modular structure, easier to maintain and modify since we can create more objects with small differences from the exiting ones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The core concepts&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Data Abstraction and Encapsulation&lt;/li&gt;
&lt;li&gt;Inheritance&lt;/li&gt;
&lt;li&gt;Polymorphism&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;OO form validation&lt;/h2&gt;

&lt;p&gt;Here&#39;s our simple form validation in javascript based on Object Oriented programming. &lt;br&gt;
Our scenario: validate fields when form is submitted.&lt;/p&gt;

&lt;p&gt;First things first... Let&#39;s create our class called &lt;code&gt;Validator&lt;/code&gt; and also create our constructor called as method &lt;code&gt;constructor&lt;/code&gt; which is responsible to setup our basic data.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;Javascript&quot;&gt;
;(function(window, undefined) {
  
  var Validator = {
    
    constructor: function(form, config) {
      this._elForm = form;
      this._els = config.fields || {};
    }
  
  }
  
})(window, undefined);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&#39;s create our initializer called &lt;code&gt;init&lt;/code&gt; and initialize the program adding a listener to the form using the info/data was passed to our constructor. &lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;Javascript&quot;&gt;
;(function(window, undefined) {
  
  var Validator = {
    
    constructor: function(form, config) {
      this._elForm = form;
      this._els = config.fields || {};
      
      this.init();
    },
    
    init: function() {
      this.addFormListener();
    },
    
    addFormListener: function() {
        var formSelector = this._elForm
          , elForm = document.querySelector(formSelector);
          
          elForm.addEventListener(&#39;submit&#39;, this.validate.bind(this), false);
    }
  
  }
  
})(window, undefined);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The method called &lt;code&gt;addFormListener&lt;/code&gt; does what it&#39;s named.. we add a listener to the form to when submitted trigger a method and also chain a method called &lt;code&gt;bind&lt;/code&gt; which call the method &lt;code&gt;this.validate&lt;/code&gt; with the context of the class instead of send the object clicked &lt;code&gt;form&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The example below we are going add the method to &lt;code&gt;validate&lt;/code&gt; which is responsible to test against the field requirement &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;empty&lt;/code&gt; or &lt;code&gt;maxlength&lt;/code&gt; and then add a CSS class to the input field.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;Javascript&quot;&gt;
;(function(window, undefined) {
  
  var Validator = {
    
    constructor: function(form, config) {
      this._elForm = form;
      this._els = config.fields || {};
      
      this.init();
    },
    
    init: function() {
      this.addFormListener();
    },
    
    addFormListener: function() {
        var formSelector = this._elForm
          , elForm = document.querySelector(formSelector);
          
          elForm.addEventListener(&#39;submit&#39;, this.validate.bind(this), false);
    },
    
    validate: function(e) {
      var elFields = this._els;
      
      for ( var field in elFields ) {
        var el = document.querySelector(field)
          , elVal = el.value;
          
        if ( elFields[field].require || elVal === &#39;&#39; || elVal.length &gt; elFields[field].maxlength ) {
          el.classList.add(&#39;invalid&#39;);
        }
      }
      
      e.preventDefault();
    }
  
  }
  
})(window, undefined);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We simply create a new object which are going to inherit directly from our class/object and call the constructor passing the &lt;code&gt;form ID&lt;/code&gt; and an Object containing an Object called &lt;code&gt;fields&lt;/code&gt; which contain all fields that need to be validate with our requirements &lt;code&gt;required&lt;/code&gt; and &lt;code&gt;maxlength&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;Javascript&quot;&gt;
var form1 = Object.create(Validator);
form1.constructor(&#39;#form1&#39;, {
  fields: {
    &#39;#fname&#39;: {
      required: true,
      maxlength: 20
    },
    &#39;#lname&#39;: {
      maxlength: 10
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a reference the HTML markup looks like this.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;html&quot;&gt;
&lt;form id=&quot;form1&quot;&gt;
    &lt;fieldset&gt;
        &lt;legend&gt;Person&lt;/legend&gt;
        &lt;p&gt;
            &lt;label for=&quot;fname&quot;&gt;First name:&lt;/label&gt;
            &lt;input type=&quot;text&quot; name=&quot;fname&quot; id=&quot;fname&quot; /&gt;
        &lt;/p&gt;
        &lt;p&gt;
            &lt;label for=&quot;lname&quot;&gt;Last name:&lt;/label&gt;
            &lt;input type=&quot;text&quot; name=&quot;fname&quot; id=&quot;lname&quot; /&gt;
        &lt;/p&gt;
        &lt;input type=&quot;submit&quot; name=&quot;submit&quot; class=&quot;submit&quot; value=&quot;Submit&quot; /&gt;
    &lt;/fieldset&gt;
&lt;/form&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we can use a different design pattern to just the &lt;code&gt;constructor&lt;/code&gt; method be accessible, but let&#39;s keep it simple. &lt;br&gt;
Also note that in ES6 this OO Approach are going to very clear on how to use the API.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
				<published>2014-08-25 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/javascript-object-oriented-simple-form-validation</link>
			</item>
		
			<item>
				<title>Ep.1 Data Structures and Algorithms with JS</title>
				<description>&lt;p&gt;I don&#39;t have officially a Computer Science degree.. But clearly nowadays you wont need a degree as engineer. You just need to be passionated to what you do and have that eager to learn and always evolve.&lt;/p&gt;

&lt;p&gt;That being said I have been always trying to learn and evolve to be better on what I do which I&#39;m passionated about.&lt;/p&gt;

&lt;p&gt;Anyway. Web applications has evolved to a much complex system and with that Developers/Engineers are being &amp;quot;forced&amp;quot; to solve problems (could be the other way around) applying concepts of Computer Science which before you would just see on systems/programs using languages such as C, C++, Java and so on.&lt;/p&gt;

&lt;p&gt;What I want to do here it&#39;s not just help me improve/evolve my knowledge also share the basics of Data Structures and Algorithms exploring some concepts with Javascript where what kind of Data Structure is more efficient than other or when certain Algorithm perform better than others.&lt;/p&gt;

&lt;p&gt;I&#39;m not a Computer Scientist and this Series of posts wont be very advanced but I&#39;m sure will be worthwhile.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;* the mainly inspiration for this series is based on the book &lt;a href=&quot;http://www.amazon.com/Structures-Algorithms-JavaScript-Michael-McMillan/dp/1449364934/ref=sr_1_1?ie=UTF8&amp;qid=1407385377&amp;sr=8-1&amp;keywords=data+structures+and+algorithms+in+javascript&quot; title=&quot;Data Structures and Algorithms with JavaScript&quot; target=&quot;_blank&quot;&gt;Data Structures and Algorithms with JavaScript&lt;/a&gt;, articles/posts and videos around the Web.&lt;/small&gt;&lt;/p&gt;
</description>
				<published>2014-08-06 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/javascript-data-structure-algorithms-series-ep1</link>
			</item>
		
			<item>
				<title>Speaking at Front in BH conference</title>
				<description>&lt;p&gt;Last weekend I spoke at &lt;a href=&quot;http://frontinbh.com.br/&quot; target=&quot;_blank&quot; title=&quot;Front in BH 2014&quot;&gt;Front in BH 2014&lt;/a&gt; (in Belo Horizonte - Br) the biggest conference for Front End developers in Brazil.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speakers and Conference staff&lt;/strong&gt;
&lt;div class=&quot;fluidImg&quot;&gt;
    &lt;img src=&quot;/assets/images/post-images/all-speakers-front-in-bh.jpg&quot; alt=&quot;All speakers at Front in BH 2014&quot;&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;I&#39;m going to start saying that the conference was amazing. The organization was incredibly great. The topic that each speaker spoke was very enjoyable and knowledgeable. &lt;br&gt;
There was attendees from 4 different countries and at least 3 speakers were foreign as well known companies like Liferay, Github, Opera, Globo.com, Avenue Code and more.&lt;/p&gt;

&lt;p&gt;The talks were from &amp;quot;&lt;code&gt;UI testing frameworks&lt;/code&gt;&amp;quot; &amp;quot;&lt;code&gt;Node.js&lt;/code&gt;&amp;quot; &amp;quot;&lt;code&gt;UX on Google Glass&lt;/code&gt;&amp;quot; &amp;quot;&lt;code&gt;Workflow for designers and developers&lt;/code&gt;&amp;quot; &amp;quot;&lt;code&gt;Polifylls&lt;/code&gt;&amp;quot; &amp;quot;&lt;code&gt;augmented reality on the Web&lt;/code&gt;&amp;quot; to more client-side/Javascript related topics.&lt;/p&gt;

&lt;h3&gt;My talk&lt;/h3&gt;

&lt;div class=&quot;fluidImg&quot;&gt;
    &lt;img src=&quot;/assets/images/post-images/myself-speaking.jpg&quot; alt=&quot;Michael Lancaster on beyond the web with Nodewebkit&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
The title of my talk is/was &lt;code&gt;Beyond the Web&lt;/code&gt; where I exploited the difficulties of a Web developer on build native Apps for desktop or mobile (the talk was focused on desktop) and showed how this is easily possible nowadays with many App runtimes like Nodewebkit.&lt;/p&gt;

&lt;p&gt;I was a bit nervous but I was more excited to present a nice content to the attendees and show them new possibilities therefore I was prepared and happy to be there speaking about that topic to a such good crowd of people wanting to learn new things.&lt;/p&gt;

&lt;p&gt;You can check out my slides on &lt;a href=&quot;https://speakerdeck.com/weblancaster/beyond-the-web-with-nodewebkit&quot; title=&quot;Beyond the Web with Nodewebkit by Michael Lancaster&quot; target=&quot;_blank&quot;&gt;Speaker deck&lt;/a&gt; or below.&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;015874f0f7460131223b568bbdf7fd4f&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br&gt;
I had a wonderful experience. Now. I hope do more talks. &lt;br&gt;
Cheers!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attendees (the ones that stayed until the end), Speakers and conference staff&lt;/strong&gt;
&lt;div class=&quot;fluidImg&quot;&gt;
    &lt;img src=&quot;/assets/images/post-images/everybody.jpg&quot; alt=&quot;Attendees and speakers&quot;&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
				<published>2014-07-30 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/speaking-at-front-in-bh-conference-2014</link>
			</item>
		
			<item>
				<title>Soundnode App - Soundcloud for desktop released</title>
				<description>&lt;p&gt;Soundnode App - The Soundcloud for desktop beta released! &lt;br&gt;
That being said you download the best version to your computer &lt;a href=&quot;http://www.soundnodeapp.com&quot; target=&quot;_blank&quot; title=&quot;Soundnode App - Soundcloud for desktop&quot;&gt;here&lt;/a&gt; and &lt;strong&gt;out of the box&lt;/strong&gt; click, authenticate your user and start to listen to songs.&lt;/p&gt;

&lt;div class=&quot;fluidImg&quot;&gt;
    &lt;img src=&quot;/assets/images/post-images/soundenode-0-1-0.png&quot; alt=&quot;Sublime Text 3 jump to definition/method&quot;&gt;
&lt;/div&gt;

&lt;h2&gt;Current Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Search&lt;/li&gt;
&lt;li&gt;Keyboard shortcuts (not native for this release)
Play/Pause &lt;code&gt;command+return&lt;/code&gt; or &lt;code&gt;space&lt;/code&gt;, Prev &lt;code&gt;command+left&lt;/code&gt;, Next &lt;code&gt;command+right&lt;/code&gt;, Volume down &lt;code&gt;command+down&lt;/code&gt;, Volume up &lt;code&gt;command+up&lt;/code&gt;, Cheat-sheet &lt;code&gt;shift+?&lt;/code&gt; (ps: use ctrl for Windows/PC user)&lt;/li&gt;
&lt;li&gt;Listen to songs from your Streams, Likes, Tracks or Playlists&lt;/li&gt;
&lt;li&gt;Automatic update available notification&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There&#39;s still known minor bugs which you can track on the &lt;a href=&quot;https://github.com/Soundnode/soundnode-app/issues&quot; target=&quot;_blank&quot; title=&quot;Soundnode App issues list&quot;&gt;issues list&lt;/a&gt; &lt;br&gt;
and lots of features to come.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
				<published>2014-06-19 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/soundcloud-for-desktop-win-mac-released-soundnode-app</link>
			</item>
		
			<item>
				<title>Soundnode App - Soundcloud for Desktop developer release</title>
				<description>&lt;p&gt;Last night I decided to release as beta version for Developer a project I have been working in the last week and make available as Open Source.&lt;/p&gt;

&lt;h2&gt;Intro..&lt;/h2&gt;

&lt;p&gt;Three years ago I started work as a developer and one of the things I have been using since then is &lt;a href=&quot;http://www.soundcloud.com&quot; target=&quot;_blank&quot; title=&quot;Soundcloud&quot;&gt;Soundcloud&lt;/a&gt; I used to use their desktop application till the day they stopped support it. to know more about it &lt;a href=&quot;http://blog.soundcloud.com/2011/01/06/desktop/&quot; target=&quot;_blank&quot; title=&quot;Soundcloud desktop support&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Turns out that I miss my native shortcuts while listening to Soundcloud on the web browser.. Therefore I decided to solve my problem but also release as open source so contributors can suggest &amp;quot;new&amp;quot; features.. and here it is.&lt;/p&gt;

&lt;h2&gt;Soundnode App&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.soundnodeapp.com&quot; target=&quot;_blank&quot; title=&quot;Soundnode App - Soundcloud for desktop&quot;&gt;Soundnode App&lt;/a&gt; is a open source project to support Soundcloud for desktop (Windows/Mac) built with Node-Webkit, Node.js Angular.js and consuming Soundcloud API.&lt;/p&gt;

&lt;h2&gt;Why beta Developer release&lt;/h2&gt;

&lt;p&gt;I built the core but I have been working on other projects in parallel and I still want to release Soundnode App as fast as I can to the public so I thought that the community would help to get this project going faster than one man.&lt;/p&gt;

&lt;p&gt;The project is on the Github &lt;a href=&quot;https://github.com/Soundnode/soundnode-app&quot; target=&quot;_blank&quot; title=&quot;Soundnode App - Soundcloud for desktop&quot;&gt;Soundnode App&lt;/a&gt;.
Constructive (or not) feedback is always welcome.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
				<published>2014-05-13 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/soundnode-soundcloud-for-desktop-dev-release</link>
			</item>
		
			<item>
				<title>Sublime Text 3 jump to definition/method</title>
				<description>&lt;p&gt;Quick blog post to show you how to easily add the feature goto or jump to definition on Sublime text 3 with custom shortcut&lt;/p&gt;

&lt;div class=&quot;fluidImg&quot;&gt;
    &lt;img src=&quot;/assets/images/post-images/st3-goto-definition.gif&quot; alt=&quot;Sublime Text 3 jump to definition/method&quot;&gt;
&lt;/div&gt;

&lt;h2&gt;Simple steps&lt;/h2&gt;

&lt;p&gt;In Sublime Text 3
&lt;pre&gt;&lt;code data-language=&quot;HTML&quot;&gt;
Sublime Text -&amp;gt; Preferences -&amp;gt; Key Bindings - User
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;You can add any shortcut you want since it&#39;s not in use already so you don&#39;t overwrite the default shortcut settings.
&lt;br&gt;
In my case I decided to use &amp;quot;shift+command+m&amp;quot;..as below.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;Javascript&quot;&gt;
[
    { &quot;keys&quot;: [&quot;shift+command+m&quot;], &quot;command&quot;: &quot;goto_definition&quot; }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save it and you are done. (ps: if did not work restart your Sublime Text 3).&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;
</description>
				<published>2014-03-03 00:00:00 -0600</published>
				<link>http://bymichaellancaster.com//blog/sublime-text-3-jump-to-definition-custom-shortcut</link>
			</item>
		
			<item>
				<title>Web and Automotive.</title>
				<description>&lt;p&gt;&lt;strong&gt;Updated version: 04/07/2014&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;And there&#39;s more..&lt;/h2&gt;

&lt;p&gt;W3C business group published a very nice material about the Vehicle Information API and how could/can work.
&lt;br&gt;
Pretty exciting! To know more &lt;a href=&quot;https://rawgit.com/w3c/automotive-bg/master/snapshots/vehicle_spec_snapshot20140425.html&quot; target=&quot;_blank&quot; title=&quot;W3C business group - Vehicle Information API&quot;&gt;click here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updated version: 03/03/2014&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;As imagined..&lt;/h2&gt;

&lt;p&gt;Looks like isn&#39;t just me excited to see applications on cars.. Apple announced &lt;a href=&quot;https://www.apple.com/ios/carplay/&quot; target=&quot;_blank&quot; title=&quot;CarPlay&quot;&gt;CarPlay&lt;/a&gt;.
&lt;br&gt;
You can read more on &lt;a href=&quot;http://techcrunch.com/2014/03/03/apples-new-carplay-system-will-turn-tens-of-millions-of-cars-into-iphone-accessories/&quot; target=&quot;_blank&quot; title=&quot;Apple’s New CarPlay System Will Turn Tens Of Millions Of Cars Into iPhone Accessories&quot;&gt;TechCrunch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Original version: 02/26/2014&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;it&#39;s all about mobility&lt;/h2&gt;

&lt;p&gt;I have been very curious about developing any kind of software for cars.. but of course I would be much more interested in develop using Open Web Technologies perhaps HTML5/CSS3 and Javascript how AWESOME that would be?&lt;/p&gt;

&lt;p&gt;Anyway. while trying to find any sort of material on something I can feed my mind about it I found some very interesting stuff and gathered all in one post.&lt;/p&gt;

&lt;p&gt;So for those that don&#39;t know there&#39;s actually a W3C group to bring and to accelerate the adoption of Web technologies in the automotive industry.
The group will focus on defining a Vehicle Data API that will create new opportunities for automotive services via the Web.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some of the advantages of Web Applications&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Web technologies are well known and &amp;quot;well supported&amp;quot; by devices therefore would make the adoption &amp;quot;easier&amp;quot;.
and since Web technologies are based on open standards, developers are not held hostage by particular vendors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Challenges to adopt Web Technology in the Car&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Driver distraction the biggest one.. but can be solved by HMI (Human-Machine Interface) standard guidelines on how the driver interact with the UI while certain behavior e.g car in movement.&lt;/p&gt;

&lt;p&gt;Cost. Web Technologies has a very good connectivity stack Bluetooth, Wi-Fi, Cellular, TCP/IP Stack, Embedded Browser and to bring all this will increase software and hardware cost.&lt;/p&gt;

&lt;h2&gt;Tesla and Vehicle Management System&lt;/h2&gt;

&lt;p&gt;Tesla and the Vehicle Management System..you ask me why?! First of all I am a Elon Musk &amp;quot;superfan&amp;quot; not just because of his incredible desire to change the world but also because I&#39;m curious to know how they do to have such a incredible product/car.&lt;/p&gt;

&lt;div class=&quot;fluidImg&quot;&gt;
    &lt;img src=&quot;/assets/images/post-images/teslaVMS.png&quot; alt=&quot;Tesla Roadsters Vehicle Management System&quot;&gt;
&lt;/div&gt;

&lt;p&gt;To know more about it please read &lt;a href=&quot;http://www.teslamotors.com/roadster/technology/firmware&quot; target=&quot;_blank&quot; title=&quot;Tesla Roadsters Vehicle Management System&quot;&gt;A Silicon Valley approach to vehicle software&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Model S 17-Inch Touchscreen Display&lt;/h2&gt;

&lt;p&gt;As they say &amp;quot;the world&#39;s most advanced vehicle user interface&amp;quot; and I wont disagree.&lt;/p&gt;

&lt;div class=&quot;fluidMedia&quot;&gt;
    &lt;iframe src=&quot;//player.vimeo.com/video/61821553?title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt; &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Imagine the possibilities through the UX/UI using Open Web technologies.. It wont just take us to point A to point B anymore.&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;
        &lt;small&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/small&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;small&gt;&lt;a href=&quot;http://www.prnewswire.com/news-releases/genivi-alliance-teams-with-w3c-to-accelerate-adoption-of-web-technologies-in-the-automotive-industry-209315251.html&quot; target=&quot;_blank&quot; title=&quot;w3c and automotive&quot;&gt;http://www.prnewswire.com/news-releases/genivi-alliance-teams-with-w3c-to-accelerate-adoption-of-web-technologies-in-the-automotive-industry-209315251.html&lt;/a&gt;&lt;/small&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;small&gt;&lt;a href=&quot;http://www.w3.org/wiki/Web_and_Automotive&quot; target=&quot;_blank&quot; title=&quot;w3c and automotive&quot;&gt;http://www.w3.org/wiki/Web_and_Automotive&lt;/a&gt;&lt;/small&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;small&gt;&lt;a href=&quot;http://www.w3.org/2013/02/autobg.html.en&quot; target=&quot;_blank&quot; title=&quot;w3c and automotive&quot;&gt;http://www.w3.org/2013/02/autobg.html.en&lt;/a&gt;&lt;/small&gt;
    &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
				<published>2014-02-26 00:00:00 -0600</published>
				<link>http://bymichaellancaster.com//blog/web-and-automotive-w3c-group</link>
			</item>
		
			<item>
				<title>DOM insert HTML method you might not know</title>
				<description>&lt;p&gt;Everybody knows/use &amp;quot;innerHTML&amp;quot; to insert HTML but I was looking at the MDN website jumping between Web
API&#39;s when I saw this DOM method called insertAdjacentHTML..it&#39;s &amp;quot;innerHTML&amp;quot; brothers but cooler and
&lt;strong&gt;faster&lt;/strong&gt;.
&lt;br&gt;
Besides the performance another difference is that &amp;quot;innerHTML&amp;quot; will overwrite the content inside the element when
&amp;quot;insertAdjacentHTML&amp;quot; will add to the specified position.&lt;/p&gt;

&lt;p&gt;Here you can compare the performance between &amp;quot;innerHTML&amp;quot; and &amp;quot;insertAdjacentHTML&amp;quot; &lt;a href=&quot;http://jsperf
.com/insertadjacenthtml-perf/3&quot; target=&quot;_blank&quot; title=&quot;innerHTML vs insertAdjacentHTMl&quot;&gt;here&lt;/a&gt; and gets better
its &lt;strong&gt;supported in all browsers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It&#39;s been out there for a while now even John Resig has an &lt;a href=&quot;http://ejohn.org/blog/dom-insertadjacenthtml/&quot;
target=&quot;_blank&quot; title=&quot;insertAdjacentHTML post John Resig&quot;&gt;post&lt;/a&gt; about it back in 2008.&lt;/p&gt;

&lt;p&gt;It&#39;s very simple to use you are going to need to pass one of the positions (below) and then pass the content.&lt;/p&gt;

&lt;h4&gt;Position&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&amp;quot;beforebegin&amp;quot; (insert before the element)&lt;/li&gt;
&lt;li&gt;&amp;quot;afterend&amp;quot; (insert after the element)&lt;/li&gt;
&lt;li&gt;&amp;quot;afterbegin&amp;quot; (insert inside element after begin)&lt;/li&gt;
&lt;li&gt;&amp;quot;beforeend&amp;quot; (insert inside element before end)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
element.insertAdjacentHTML(&quot;position&quot;, &quot;content&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&#39;s say we have a method that do the job for us when we pass the &amp;quot;position&amp;quot; and &amp;quot;content&amp;quot;.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
(function(window) {
    window.App = window.App || {};

    window.App = {
        insertElement: function(position, content) {
            var elDiv = document.getElementById(&#39;wrapper&#39;);
                elDiv.insertAdjacentHTML(position, content)
        }
    }
})(window);

var content1 = &#39;&lt;p id=&quot;ct1&quot;&gt;this is a paragrag a &quot;beforebegin&quot; element&lt;/p&gt;&#39;;
var content2 = &#39;&lt;p id=&quot;ct2&quot;&gt;this is a paragrag a &quot;afterbegin&quot; element&lt;/p&gt;&#39;;
var content3 = &#39;&lt;p id=&quot;ct3&quot;&gt;this is a paragrag a &quot;beforeend&quot; element&lt;/p&gt;&#39;;
var content4 = &#39;&lt;p id=&quot;ct4&quot;&gt;this is a paragrag a &quot;afterend&quot; element&lt;/p&gt;&#39;;

App.insertElement(&#39;beforebegin&#39;, content1);
App.insertElement(&#39;afterbegin&#39;, content2);
App.insertElement(&#39;beforeend&#39;, content3);
App.insertElement(&#39;afterend&#39;, content4);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&#39;s a example how it works &lt;a href=&quot;http://jsfiddle.net/ftZyn/2/&quot; target=&quot;_blank&quot; title=&quot;how insertAdjacentHTMl works&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy the tip.&lt;/p&gt;
</description>
				<published>2014-01-08 00:00:00 -0600</published>
				<link>http://bymichaellancaster.com//blog/DOM-insert-html-method-you-might-not-know-about</link>
			</item>
		
			<item>
				<title>Why I like GulpJS more than GruntJS</title>
				<description>&lt;p&gt;2013 was the year of GruntJS (I have a post about it) but beginning of 2014 a new cool kid on the block show up&lt;/p&gt;

&lt;p&gt;This post is just an FYI instead of a tutorial and for those that don&#39;t know GruntJS please take a look here &lt;a href=&quot;http://www.bymichaellancaster.com/blog/introduction-to-task-runner-gruntjs/&quot; target=&quot;_blank&quot; title=&quot;GruntJS&quot;&gt;GruntJS post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When I saw GulpJS at first I said just another task runner.. but then I read the code to see how it works and I got very excited. Why?
First because uses Streams (Streams is an very important part of NodeJS) which makes faster than GruntJS.. second because if you have been writing NodeJs applications you can notice that GruntJS isn&#39;t very let&#39;s say &amp;quot;pretty&amp;quot; (but works great) but on the other hand GulpJS is like write an NodeJS application making very very easy to &amp;quot;install&amp;quot; and use. I loved.&lt;/p&gt;

&lt;p&gt;Here&#39;s how a GruntJS file looks like &lt;a href=&quot;https://github.com/weblancaster/blog-examples/blob/master/GruntJS-app&quot; target=&quot;_blank&quot; title=&quot;GruntJS&quot;&gt;GruntJS code example&lt;/a&gt; and here how &lt;a href=&quot;https://github.com/weblancaster/blog-examples/tree/master/gulpjs-example&quot; target=&quot;_blank&quot; title=&quot;GulpJS&quot;&gt;GulpJS code example &lt;/a&gt; looks like&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://gulpjs.com&quot; target=&quot;_blank&quot; title=&quot;GulpJS website&quot;&gt; GulpJS website &lt;/a&gt; for more information.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
// Require modules
var gulp = require(&#39;gulp&#39;)
    , uglify = require(&#39;gulp-uglify&#39;)
    , minifyHTML = require(&#39;gulp-minify-html&#39;)
    , sass = require(&#39;gulp-sass&#39;);

// Here&#39;s the tasks
gulp.task(&#39;build&#39;, function(){
    var dist = &#39;dist/&#39;
        , dirPublic = &#39;public/&#39;
        , distStylesheets = dist + dirPublic + &#39;stylesheets/&#39;
        , distJavascripts = dist + dirPublic + &#39;javascripts/&#39;;

    gulp.src(&#39;public/stylesheets/scss/*.scss&#39;)
        .pipe(sass())
        .pipe(gulp.dest(distStylesheets));

    gulp.src(&#39;*.html&#39;)
        .pipe(minifyHTML())
        .pipe(gulp.dest(dist))

    gulp.src(&#39;public/javascripts/*.js&#39;)
        .pipe(uglify())
        .pipe(gulp.dest(distJavascripts))
});

// Gulp watch for file changes
gulp.task(&#39;default&#39;, function() {
    gulp.watch([
        &#39;public/stylesheets/scss/**&#39;,
        &#39;public/javascripts/*.js&#39;,
        &#39;*.html&#39;,
        &#39;!dist/**&#39;
    ], function(event) {
        gulp.run(&#39;build&#39;);
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
				<published>2014-01-06 00:00:00 -0600</published>
				<link>http://bymichaellancaster.com//blog/why-i-like-gulpjs-more-than-gruntjs</link>
			</item>
		
	</channel>
</rss>
