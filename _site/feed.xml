<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
	<channel>
		<title>Michael Lancaster</title>
		<description>Front End Developer/HTML5 Soldier</description>
		<link>http://bymichaellancaster.com/</link>
		
			<item>
				<title>Deploying Node.js server on Heroku Cloud</title>
				<description>&lt;h2&gt;Why Heroku&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.heroku.com&quot; target=&quot;&quot;_blank title=&quot;&quot;&gt;Heroku&lt;/a&gt; is a cloud application platform where you can build and deploy web apps
with the technologies you know as Java, Ruby, Closure, Node.js, Python and Scala..Heroku uses integration with Git so you can deploy your Application
simply pushing to master. Oh and It&#39;s FREE!&lt;/p&gt;

&lt;p&gt;I have four web apps hosted on heroku but two are for public access this blog/portfolio running on Ruby and Lollagram running on Node.js.&lt;/p&gt;

&lt;h2&gt;Why Node.js&lt;/h2&gt;

&lt;p&gt;It&#39;s Javascript...on the Server!&lt;/p&gt;

&lt;iframe src=&quot;http://giphy.com/embed/13k1e8OMVO2a3K&quot; frameBorder=&quot;0&quot; allowFullScreen=&quot;allowFullScreen&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;No, But seriously. Javascript is well known by us Front End Developers/Engineers and even designers. &lt;br&gt;
That&#39;s already one good reason but the main &amp;quot;real&amp;quot; reasons are Node.js is all about making event-driven (Ajax can be done on the server side), low-latency, non-blocking I/O...perfect for real time. &lt;br&gt;
Node.js makes a much smaller footprint on your web server It allocates web server resources on an as-needed basis, not pre-allocating a large chunk of resources for each user. For example, Apache might assign 8MB to a user, while Node assigns 8KB.&lt;/p&gt;

&lt;h2&gt;Basic set up&lt;/h2&gt;

&lt;p&gt;I&#39;m going to assume you have account on Heroku (it&#39;s free) and the &lt;a href=&quot;https://toolbelt.heroku.com/&quot; title=&quot;toolbelt kit&quot; target=&quot;_blank&quot;&gt;toolbelt kit&lt;/a&gt; installed as well,
you also have &lt;a href=&quot;http://Nodejs.org/&quot; title=&quot;Node.js&quot; target=&quot;_blank&quot;&gt;Node.js&lt;/a&gt; installed.&lt;/p&gt;

&lt;h2&gt;Let&#39;s get it start&lt;/h2&gt;

&lt;p&gt;First of all (after everything installed) create a new folder (whatever-name-you-want) then open your terminal go to your folder and type..&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
git init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
git commit -m &quot;first commit&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you have git initialized..time to create a Heroku app. &lt;br&gt;
First thing you need to login to Heroku (remember that we are doing everything from the command line on terminal)&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
heroku login
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
heroku create name-of-your-app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Done! You just need to push your code.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can access your Web App url on www.your-app-name.heroku.com&lt;/p&gt;

&lt;p&gt;Oh wait! What is this?&lt;/p&gt;

&lt;div class=&quot;fluidImg&quot;&gt;
&lt;img src=&quot;/assets/images/post-images/heroku-404.png&quot; alt=&quot;Heroku 404&quot;&gt;
&lt;/div&gt;

&lt;p&gt;To make your Web App run on Heroku you need to run your Web App in one of those languages I said right on the beginning of this post.&lt;/p&gt;

&lt;p&gt;Today we are going to run and deploy a simple Node.js/Express.js Application..since I have been using Heroku and Node.js for all my personal/aside projects I created &lt;br&gt;
this Express.js boilerplate to run and deploy fast and easy the Application with static assets and NO jade (jade is native on Express.js).&lt;/p&gt;

&lt;p&gt;Go to my Github repository &lt;a href=&quot;https://github.com/weblancaster/expressjs-static-boilerplate&quot; target=&quot;_blank&quot; title=&quot;Express.js static boilerplate&quot;&gt;Express.js static boilerplate&lt;/a&gt; and
download the zip file then extract inside of&lt;/p&gt;
</description>
				<published>2013-09-19 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/deploying-nodejs-on-heroku-cloud</link>
			</item>
		
			<item>
				<title>When a Facebook recruiter email me</title>
				<description>&lt;h2&gt;Very brief&lt;/h2&gt;

&lt;div class=&quot;fluidImg&quot;&gt;
&lt;img src=&quot;/assets/images/post-images/fb.png&quot; alt=&quot;Email from facebook recruiter&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;One thing that I wasn&#39;t expecting &amp;quot;now&amp;quot; before turn 23 years old was a recruiter of one of the biggest companies in the planet called Facebook email me
interested on my Skills..&lt;/p&gt;

&lt;p&gt;We changed some emails and we scheduled a phone call..the phone was as most of the phone interviews are. quite general questions about life and work..
He also asked me some &amp;quot;simple&amp;quot; technical questions and them asked me if I was interested to go to the next process..&lt;/p&gt;

&lt;p&gt;What do you think I said??! &lt;br&gt;
I see myself as a &amp;quot;child&amp;quot; always learning and I have been doing it as much as I can (specially in the last three months) without forget I have a life to live and to have fun..but this is what I really like to do so at least five days of seven days
of the week I&#39;m studying/reading, coding experiments and trying to colaborate with open source projects..I have goals and I&#39;m accomplishing step by step.&lt;/p&gt;

&lt;p&gt;No doubt I&#39;m going to accomplish my next goals..but I follow some engineers from Facebook and I have a friend which works for them..
they are great references as professionals and I&#39;m not at their level &amp;quot;yet&amp;quot;..So I told him all that but I was totally willing to take the challenge. who doesn&#39;t love challenges?!&lt;/p&gt;

&lt;p&gt;One thing that he told me was the company Facebook knows that people can learn and become great in a few months or a year..and they are always open to re-open oportunities.&lt;/p&gt;

&lt;p&gt;&amp;quot;Before get the challenge I did some research about the process..and was said that the second test is the hardest one..and they have been
applying the same test for more than three years&amp;quot;&lt;/p&gt;

&lt;p&gt;I spoke with my friend that works for them which gave me some very good suggestions &amp;quot;Test your code, then test it again and then test again&amp;quot;..&lt;/p&gt;

&lt;p&gt;Oh I forgot to tell that as always work was very busy and I had to do some more work when I get home from work and my birthday would be in two days.. what hell?! excuses? this is not how my personality works. &lt;br&gt;
so I worked more than 12hs on my birthday to get my stuff tested and done (at my actual job)..&lt;/p&gt;

&lt;p&gt;On sunday I started the challenge and looked like was pretty simple..haha but no. It&#39;s not simple at all (heavely focus on logic and some algorithms) so it&#39;s a great way to hire awesome engineers.
I spent &amp;quot;eight hours&amp;quot; working on the challenge and I was going well until I started to test my code and find bugs..I wanted it perfect!&lt;/p&gt;

&lt;p&gt;Monday after work I tried fix again those bugs but I couldn&#39;t figure out how..anyway after look what was (5am) trying to make it perfect I took a shower..
And thought about it. I&#39;m glad he got interested on my skills but I need to be realistic, I&#39;m pretty sure I&#39;m going to get in the next level (as we say world class) soon but not now..&lt;/p&gt;

&lt;p&gt;I sent an email thanking him for the opportunity and telling about it. I will finish the challenge but I feel like I&#39;m not at Facebook engineers level &amp;quot;yet&amp;quot;.&lt;/p&gt;

&lt;p&gt;All this made me even more excited about my future and my goals.. so I&#39;m predicting (planning) a very good and quick growth in my skills in the next months..&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; Failure is part of real life and you NEED to go through to get where you want..life is about learning and discovering yourself. &lt;/strong&gt;&lt;/p&gt;
</description>
				<published>2013-09-18 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/when-facebook-recruiter-email-me</link>
			</item>
		
			<item>
				<title>How I built Lollagram with Instagram real time API</title>
				<description>&lt;p&gt;[post under improvements]&lt;/p&gt;

&lt;h2&gt;What is Lollagram?&lt;/h2&gt;

&lt;p&gt;[from the Application] &lt;a href=&quot;http://www.lollagram.com&quot; target=&quot;_blank&quot; title=&quot;Lollagram - real time lollapalooza&quot;&gt;Lollagram&lt;/a&gt;  is a labor of love thatâ€™s designed to help you keep track of the Lollapalooza experience, through the eyes (or, more accurately, snapshots) of music lovers on the ground at Grant Park. Lollagram takes advantage of the Instagram Real Time API and aggregates the moments at Lollapalooza, creating a visual record of the bands, food, people, and city that make up this great musical tradition. With 45 million photos being uploaded to Instagram each day, we&#39;re excited to present snapshots from Lollapalooza 2013.&lt;/p&gt;

&lt;h2&gt;The new version&lt;/h2&gt;

&lt;p&gt;Check out the source code on &lt;a href=&quot;https://github.com/weblancaster/instagram-real-time&quot; target=&quot;_blank&quot; title=&quot;github Lollagram - real time lollagram cosuming Instagram real time API&quot;&gt;Lollagram source code.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The old version of Lollagram was a simple website built in PHP where you needed to click on the refresh button to pull the latest pictures shared on Instagram with the hashtags #lollapalooza #lollapalooza2012 or #lolla2012&lt;/p&gt;

&lt;p&gt;While I was working for Golinharris I was also working on my side projects/experiments using NodeJS so I think two weeks before the event I started to talk with my co-worker and designer Daniel Branca that I was thinking to use cutting edge technologies to do a real time Application therefore much more engaging.&lt;/p&gt;

&lt;p&gt;I was also about to leave the company to another company and I had one more week at Golinharris but I really wanted to work on it for fun and learning to use technologies like NodeJs, Socket.io, Client Side template (HandlebarsJs) and responsive web design where the user can follow on their smartphone, tablet, desktop or even on TV (and Yes I did for &amp;quot;free&amp;quot;).&lt;/p&gt;

&lt;p&gt;I never had work with real time Application so I started to read and do some experiments with Socket.io coding a real time chat (as most developers do).
After understand the basic concept of Socket.io &amp;quot;Real Time&amp;quot; and discuss all the most important details of the Application with Dan (the designer) I started code the Application.&lt;/p&gt;

&lt;p&gt;As I said before at that time I was leaving the company to work for another company and I was also preparing my slides/speak for the biggest conference in Brazil for Front End Developers/Engineers which I was invited to speak (topic for another post) and it would be in the same day I had to release the Application.&lt;/p&gt;

&lt;p&gt;So in one week I had to start at the new company understand the new workflow, finish Lollagram Application and finish my slides/speak for the conference in Brazil.&lt;/p&gt;

&lt;h2&gt;The Application&lt;/h2&gt;

&lt;p&gt;I&#39;m not going to describe in a lot of details it will be more a overview how I did it.&lt;/p&gt;

&lt;p&gt;After understand how the Instagram real time API work I started to code the Back-end utilizing NodeJS (&lt;a href=&quot;http://expressjs.com/&quot; target=&quot;_blank&quot; title=&quot;ExpressJS Framework&quot;&gt;ExpressJS&lt;/a&gt;) and hosted on &lt;a href=&quot;http://www.heroku.com&quot; target=&quot;Heroku cloud&quot; title=&quot;Heroku cloud&quot;&gt;Heroku&lt;/a&gt; which is awesome and I could added monitoring to the server to debug and make sure everything on the server was/is running alright. &lt;br&gt;
I tried to find code examples to gain some time but I found anything good enough. Or the code were too old or was developed PHP or RoR so I ended up utilizing the library called &lt;a href=&quot;https://github.com/mckelvey/instagram-node-lib&quot; targte=&quot;_blank&quot; title=&quot;Instagram node lib&quot;&gt;instagram-node-lib&lt;/a&gt; which helped me a lot and I gained some time.&lt;/p&gt;

&lt;p&gt;After register my Application on Instagram and get my &amp;quot;client id&amp;quot; and &amp;quot;client secret&amp;quot; the most important things I needed to get it working was the steps below.&lt;/p&gt;

&lt;p&gt;Remember I&#39;m using the &lt;a href=&quot;https://github.com/mckelvey/instagram-node-lib&quot; targte=&quot;_blank&quot; title=&quot;Instagram node lib&quot;&gt;instagram-node-lib&lt;/a&gt; so we don&#39;t need to do from scratch since time is/was very precious and we don&#39;t want to reinvent the wheel.&lt;/p&gt;

&lt;h3&gt;Basic setup&lt;/h3&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
Instagram.set(&#39;client_id&#39;, clientID);
Instagram.set(&#39;client_secret&#39;, clientSecret);
Instagram.set(&#39;callback_url&#39;, &#39;http://YOUR_URL.COM/callback&#39;);
Instagram.set(&#39;redirect_uri&#39;, &#39;http://YOUR_URL.com&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;The Handshake&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;http://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot; target=&quot;&quot; title=&quot;Handshake&quot;&gt;Handshake&lt;/a&gt; is the confirmation connection between the servers.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
app.get(&#39;/callback&#39;, function(req, res){
    var handshake =  Instagram.subscriptions.handshake(req, res);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;First load&lt;/h3&gt;

&lt;p&gt;When you access the Application for the first time you can noticed thirteen pictures are loaded.
Here I request the latest shared pictures on Instagram with hashtag #lollapalooza and utilizing Socket.io I transmit it to the client side as json.&lt;/p&gt;

&lt;p&gt;Server sends the data to the client side.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
io.sockets.on(&#39;connection&#39;, function (socket) {
  Instagram.tags.recent({ 
      name: &#39;lollapalooza&#39;,
      complete: function(data) {
        socket.emit(&#39;firstShow&#39;, { firstShow: data });
      }
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On my method &amp;quot;mostRecent&amp;quot; the Socket.io on the client receives the data and parse/process using client side templating (HandlebarsJs) and append to the Application showing the latest pictures shared on Instagram.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
mostRecent: function() {
    socket.on(&#39;firstShow&#39;, function (data) {
        var
            query = data,
            source = $(&#39;#firstShow-tpl&#39;).html(),
            compiledTemplate = Handlebars.compile(source),
            result = compiledTemplate(query),
            imgWrap = $(&#39;#imgContent&#39;);

        imgWrap.html(result);
    });
},
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Subscribing to hashtags&lt;/h3&gt;

&lt;p&gt;To receive the last updates from Instagram as real time first I needed to subscribe to the hashtags.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
Instagram.subscriptions.subscribe({
  object: &#39;tag&#39;,
  object_id: &#39;lollapalooza&#39;,
  aspect: &#39;media&#39;,
  callback_url: &#39;http://YOUR_URL.com/callback&#39;,
  type: &#39;subscription&#39;,
  id: &#39;#&#39;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Real time &amp;quot;time&amp;quot;&lt;/h3&gt;

&lt;p&gt;After subscribe to the hashtags I started to receive &amp;quot;notifications&amp;quot; from Instagram when someone shared pictures with the hashtags subscribed which is pretty cool specially when lots of people share and makes even more engaging.&lt;/p&gt;

&lt;p&gt;One thing that I noticed is that Instagram real time API is unstable and if you go to the google groups where developers post problems and discuss solutions you can see there&#39;s a lot to get better.
Another thing is that you can receive 5000 &amp;quot;notifications&amp;quot; per hour and if you pass the limit the Instagram block your Application.&lt;/p&gt;

&lt;p&gt;Here I send the url to the client side to make the Ajax request but theres another way to do it which is access the json response from Instagram &amp;quot;notification&amp;quot; on the server and get the last image to send to the client.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
app.post(&#39;/callback&#39;, function(req, res) {
    var data = req.body;

    data.forEach(function(tag) {
      var url = &#39;https://api.instagram.com/v1/tags/&#39; + tag.object_id + &#39;/media/recent?client_id=479edbf0004c42758987cf0244afd3ef&#39;;
      sendMessage(url);

    });
    res.end();
});

function sendMessage(url) {
  io.sockets.emit(&#39;show&#39;, { show: url });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the client side I receive the data &amp;quot;url&amp;quot; and do Ajax request then I call my method to render the client side template.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
getData: function() {
    var self = this;
    socket.on(&#39;show&#39;, function(data) {
        var url = data.show;
        $.ajax({
            url: url,
            type: &#39;POST&#39;,
            crossDomain: true,
            dataType: &#39;jsonp&#39;
        }).done(function (data) {
            self.renderTemplate(data);
        }); 
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;How to unsubscribe&lt;/h3&gt;

&lt;p&gt;To unsubscribe is easy it just need the tag &amp;quot;ID&amp;quot; and done.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
Instagram.subscriptions.unsubscribe({ id: &#39;#######&#39; });
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Final thoughts&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Work with Real Time is pretty cool and fun.&lt;/li&gt;
&lt;li&gt;Instagram real time API isn&#39;t great but does the job.&lt;/li&gt;
&lt;li&gt;Work in three different important things in one week is possible with one pack with ten monster energetic drink and less than four hours of sleep per night.&lt;/li&gt;
&lt;li&gt;People love to share pictures. People love to see pictures.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out the source code on &lt;a href=&quot;https://github.com/weblancaster/instagram-real-time&quot; target=&quot;_blank&quot; title=&quot;github Lollagram - real time lollagram cosuming Instagram real time API&quot;&gt;Lollagram source code.&lt;/a&gt;&lt;/p&gt;
</description>
				<published>2013-09-09 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/how-i-built-lollagram-lollapalooza-instagram-real-time-api</link>
			</item>
		
			<item>
				<title>Tonight's inspiration</title>
				<description>&lt;p&gt;I haven&#39;t posted anything a while which is a shame but I had good reasons and I should be doing a post about it on my next post but this post is made to show what inspire me love this world what makes me think how wonderful things are and how much we can learn from our world.&lt;/p&gt;

&lt;h2&gt;Love and Life&lt;/h2&gt;

&lt;p&gt;Love. Perhaps just a word for some but at the same time very powerful. Love drives us to different things in life. Good things and bad things. Both..So many perspectives from different cultures and races but same origin. Your inside.&lt;/p&gt;

&lt;p&gt;Love inspire me in some many different ways and I&#39;m not ashamed to say I believe in true love.
And here it&#39;s very interesting to see some ways people want to express love.&lt;/p&gt;

&lt;p&gt;You decide which one suits you.&lt;/p&gt;

&lt;div class=&quot;fluidMedia&quot;&gt;
  &lt;iframe src=&quot;//player.vimeo.com/video/22439234&quot; width=&quot;500&quot; height=&quot;281&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;div class=&quot;fluidMedia&quot;&gt;
  &lt;iframe src=&quot;//player.vimeo.com/video/35699279&quot; width=&quot;500&quot; height=&quot;281&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;div class=&quot;fluidMedia&quot;&gt;
  &lt;iframe src=&quot;//player.vimeo.com/video/71495477?color=f7f9fa&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;div class=&quot;fluidMedia&quot;&gt;
  &lt;iframe src=&quot;//player.vimeo.com/video/61361236&quot; width=&quot;500&quot; height=&quot;281&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2&gt;Technology and Inspiration&lt;/h2&gt;

&lt;p&gt;Another thing that inspires me can, changed and has being changed the world as love for good or for bad. Technology..but on this post I will show you what inspired me tonight..&lt;/p&gt;

&lt;p&gt;First one is how Netflix is delivering high quality WebKit based UIs to televisions, game consoles and Blu-ray players.
this talk will discuss fluid animation with hardware acceleration, achieving high framerates using accelerated compositing, responding to constant user input, as well as balancing strategies for best performance on over 450 high-end to low-end devices.&lt;/p&gt;

&lt;div class=&quot;fluidMedia&quot;&gt;
  &lt;iframe src=&quot;//www.youtube.com/embed/xuMWhto62Eo&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Second one discuss how programming has being changing people and the future of programming.
The way the speaker approach the subject is a very creative and interesting thing.&lt;/p&gt;

&lt;div class=&quot;fluidMedia&quot;&gt;
  &lt;iframe src=&quot;//player.vimeo.com/video/71278954?title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;If it all doesn&#39;t makes sense to you don&#39;t worry lot of things in life doesn&#39;t makes sense.&lt;/p&gt;
</description>
				<published>2013-08-25 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/tonights-inspiration</link>
			</item>
		
			<item>
				<title>Introduction to GruntJS</title>
				<description>&lt;p&gt;Which developer never wasted time doing repetitive and boring tasks instead of being focused on what we do best &amp;quot;Code&amp;quot;.&lt;/p&gt;

&lt;p&gt;Developers should be worry about write code but very often we got ourself doing a lot of repetitive and boring tasks like cleaning the code, minifying, combining, generating and so on so forth.&lt;/p&gt;

&lt;p&gt;How many time would you save not doing those tasks? today I will show you the introduction use to help you on your daily bases development work flow.&lt;/p&gt;

&lt;p&gt;There&#39;s a answer and it&#39;s called GruntJS I have been using a while and I got say &amp;quot;It&#39;s true love&amp;quot; I can watch for changes on my files, run tests, minify, pre-process SASS, minify images and the list goes on take at look on the plugins at &lt;a href=&quot;http://gruntjs.com/plugins&quot; title=&quot;GruntJS plugins&quot; target=&quot;_blank&quot;&gt;GruntJS plugins&lt;/a&gt; and for more information and further reference you MUST go to &lt;a href=&quot;http://gruntjs.com&quot; title=&quot;GruntJS&quot; target=&quot;_blank&quot;&gt;GruntJS website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&#39;s say we want to watch for changes on the js files and HTML markup minify both and concatenate all js files in one single file.&lt;/p&gt;

&lt;h2&gt;Let&#39;s get start&lt;/h2&gt;

&lt;p&gt;Create a folder on your desktop (or whatever you want to) and let&#39;s call it GruntJS-app.
&lt;br&gt;
Add this follow simple architecture to your project.
&lt;br&gt;&lt;br&gt;
- GruntJS-app
&lt;br&gt;
-- dist // html destination
&lt;br&gt;
-- src // html source
&lt;br&gt;
--- index.html
&lt;br&gt;
--- internal.html
&lt;br&gt;
-- assets
&lt;br&gt;
--- js
&lt;br&gt;
---- main.js
&lt;br&gt;
---- app.js
&lt;br&gt;
---- module.js
&lt;br&gt;
--- css
&lt;br&gt;
--- images&lt;/p&gt;

&lt;p&gt;Then you will need NodeJS if you don&#39;t have go to the &lt;a href=&quot;http://nodejs.org/&quot; title=&quot;NodeJS website&quot; target=&quot;_blank&quot;&gt;NodeJS website&lt;/a&gt; for installation information.&lt;/p&gt;

&lt;p&gt;To make GruntJS work properly you will need some two specific files &amp;quot;package.json&amp;quot; used by &lt;a href=&quot;https://npmjs.org/&quot; title=&quot;npm website&quot; target=&quot;_blank&quot;&gt;npm&lt;/a&gt; contain the information for the project where you list grunt and plugins used by your project as &amp;quot;devDependencies&amp;quot; and the &amp;quot;Gruntfile.js&amp;quot; where you set your tasks to run.&lt;/p&gt;

&lt;p&gt;So let&#39;s add to the project GruntJS-app
&lt;br&gt;&lt;br&gt;
- GruntJS-app
&lt;br&gt;
-- dist // html destination
&lt;br&gt;
-- src // html source
&lt;br&gt;
--- index.html
&lt;br&gt;
--- internal.html
&lt;br&gt;
-- assets
&lt;br&gt;
--- js
&lt;br&gt;
---- main.js
&lt;br&gt;
---- app.js
&lt;br&gt;
---- module.js
&lt;br&gt;
--- css
&lt;br&gt;
--- images
&lt;br&gt;
-- package.json // added new file
&lt;br&gt;
-- Gruntfile.js // added new file&lt;/p&gt;

&lt;h2&gt;Installing GruntJS&lt;/h2&gt;

&lt;p&gt;On your root project folder run the command line&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
sudo npm install -g grunt-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you have the grunt command line installed globally to your project&lt;/p&gt;

&lt;h2&gt;Configuring GruntJS (Gruntfile.js)&lt;/h2&gt;

&lt;p&gt;the basic structure to configure your Gruntfile.js file is simple.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
module.exports = function(grunt) {

    grunt.initConfig({
        
    });

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Configuring the package.json&lt;/h2&gt;

&lt;p&gt;You can add tons of information on you package json and you can check all information &lt;a href=&quot;http://package.json.nodejitsu.com/&quot; title=&quot;package json reference information&quot; target=&quot;blank&quot;&gt;here&lt;/a&gt; but in this case let&#39;s keep it as simple as possible.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;json&quot;&gt;
{
    &quot;name&quot;: &quot;GruntJS-app&quot;,
    &quot;title&quot;: &quot;GruntJS-app&quot;,
    &quot;description&quot;: &quot;Simple introduction to GruntJS set up&quot;,
    &quot;author&quot;: &quot;your name&quot;,
    &quot;homepage&quot;: &quot;your project website&quot;,
    &quot;version&quot;: &quot;0.0.1&quot;,
    &quot;devDependencies&quot;: {
        &quot;grunt&quot;: &quot;~0.4.1&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Adding plugins to use as task&lt;/h2&gt;

&lt;p&gt;Remember that we want to &amp;quot;watch&amp;quot; for changes minify both HTML, js files and concatenate all js files in one single file&lt;/p&gt;

&lt;p&gt;Now on you wont need to go manually to package.json to add the plugins as devDependencies because you are going to run the command on your terminal to add it automatically.&lt;/p&gt;

&lt;p&gt;First let&#39;s install Uglify&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
npm install grunt-contrib-uglify --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And enable the plugin inside of Gruntfile.js&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
grunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now Gruntfile.js looks like this&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
module.exports = function(grunt) {

    grunt.initConfig({

    });

    grunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;);

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install htmlmin&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
npm install grunt-contrib-htmlmin --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enable the plugin&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
grunt.loadNpmTasks(&#39;grunt-contrib-htmlmin&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now Gruntfile.js looks like this&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
module.exports = function(grunt) {

    grunt.initConfig({

    });

    grunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;);
    grunt.loadNpmTasks(&#39;grunt-contrib-htmlmin&#39;);

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Setting the tasks&lt;/h2&gt;

&lt;p&gt;On your Gruntfile.js you will define the configuration for your tasks (check out the plugins documentation for configuration) as should be and the task register.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
module.exports = function(grunt) {

    grunt.initConfig({

        uglify: {
            my_target: {
              files: {
                &#39;assets/js/app.min.js&#39;: // destination
                [&#39;assets/js/app.js&#39;, &#39;assets/js/main.js&#39;, &#39;assets/js/module.js&#39;] // source
              }
            }
        },

        htmlmin: {
            dist: {
                options: {
                removeComments: true,
                collapseWhitespace: true
            },
            files: {
                    &#39;dist/index.html&#39;: &#39;src/index.html&#39;, // destination
                    &#39;dist/internal.html&#39;: &#39;src/internal.html&#39; // source
                }
            }
        }

    });

    grunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;);
    grunt.loadNpmTasks(&#39;grunt-contrib-htmlmin&#39;);

    grunt.registerTask(&#39;build&#39;, [&#39;htmlmin&#39;, &#39;uglify&#39;]);

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Running the tasks&lt;/h2&gt;

&lt;p&gt;Make sure you have all the npm installed&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the task&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
grunt build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Done! This is what you should have as a response.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
Running &quot;htmlmin:dist&quot; (htmlmin) task
File dist/index.html created.
File dist/internal.html created.

Running &quot;uglify:my_target&quot; (uglify) task
File &quot;assets/js/app.min.js&quot; created.

Done, without errors.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Adding and configuring watch&lt;/h2&gt;

&lt;p&gt;Remember &amp;quot;no waste of time&amp;quot; with repetitive tasks right? so to not need run &amp;quot;grunt build&amp;quot; every time after changes let&#39;s add the plugin watch.&lt;/p&gt;

&lt;p&gt;Install watch&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
npm install grunt-contrib-watch --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enable the plugin and configure the watch task&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
grunt.loadNpmTasks(&#39;grunt-contrib-watch&#39;);

grunt.event.on(&#39;watch&#39;, function(action, filepath) {
  grunt.log.writeln(filepath + &#39; has &#39; + action);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now Gruntfile.js looks like this (check out the plugin documentation for configuration).&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
module.exports = function(grunt) {

    grunt.initConfig({

        uglify: {
            my_target: {
              files: {
                &#39;assets/js/app.min.js&#39;: // destination
                [&#39;assets/js/app.js&#39;, &#39;assets/js/main.js&#39;, &#39;assets/js/module.js&#39;] // source
              }
            }
        },

        htmlmin: {
            dist: {
                options: {
                removeComments: true,
                collapseWhitespace: true
            },
            files: {
                    &#39;dist/index.html&#39;: &#39;src/index.html&#39;, // destination
                    &#39;dist/internal.html&#39;: &#39;src/internal.html&#39; // source
                }
            }
        },

        watch: {
            src: {
              files: [&#39;src/*.html&#39;, &#39;assets/js/*.js&#39;, &#39;assets/css/*.css&#39;, &#39;!assets/js/app.min.js&#39;], // ! means not
              tasks: [&#39;build&#39;],
            },
        }

    });

    grunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;);
    grunt.loadNpmTasks(&#39;grunt-contrib-htmlmin&#39;);
    grunt.loadNpmTasks(&#39;grunt-contrib-watch&#39;);

    grunt.registerTask(&#39;build&#39;, [&#39;htmlmin&#39;, &#39;uglify&#39;]);

    grunt.event.on(&#39;watch&#39;, function(action, filepath) {
      grunt.log.writeln(filepath + &#39; has &#39; + action);
    });

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now on you will just need to run &amp;quot;grunt watch&amp;quot; so every time you change something in the files set up to watch will run the task &amp;quot;build&amp;quot;&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
grunt watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and this is what you should see after run the command&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;ruby&quot;&gt;
Running &quot;watch&quot; task
Waiting...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To stop watch press &amp;quot;control + c&amp;quot; &lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;GruntJS is AWESOME and you can do much more complex things with it.
&lt;br&gt;
Check out the example on &lt;a href=&quot;https://github.com/weblancaster/blog-examples/tree/master/GruntJS-app&quot; title=&quot;example on github&quot; target=&quot;blank&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now you have more time to play with new experiments.
&lt;br&gt;
Cheers!&lt;/p&gt;
</description>
				<published>2013-06-01 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/introduction-to-task-runner-gruntjs</link>
			</item>
		
			<item>
				<title>Basic overview of client - side templating</title>
				<description>&lt;p&gt;Template rendering is very common on the web applications when we talk about back end development where technologies like Java, Ruby, PHP.. are used to render templates and show content, but lately about two or three years ago we could noticed that developers and companies are changing this using client side templating.&lt;/p&gt;

&lt;h2&gt;Server - Side templating (the common way)&lt;/h2&gt;

&lt;p&gt;So as I mentioned before back end technologies like Java, Ruby, PHP.. has being used to render the template from the back to the the client side and this approach consists in literally render on the server using one of those technologies and through it into the client - side.&lt;/p&gt;

&lt;p&gt;Two things are very clear to me. First we have to consume the server (imagine if you have to render lots of time), Second is the bandwidth request so the template and the data has to be downloaded into the client side (slow and request bandwidth).&lt;/p&gt;

&lt;h2&gt;Client - Side templating (the new kid in the block?!)&lt;/h2&gt;

&lt;p&gt;The client side consists in remove from the back to the client this template rendering into a very, very known technology called Javascript that runs on each user&#39;s browser making faster web apps and adding more control for you at your end.&lt;/p&gt;

&lt;p&gt;It has being very helpful for Single Page Applications where you can just update an section on your website without refresh the page or download all assets over again.&lt;/p&gt;

&lt;p&gt;At start the client side template will use placeholders as content using it&#39;s own tags and after your JS download the JSON data another very known technology (fast and simple to read) the template will be rendered/compiled, the placeholders will be replaced to data from the JSON and lastly the HTML markup you be appended into the HTML element.&lt;/p&gt;

&lt;h2&gt;Simple JSON data example&lt;/h2&gt;

&lt;pre&gt;&lt;code data-language=&quot;json&quot;&gt;
{
  &quot;client&quot;: {
    &quot;name&quot;: &quot;Michael lancaster&quot;,
    &quot;name&quot;: &quot;John Due&quot;
  },
  &quot;occupation&quot;: {
    &quot;description&quot;: &quot;Front End Engineer&quot;,
    &quot;description&quot;: &quot;Jornalist&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is very human readable right?!&lt;/p&gt;

&lt;h2&gt;Simple Web app example&lt;/h2&gt;

&lt;p&gt;Here I&#39;m using the Yahoo YQL API requesting the JSON data and rendering on the page using Handlebars.js with a little of logic.
You can check out and download the Web app here &lt;a href=&quot;http://git.io/tUfHyA&quot; title=&quot;Handlebars.js app&quot; target=&quot;_blank&quot;&gt;http://git.io/tUfHyA&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Handlebars.js template markup example&lt;/h2&gt;

&lt;div class=&quot;fluidImg&quot;&gt;
&lt;img src=&quot;/assets/images/post-images/client-side.png&quot; alt=&quot;Brazilian developers and Christian Heilmann&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2&gt;App JS file&lt;/h2&gt;

&lt;p&gt;On my app.js file I requested the JSON data, replaced the template placeholders, rendered/compiled the template and appended into the HTML element.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;javascript&quot;&gt;
function showNewsFromYahooAPI() {
  $.ajax({
        url: &#39;http://query.yahooapis.com/v1/public/yql?q=select%20title%20from%20rss%20where%20url%3D%22http%3A%2F%2Frss.news.yahoo.com%2Frss%2Ftopstories%22&amp;format=json&amp;callback=&#39;,
        dataType: &#39;json&#39;
    }).done(function(data){
      var
        query = data.query.results,
        source = $(&#39;#myTemplate&#39;).html(),
        compiledTemplate = Handlebars.compile(source),
        result = compiledTemplate(query);

      $(&#39;#content&#39;).html(result);
    });
}

$(function() {
    showNewsFromYahooAPI();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Who uses client side templating?!&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Linkedin (Dust.js)&lt;/li&gt;
&lt;li&gt;USAToday (Underscore.js)&lt;/li&gt;
&lt;li&gt;Walmart Mobile (Underscore.js)&lt;/li&gt;
&lt;li&gt;Hulu (Handlebars.js)&lt;/li&gt;
&lt;li&gt;Groupon (Mustache.js)&lt;/li&gt;
&lt;li&gt;And many, many others.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Be aware of..&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Heavy rendering on the users side (devices are not that good as you think they are).&lt;/li&gt;
&lt;li&gt;Organization is king.&lt;/li&gt;
&lt;li&gt;There&#39;s logic-less and logic templates (ask yourself how complex is my template?).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Some links to client side template&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://handlebarsjs.com/&quot; title=&quot;Handlebarsjs&quot; target=&quot;_blank&quot;&gt;http://handlebarsjs.com/&lt;/a&gt;
  &lt;br&gt;
&lt;a href=&quot;http://mustache.github.io/&quot; title=&quot;Mustachejs&quot; target=&quot;_blank&quot;&gt;http://mustache.github.io/&lt;/a&gt;
  &lt;br&gt;
&lt;a href=&quot;http://akdubya.github.io/dustjs/&quot; title=&quot;Dustjs&quot; target=&quot;_blank&quot;&gt;http://akdubya.github.io/dustjs/&lt;/a&gt;
  &lt;br&gt;
&lt;a href=&quot;http://documentcloud.github.io/underscore/#template&quot; title=&quot;Underscorejs&quot; target=&quot;_blank&quot;&gt;http://documentcloud.github.io/underscore/#template&lt;/a&gt;
  &lt;br&gt;
&lt;a href=&quot;https://github.com/jquery/jquery-tmpl&quot; title=&quot;jQuery tmpl&quot; target=&quot;_blank&quot;&gt;https://github.com/jquery/jquery-tmpl&lt;/a&gt;
  &lt;br&gt;
and many others like Jade, Haml-js, Eco, etc.&lt;/p&gt;

&lt;h2&gt;I suggest you read..&lt;/h2&gt;

&lt;p&gt;
Smashing Magazine - Client-Side Templating &lt;a href=&quot;http://coding.smashingmagazine.com/2012/12/05/client-side-templating/&quot; title=&quot;Smashing magazine: client side templating&quot; target=&quot;_blank&quot;&gt;click here.&lt;/a&gt;
    &lt;br&gt;
Leaving JSPs in the dust: moving LinkedIn to dust.js client-side templates &lt;a href=&quot;http://engineering.linkedin.com/frontend/leaving-jsps-dust-moving-linkedin-dustjs-client-side-templates&quot; title=&quot;Leaving JSPs in the dust: moving LinkedIn to dust.js client-side templates&quot; target=&quot;_blank&quot;&gt;click here.&lt;/a&gt;
    &lt;br&gt;
The client-side templating throwdown: mustache, handlebars, dust.js, and more &lt;a href=&quot;http://engineering.linkedin.com/frontend/client-side-templating-throwdown-mustache-handlebars-dustjs-and-more&quot; title=&quot;The client-side templating throwdown: mustache, handlebars, dust.js, and more&quot; target=&quot;_blank&quot;&gt;click here.&lt;/a&gt;

&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
				<published>2013-04-07 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/basic-overview-of-client-side-templating</link>
			</item>
		
			<item>
				<title>From San Francisco to the Brazilian developers community.</title>
				<description>&lt;p&gt;I went to the HTML5 Developers Conference in San Francisco (01 Apr 13 to 03 Apr 13) and there I met some awesome developers from Brazil and as they are very active to help the developers community in Brazil with speaks, presentations and events they decided record a chat with me talking about how it is work in US, how I got a job here and some good tips for those that want to try this adventure.&lt;/p&gt;

&lt;p&gt;The awesome developers from Brazil including myself and the Principal Mozilla&#39;s Evangelist Christian Heilmann, we had a great dinner. ;)&lt;/p&gt;

&lt;div class=&quot;fluidImg&quot;&gt;
&lt;img src=&quot;/assets/images/post-images/sf-dinner.jpg&quot; alt=&quot;Brazilian developers and Christian Heilmann&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;The chat&lt;/h2&gt;

&lt;p&gt;The video isn&#39;t in a good quality but the content is the important.&lt;/p&gt;

&lt;div class=&quot;fluidMedia&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/73RVbGcZQXk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt; &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Thanks to all my friends from Brazil shared this to help the developers that thinks to come work in US.&lt;/p&gt;
</description>
				<published>2013-04-06 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/from-san-francisco-to-the-brazilian-developers-community</link>
			</item>
		
			<item>
				<title>Fluid iframe without use of javascript.</title>
				<description>&lt;p&gt;Simple technique to make fluid iframes without use of javascript or plugins. Using this technique we have more gains in performance and simplicity.&lt;/p&gt;

&lt;p&gt;This is a technique of positioning a element inside of another using &amp;quot;position: absolute;&amp;quot; for the &amp;quot;child&amp;quot; and &amp;quot;position: relative;&amp;quot; for the &amp;quot;wrap&amp;quot;.&lt;/p&gt;

&lt;p&gt;(ps: Depending on your case I suggest you set height for images).&lt;/p&gt;

&lt;h2&gt;HTML&lt;/h2&gt;

&lt;pre&gt;&lt;code data-language=&quot;html&quot;&gt;
&lt;div class=&quot;fluidMedia&quot;&gt;
    &lt;iframe src=&quot;&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;
&lt;/div&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;CSS&lt;/h2&gt;

&lt;pre&gt;&lt;code data-language=&quot;css&quot;&gt;
.fluidMedia {
    position: relative;
    padding-bottom: 56.25%; /* proportion value to aspect ratio 16:9 (9 / 16 = 0.5625 or 56.25%) */
    padding-top: 30px;
    height: 0;
    overflow: hidden;
}

.fluidMedia iframe {
    position: absolute;
    top: 0; 
    left: 0;
    width: 100%;
    height: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example &lt;a href=&quot;/blog/secrets-of-lea-verou-css/&quot; title=&quot;fluid iframe example&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Browser support&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;IE 7+&lt;/li&gt;
&lt;li&gt;Firefox 3.6+&lt;/li&gt;
&lt;li&gt;Chrome 6+&lt;/li&gt;
&lt;li&gt;Safari 5+&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can know more about it on &lt;a href=&quot;http://alistapart.com/article/creating-intrinsic-ratios-for-video&quot; target=&quot;_blank&quot; title=&quot;A List Apart&quot;&gt;A List Apart&lt;/a&gt; great article.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
				<published>2013-03-12 00:00:00 -0500</published>
				<link>http://bymichaellancaster.com//blog/fluid-iframe-and-images-without-javascript-plugins</link>
			</item>
		
			<item>
				<title>CSS Architecture for Web Applications.</title>
				<description>&lt;p&gt;Write CSS is more complex than some developers, software engineers and designers think and If you are a &amp;quot;Dogma&amp;quot; &amp;quot;best practice&amp;quot; person this post might hurt your feelings.&lt;/p&gt;

&lt;p&gt;Bad CSS architecture can make Web applications slower (500ms slower = 20% drop in traffic for Google) &lt;br&gt; (100ms slower = 1% drop in sales for amazon), messy and unmaintainable for the team, waste of time trying to find something to fix another thing and the list goes on.&lt;/p&gt;

&lt;p&gt;All the bad examples showed here for good or for bad I had the pleasure to work with in some project.&lt;/p&gt;

&lt;h2&gt;The bad examples first&lt;/h2&gt;

&lt;pre&gt;&lt;code data-language=&quot;css&quot;&gt;
#header {
    property: value;
    property: value;
}

#logo {
    property: value;
    property: value;
}

#menu {
    property: value;
    property: value;
}

#search {
    property: value;
    property: value;
}

#bt-yellow {
    property: value;
    property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yeah! people still doing this approach specifying &amp;quot;ID&#39;s&amp;quot; for every element on the page and that kind of architecture &amp;quot;id&#39;s&amp;quot; has no problem for browser rendering or for Javascript developers concerned about performance or make his life easier.&lt;/p&gt;

&lt;p&gt;But as a point of view of good CSS architecture that&#39;s not DRY, reusable, modular, scalable and depending on the project this can get pretty messy and heavy. So, never do that way ok?!&lt;/p&gt;

&lt;h2&gt;More bad examples&lt;/h2&gt;

&lt;p&gt;My second experience with a different way to write CSS architecture was when I worked as a consultant on a ongoing big Web Application. &lt;br&gt;
At this point the initial developers started kind of in a &amp;quot;good&amp;quot; way making like a mixed code between SMACSS and their own judgments. &lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;css&quot;&gt;
ul.button-group-yellow {
    property: value;
    property: value;
}

ul.button-group-yellow li {
    property: value;
    property: value;
}

ul.button-group-yellow li div {
    property: value;
    property: value;
}

ul.button-group-yellow li div p {
    property: value;
    property: value;
}

ul.button-group-yellow li div p a {
    property: value;
    property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I confess we had a bunch of modular groups forcing DRY methodology but look at those terrible long descendants selectors (nesting), tag-qualify and this approach is very bad for browser rendering/performance, not scalable and gets/got pretty messy after all.&lt;/p&gt;

&lt;h2&gt;Some good tips&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;All members has to work together but this is not a job for Designers, Software engineers. This is a job Front End Engineers.&lt;/li&gt;
&lt;li&gt;CSS is code therefore size and rendering matters.&lt;/li&gt;
&lt;li&gt;Avoid specificity &amp;quot;ID&#39;s&amp;quot;.&lt;/li&gt;
&lt;li&gt;Avoid long descendants selectors (nesting).&lt;/li&gt;
&lt;li&gt;Avoid tag-qualify.&lt;/li&gt;
&lt;li&gt;Browsers render your CSS going right to left.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code data-language=&quot;css&quot;&gt;
#header div ul li p a {
    /* the browser render/algorithm go through all your elements starting at &quot;a&quot; element to find the matches */
    property: value;
    property: value;
}

#header a {
    /* better than the first example */
    /* but still not good enough */
    property: value;
    property: value;
}

header#header {
    /* yet not good. tag-qualify is very very hard to happen to actually use them */
    property: value;
    property: value;
}

#header {
    /* good for performance but not good for modular, DRY, scalable */
    property: value;
    property: value;
}

/* if you need to qualify your selector use quasi tag-qualify methodology */
/* header */ .header {
    /* always prefer/use classes they are fast, reusable, scalable, modular, easy to maintain */
    property: value;
    property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Use DRY (don&#39;t repeat yourself methodology), modular groups, scalable, readable and maintainable.&lt;/li&gt;
&lt;li&gt;Make it well documented (readable for humans not machines).&lt;/li&gt;
&lt;li&gt;Use CSS preprocessors (It doesn&#39;t mean you are going to have a good CSS architecture).&lt;/li&gt;
&lt;li&gt;More developers = more problems so write a Doc &amp;amp; Stylesheets guide for your team.&lt;/li&gt;
&lt;li&gt;Comments are KING. They wont be there afterwards because you will minify so use wisely.&lt;/li&gt;
&lt;li&gt;Find the patterns in your design and apply OOCSS method (works great for me).&lt;/li&gt;
&lt;li&gt;Rule sets in specific order (example how I do it below).&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code data-language=&quot;css&quot;&gt;
/* ==========================================================================
#   SCSS/COMPASS Modular Project Based.
#   @settings ( COMPASS, Variables, Functions, Mixins, etc... )
#   @base ( regular elements )
#   @helpers ( layout helpers )
#   @layout ( layout template, grid structure )
#   @skin ( modules, background, colors, typography.. )
#   @media-queries ( content-driven breakpoints )
#   @ie ( IE fixes )
========================================================================== */


/* ==========================================================================
@settings
========================================================================== */
@import &quot;_settings&quot;;

/* ==========================================================================
@base
========================================================================== */
@import &quot;_base&quot;;

/* ==========================================================================
@helpers
========================================================================== */
@import &quot;_helpers&quot;;

/* ==========================================================================
@layout
========================================================================== */
@import &quot;_layout&quot;;

/* ==========================================================================
@skin
========================================================================== */
@import &quot;_skin&quot;;

/* ==========================================================================
@media-queries
========================================================================== */
@import &quot;_media-queries&quot;;

/* ==========================================================================
@ie
========================================================================== */
@import &quot;_ie&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Another great tips. From BEM methodology&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Fast-to-develop, long-lived projects. It should be possible to develop and launch the first version of a website quickly with an architecture that helps to maintain it in the long run.&lt;/li&gt;
&lt;li&gt;Team scalability. Adding new people to a product team should improve speed, not decrease it. We need to be able to assign new members to a team without a steep learning curve.&lt;/li&gt;
&lt;li&gt;Code should be well-structured for a project to remain maintainable over time and team changes.&lt;/li&gt;
&lt;li&gt;Code reuse. To maintain UI consistency and minimize development effort on typical interface components, those components have to be easily reusable. The source code should not have contextual dependency on the other code, it should be easy to move that code to another place.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Our fashionable way&lt;/h2&gt;

&lt;p&gt;I always had concern about my classes notation name, how should I name semantically meaningful? how should I show this on the HTML? How I will better transfer/show by notation name my HTML structure?.. &lt;br&gt;
&lt;strong&gt;One of the most important ideas of classes notation name is try to transfer/show the HTML structure reading the classes names on the CSS file&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Example, Let&#39;s say we have one module.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;css&quot;&gt;
.promo-box {
    property: value;
}
.promo-box-inner {
    property: value;
}
.promo-box-img {
    property: value;
}
.promo-box-tit {
    property: value;
}
.promo-box-txt {
    property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I even don&#39;t need to show you the HTML markup to make you understand the HTML structure, can you see the possibilities here?!&lt;/p&gt;

&lt;h2&gt;I&#39;m changing to..&lt;/h2&gt;

&lt;p&gt;One week before I write this post I saw the speak of &lt;a href=&quot;http://nicolasgallagher.com/&quot; target=&quot;_blank&quot; title=&quot;&quot;&gt;Nicolas Gallagher&lt;/a&gt; about &amp;quot;Questioning good practices&amp;quot; (I highly recommend) in his speak he also showed a &lt;a href=&quot;http://www.yandex.com/&quot; target=&quot;_blank&quot; title=&quot;Russian Search engine&quot;&gt;Russian Search engine&lt;/a&gt; classes notation name and It&#39;s true my notation is fashionable at the moment.&lt;/p&gt;

&lt;p&gt;All made sense. So now on I will use this non-fashionable YET classes notation name but answering the same questions I told you before.&lt;br&gt;
what are you talking about Michael? Here&#39;s a new example of that module above.&lt;/p&gt;

&lt;pre&gt;&lt;code data-language=&quot;css&quot;&gt;
.promoBox {
    property: value;
}
.promoBox-inner {
    property: value;
}
.promoBox-inner-img {
    property: value;
}
.promoBox-inner-tit {
    property: value;
}
.promoBox-inner-txt {
    property: value;
}

.promoBox--round {
    property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have our module &amp;quot;promoBox&amp;quot;, the &amp;quot;promoBox-inner&amp;quot; with one dash means it is a child of &amp;quot;promoBox&amp;quot;, the &amp;quot;promoBox-inner-img&amp;quot; means it is child of &amp;quot;promoBox-inner&amp;quot; that it is child of &amp;quot;promoBox&amp;quot; and so on. &lt;br&gt;
Lastly we have &amp;quot;promoBox--round&amp;quot; with two dashes that means extended/modifier. Beautiful right?!&lt;/p&gt;

&lt;h2&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;There&#39;s no absolute way to write, give classes name notation or build &amp;quot;The god master CSS architecture&amp;quot; but there&#39;s definitely great practices to make a great Web application and it all depends on your team and the focus on your Web application goals.&lt;/p&gt;
</description>
				<published>2013-03-08 00:00:00 -0600</published>
				<link>http://bymichaellancaster.com//blog/css-architecture-for-web-applications</link>
			</item>
		
			<item>
				<title>Secrets of Lea Verou about CSS.</title>
				<description>&lt;p&gt;I&#39;m not sure when it was but in the end of 2011 or beginning of 2012 I saw &lt;a href=&quot;http://lea.verou.me/&quot; title=&quot;Lea Verou&quot; target=&quot;_blank&quot;&gt;Lea Verou&lt;/a&gt; talking about &amp;quot;CSS3 Secrets: 10 things you might not know about CSS3&amp;quot; and it was great see how many great techniques we can use to achieve our &lt;br&gt; client - side goals.&lt;/p&gt;

&lt;h2&gt;10 things you might not know about CSS3&lt;/h2&gt;

&lt;div class=&quot;fluidMedia&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/54wJkqG8jXE&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt; &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;And this year (2013) she had another great speak at W3Conf in San Francisco about &amp;quot;More CSS Secrets: Another 10 things you may not know about CSS&amp;quot;&lt;/p&gt;

&lt;h2&gt;More CSS Secrets: Another 10 things you may not know about CSS&lt;/h2&gt;

&lt;div class=&quot;fluidMedia&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/3ikye7Qc7Ak&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt; &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;As you can see she is a Client - Side hacker specifically in CSS and always bringing new ideas and techniques to solve common problems we used to solve with complex javascript code and hacks.&lt;/p&gt;
</description>
				<published>2013-03-03 00:00:00 -0600</published>
				<link>http://bymichaellancaster.com//blog/secrets-of-lea-verou-css</link>
			</item>
		
	</channel>
</rss>
